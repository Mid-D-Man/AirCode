@* Layout/Admin/SuperiorAdminLayout.razor *@
@inherits LayoutComponentBase

@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Domain.Entities
@using AirCode.Domain.ValueObjects
@using AirCode.Models.Supabase
@using AirCode.Services.Academic
@using AirCode.Services.Courses
@using AirCode.Services.Attendance
@using AirCode.Services.Firebase
@using Blazored.Toast
@using Blazored.Toast.Configuration
@inject ICourseService CourseService
@inject IAttendanceSessionService AttendanceService
@inject IFirestoreService FirestoreService
@inject IAcademicSessionService AcademicSessionService
@implements IDisposable

<div class="superior-admin-layout">
    <SuperiorAdminNavMenu />
    <div class="main-content">
        <BlazoredToasts Position="ToastPosition.TopRight"
                        Timeout="5"
                        IconType="IconType.FontAwesome"
                        SuccessClass="success-toast"
                        InfoClass="info-toast"
                        WarningClass="warning-toast"
                        ErrorClass="error-toast"
                        ShowProgressBar="true" />
        <div class="content-top">
            <DynamicSearch Context="Admin" Placeholder="Search admin..."/>
            <ThemeToggle/>
            <div class="quick-stats">
                @if (_isLoading)
                {
                    @for (int i = 0; i < 2; i++)
                    {
                        <div class="stat-item loading">
                            <div class="stat-value skeleton">---</div>
                            <div class="stat-label skeleton">Loading...</div>
                        </div>
                    }
                }
                else
                {
                    <div class="stat-item">
                        <span class="stat-value">@_totalUsers</span>
                        <span class="stat-label">Total Users</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value">@_activeSessions</span>
                        <span class="stat-label">Active Sessions</span>
                    </div>
                }
            </div>
        </div>
        <div class="content-bottom">
            @Body
        </div>
    </div>
</div>

@code {
    private bool _isLoading = true;
    private bool _disposed = false;
    private int _totalUsers = 0;
    private int _activeSessions = 0;
    private Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatsData();
        StartAutoRefresh();
    }

    private async Task LoadStatsData()
    {
        if (_disposed) return;

        try
        {
            var tasks = new[]
            {
                LoadTotalUsers(),
                LoadActiveSessions()
            };

            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Stats loading error: {ex.Message}");
            // Keep fallback values
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadTotalUsers()
    {
        try
        {
            // Aggregate from multiple sources like dashboard
            var studentCourses = await CourseService.GetAllStudentCoursesAsync() ?? new List<StudentCourse>();
            var lecturerData = await FirestoreService.GetDocumentAsync<LecturerAdminDocument>("VALID_ADMIN_IDS", "LecturerAdminIdsDoc");
            
            var totalStudents = studentCourses.Count;
            var totalLecturers = lecturerData?.Ids?.Count ?? 0;
            _totalUsers = totalStudents + totalLecturers;
        }
        catch
        {
            _totalUsers = 150; // Fallback
        }
    }

    private async Task LoadActiveSessions()
    {
        try
        {
            var sessions = await AttendanceService?.GetActiveSessionsAsync() ?? new List<SupabaseAttendanceSession>();
            _activeSessions = sessions.Count;
        }
        catch
        {
            _activeSessions = 25; // Fallback
        }
    }

    private void StartAutoRefresh()
    {
        _refreshTimer = new Timer(async _ => 
        {
            if (!_disposed)
            {
                await InvokeAsync(async () => await LoadStatsData());
            }
        }, null, TimeSpan.FromMinutes(2), TimeSpan.FromMinutes(2));
    }

    public void Dispose()
    {
        _disposed = true;
        _refreshTimer?.Dispose();
    }
}