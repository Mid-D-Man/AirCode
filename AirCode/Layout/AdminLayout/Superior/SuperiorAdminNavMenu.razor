@inherits LayoutComponentBase
@using AirCode.Components.Admin.Shared
@using AirCode.Utilities.DataStructures
@using Aircode.Components.Admin.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using AirCode.Services.Auth
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject  ConnectivityService ConnectivityService
@implements IDisposable

<div class="nav-menu @(IsExpanded ? "expanded" : "collapsed")" @ref="navMenuRef">
    <div class="nav-top">
        <Burger OnToggle="ToggleNavMenu" />
    </div>

    <div class="nav-middle">
        @foreach (var item in FilteredNavigationItems)
        {
            <NavLink href="@item.Path" class="nav-item" data-tooltip="@item.Label">
                <NavMenuButton
                    IconName="@item.IconName"
                    Label="@item.Label"
                    IsExpanded="IsExpanded"
                    OnClick="@(() => NavigationManager.NavigateTo(item.Path, false))"
                    IsDisabled="@(!item.IsAvailable)"
                />
            </NavLink>
        }
    </div>

    <div class="nav-bottom">
        @foreach (var item in FilteredBottomItems)
        {
            <NavLink href="@(item.Path ?? "#")" class="nav-item" data-tooltip="@item.Label">
                <NavMenuButton
                    IconName="@item.IconName"
                    Label="@item.Label"
                    IsExpanded="IsExpanded"
                    OnClick="@(item.Action ?? (() => {}))"
                    IsDisabled="@(!item.IsAvailable)"
                />
            </NavLink>
        }
    </div>
</div>

@code {
    private bool IsExpanded { get; set; } = true;
    private bool IsOnline { get; set; } = true;
    private string UserRole { get; set; } = string.Empty;
    private ElementReference navMenuRef;
    private DotNetObjectReference<SuperiorAdminNavMenu> objRef;

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Initialize connectivity checker
        objRef = DotNetObjectReference.Create(this);
        
        // Get initial online status
        IsOnline = await ConnectivityService.GetSimpleOnlineStatusAsync();

        // Get user role
        try
        {
            UserRole = await AuthService.GetUserRoleAsync() ?? string.Empty;
        }
        catch
        {
            UserRole = string.Empty;
        }

        // Enable GPU acceleration
        await JSRuntime.InvokeVoidAsync("enableGPUAcceleration", navMenuRef);
    }

    [JSInvokable]
    public void OnConnectivityChanged(bool online)
    {
        IsOnline = online;
        StateHasChanged();
    }

    private void ToggleNavMenu(bool isChecked)
    {
        IsExpanded = isChecked;
        StateHasChanged();
    }

    private void HandleSettings() => NavigationManager.NavigateTo("/admin/settings");
    private void HandleContact() => NavigationManager.NavigateTo("/admin/contact");
    private void HandleLogout() => NavigationManager.NavigateTo("logout");
//arrange this stuff propperly  do keep in mind if clasrep start attendance he auto scan for himself first 
    private List<NavItemExtended> NavigationItems => new()
    {
        new("home", "Dashboard", "Admin/SuperiorDashboard", true, new[] { "superioradmin"}),
        new("home", "Dashboard", "Admin/Dashboard", true, new[] {"lectureradmin", "courserepadmin" }),
        
        new("qrcode", "Attendance Event", "Admin/CreateSession", true, new[] { "superioradmin", "lectureradmin", "courserepadmin" }),
        
        new("users", "Session Management", "Admin/ManageAcademicSession", true, new[] { "superioradmin"}),
        new("admin", "Manage Departments", "Admin/ManageDepartments", true, new[] { "superioradmin" }),
        new("courses", "Manage Courses", "Admin/ManageCourses", true, new[] { "superioradmin" }),
        new("adduser", "Manage Users", "Admin/ManageUsers", true, new[] { "superioradmin" }),
        
        new("courses", "Manage My Courses", "Admin/Lecturer/Courses", true, new[] { "lectureradmin" }),
        new("courses2", "My Courses", "Client/Courses", true, new[] { "courserepadmin" }),
        new("stats", "My Stats", "Client/Stats", true, new[] { "courserepadmin" }),

        new("records", "Reports", "Admin/Reports", true, new[] { "courserepadmin","lectureradmin","superioradmin" }),
    };

    private List<NavItemExtended> BottomItems => new()
    {
        new("settings", "Settings", "Admin/Settings", false, new[] { "superioradmin", "lectureradmin", "courserepadmin", "assistantcourserep" }),
        new("contact", "Contact", "ContactUs", false, new[] { "superioradmin", "lectureradmin", "courserepadmin", "assistantcourserep" }),
        new("logout", "logout", "logout", false, new[] { "superioradmin", "lectureradmin", "courserepadmin", "assistantcourserep" }, HandleLogout)
    };

    private List<NavItemExtended> FilteredNavigationItems => 
        NavigationItems.Where(item => 
            item.AllowedRoles.Contains(UserRole.ToLower()) && 
            (IsOnline || !item.RequiresOnline)
        ).ToList();

    private List<NavItemExtended> FilteredBottomItems => 
        BottomItems.Where(item => 
            item.AllowedRoles.Contains(UserRole.ToLower()) && 
            (IsOnline || !item.RequiresOnline)
        ).ToList();

    public async void Dispose()
    {
       await ConnectivityService.DisposeAsync();
        objRef?.Dispose();
    }

    private class NavItemExtended
    {
        public string IconName { get; set; }
        public string Label { get; set; }
        public string? Path { get; set; }
        public bool RequiresOnline { get; set; }
        public string[] AllowedRoles { get; set; }
        public Action? Action { get; set; }
        public bool IsAvailable => true; // Can be extended for more complex logic

        public NavItemExtended(string iconName, string label, string? path, bool requiresOnline, string[] allowedRoles, Action? action = null)
        {
            IconName = iconName;
            Label = label;
            Path = path;
            RequiresOnline = requiresOnline;
            AllowedRoles = allowedRoles;
            Action = action;
        }
    }
}