@inherits LayoutComponentBase
@using AirCode.Components.Admin.Shared
@using AirCode.Utilities.DataStructures
@using Aircode.Components.Admin.Shared
@using AirCode.Models.UI
@using Microsoft.AspNetCore.Components.Authorization
@using AirCode.Services.Auth
@using AirCode.Services.VisualElements
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ConnectivityService ConnectivityService
@inject ISvgIconService SvgIconService
@implements IDisposable

<div class="nav-menu @(IsExpanded ? "expanded" : "collapsed")" @ref="navMenuRef">
    <div class="nav-top">
        <Burger OnToggle="ToggleNavMenu" />
    </div>

    <div class="nav-middle">
        @foreach (var item in FilteredNavigationItems)
        {
            <NavLink href="@item.Path" class="nav-item" data-tooltip="@item.Label">
                <NavMenuButton
                    IconName="@item.IconName"
                    IconSvg="@GetIconContent(item.IconName)"
                    Label="@item.Label"
                    IsExpanded="IsExpanded"
                    OnClick="@(() => NavigationManager.NavigateTo(item.Path, false))"
                    IsDisabled="@(!item.IsAvailable)"
                />
            </NavLink>
        }
    </div>

    <div class="nav-bottom">
        @foreach (var item in FilteredBottomItems)
        {
            <NavLink href="@(item.Path ?? "#")" class="nav-item" data-tooltip="@item.Label">
                <NavMenuButton
                    IconName="@item.IconName"
                    IconSvg="@GetIconContent(item.IconName)"
                    Label="@item.Label"
                    IsExpanded="IsExpanded"
                    OnClick="@(item.Action ?? (() => {}))"
                    IsDisabled="@(!item.IsAvailable)"
                />
            </NavLink>
        }
    </div>
</div>

@code {
    private bool IsExpanded { get; set; } = true;
    private bool IsOnline { get; set; } = true;
    private string UserRole { get; set; } = string.Empty;
    private ElementReference navMenuRef;
    private DotNetObjectReference<SuperiorAdminNavMenu> objRef;
    private Dictionary<string, string> _iconCache = new();
    private Dictionary<string, string> _emojiMap = new()
    {
        { "home", "🏠" },
        { "qrcode", "📱" },
        { "users", "👥" },
        { "admin", "⚙️" },
        { "courses", "📚" },
        { "adduser", "👤➕" },
        { "courses2", "📖" },
        { "stats", "📊" },
        { "records", "📋" },
        { "settings", "⚙️" },
        { "contact", "📞" },
        { "logout", "🚪" }
    };

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        IsOnline = await ConnectivityService.GetSimpleOnlineStatusAsync();

        try
        {
            UserRole = await AuthService.GetUserRoleAsync() ?? string.Empty;
        }
        catch
        {
            UserRole = string.Empty;
        }

        await LoadIconsAsync();
        await JSRuntime.InvokeVoidAsync("enableGPUAcceleration", navMenuRef);
    }

    private async Task LoadIconsAsync()
    {
        var iconNames = new[] { "home", "qrcode", "users", "admin", "courses", "adduser", 
                               "courses2", "stats", "records", "settings", "contact", "logout" };
        
        foreach (var iconName in iconNames)
        {
            try
            {
                var svgContent = await SvgIconService.GetSvgContentAsync(iconName);
                if (!string.IsNullOrEmpty(svgContent))
                {
                    _iconCache[iconName] = svgContent;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load icon {iconName}: {ex.Message}");
            }
        }
    }

    private string GetIconContent(string iconName)
    {
        if (_iconCache.TryGetValue(iconName, out var svgContent))
        {
            return svgContent;
        }

        // Fallback to emoji
        if (_emojiMap.TryGetValue(iconName, out var emoji))
        {
            return CreateEmojiSvg(emoji);
        }

        return CreateDefaultSvg();
    }

    private string CreateEmojiSvg(string emoji)
    {
        return $@"<svg width=""20"" height=""20"" viewBox=""0 0 20 20"" xmlns=""http://www.w3.org/2000/svg"">
                    <text x=""10"" y=""14"" text-anchor=""middle"" font-size=""14"">{emoji}</text>
                  </svg>";
    }

    private string CreateDefaultSvg()
    {
        return @"<svg width=""20"" height=""20"" viewBox=""0 0 20 20"" xmlns=""http://www.w3.org/2000/svg"">
                   <circle cx=""10"" cy=""10"" r=""8"" fill=""currentColor"" opacity=""0.3""/>
                 </svg>";
    }

    [JSInvokable]
    public void OnConnectivityChanged(bool online)
    {
        IsOnline = online;
        StateHasChanged();
    }

    private void ToggleNavMenu(bool isChecked)
    {
        IsExpanded = isChecked;
        StateHasChanged();
    }

    private void HandleSettings() => NavigationManager.NavigateTo("/admin/settings");
    private void HandleContact() => NavigationManager.NavigateTo("/admin/contact");
    private void HandleLogout() => NavigationManager.NavigateTo("logout");

    private List<NavItemExtended> NavigationItems => new()
    {
        new("home", "Dashboard", "Admin/SuperiorDashboard", true, new[] { "superioradmin"}),
        new("home", "Dashboard", "Admin/Dashboard", true, new[] {"lectureradmin", "courserepadmin" }),
        
        new("qrcode", "Attendance Event", "Admin/CreateSession", true, new[] { "superioradmin", "lectureradmin", "courserepadmin" }),
        
        new("users", "Session Management", "Admin/ManageAcademicSession", true, new[] { "superioradmin"}),
        new("admin", "Manage Departments", "Admin/ManageDepartments", true, new[] { "superioradmin" }),
        new("courses", "Manage Courses", "Admin/ManageCourses", true, new[] { "superioradmin" }),
        new("adduser", "Manage Users", "Admin/ManageUsers", true, new[] { "superioradmin" }),
        
        new("courses", "Manage My Courses", "Admin/Lecturer/Courses", true, new[] { "lectureradmin" }),
        new("courses2", "My Courses", "Client/Courses", true, new[] { "courserepadmin" }),
        new("stats", "My Stats", "Client/Stats", true, new[] { "courserepadmin" }),

        new("records", "Reports", "Admin/Reports", true, new[] { "courserepadmin","lectureradmin","superioradmin" }),
    };

    private List<NavItemExtended> BottomItems => new()
    {
        new("settings", "Settings", "Admin/Settings", false, new[] { "superioradmin", "lectureradmin", "courserepadmin", "assistantcourserep" }),
        new("contact", "Contact", "ContactUs", false, new[] { "superioradmin", "lectureradmin", "courserepadmin", "assistantcourserep" }),
        new("logout", "logout", "logout", false, new[] { "superioradmin", "lectureradmin", "courserepadmin", "assistantcourserep" }, HandleLogout)
    };

    private List<NavItemExtended> FilteredNavigationItems => 
        NavigationItems.Where(item => 
            item.AllowedRoles.Contains(UserRole.ToLower()) && 
            (IsOnline || !item.RequiresOnline)
        ).ToList();

    private List<NavItemExtended> FilteredBottomItems => 
        BottomItems.Where(item => 
            item.AllowedRoles.Contains(UserRole.ToLower()) && 
            (IsOnline || !item.RequiresOnline)
        ).ToList();

    public async void Dispose()
    {
       await ConnectivityService.DisposeAsync();
        objRef?.Dispose();
    }
}