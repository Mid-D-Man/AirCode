@*  ClientLayout.razor  *@
@namespace AirCode.Layout.ClientLayout
@using Blazored.Toast
@using Blazored.Toast.Configuration
@inherits LayoutComponentBase
@inject AirCode.Services.VisualElements.ISvgIconService SvgIconService
@inject AirCode.Services.Auth.IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="client-layout">
    <div class="main-content">
        <BlazoredToasts Position="ToastPosition.TopRight"
                        Timeout="5"
                        IconType="IconType.FontAwesome"
                        SuccessClass="success-toast"
                        InfoClass="info-toast"
                        WarningClass="warning-toast"
                        ErrorClass="error-toast"
                        ShowProgressBar="true" />
        <div class="content-top">
            <div class="header-left">
                <h2>AirCode</h2>
            </div>
            <div class="header-right">
                <div class="profile-button" @onclick="NavigateToProfile">
                    @if (!string.IsNullOrEmpty(userPictureUrl))
                    {
                        <img src="@userPictureUrl" alt="Profile" class="profile-image" @onerror="HandleImageError"/>
                    }
                    else if (!string.IsNullOrEmpty(userIconSvg))
                    {
                        @((MarkupString)userIconSvg)
                    }
                    else
                    {
                        @((MarkupString)GetDefaultProfileIcon())
                    }
                </div>
            </div>
        </div>
        <div class="content-bottom">
            @Body
            
        </div>
    </div>
    <ClientNavMenu />
</div>

@code {
    private string userIconSvg = string.Empty;
    private string userPictureUrl = string.Empty;
    private bool imageLoadFailed = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfileAsync();
    }

    private async Task LoadUserProfileAsync()
    {
        try
        {
            userPictureUrl = await AuthService.GetUserPictureAsync();
            
            if (string.IsNullOrEmpty(userPictureUrl))
            {
                userIconSvg = await SvgIconService.GetCrowGuyIconAsync();
            }
        }
        catch (Exception ex)
        {
        await MID_HelperFunctions.DebugMessageAsync($"Error loading user profile: {ex.Message}",DebugClass.Exception);
            userIconSvg = string.Empty;
            userPictureUrl = string.Empty;
        }
    }

    private string GetDefaultProfileIcon()
    {
        return @"<svg width=""24"" height=""24"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"">
                   <text x=""12"" y=""16"" text-anchor=""middle"" font-size=""16"">ðŸ‘¤</text>
                 </svg>";
    }

    private async Task HandleImageError()
    {
        if (!imageLoadFailed)
        {
            imageLoadFailed = true;
            userPictureUrl = string.Empty;
            
            try
            {
                userIconSvg = await SvgIconService.GetCrowGuyIconAsync();
                if (string.IsNullOrEmpty(userIconSvg))
                {
                    userIconSvg = GetDefaultProfileIcon();
                }
            }
            catch
            {
                userIconSvg = GetDefaultProfileIcon();
            }
            
            StateHasChanged();
        }
    }
    
    private void NavigateToProfile()
    {
        NavigationManager.NavigateTo("Client/Profile");
    }
}