@* Layout/ClientLayout/ClientNavMenu.razor *@
@namespace AirCode.Layout.ClientLayout
@inject NavigationManager NavigationManager
@inject AirCode.Services.VisualElements.ISvgIconService SvgIconService
@using AirQrCode.Components.SharedPrefabs

<div class="client-nav-menu">
    <div class="nav-buttons">
        <CircularNavigationButton 
            IconSvgContent="@statsIconSvg"
            IconPath="@(string.IsNullOrEmpty(statsIconSvg) ? "svgs/stats.svg" : "")"
            Text="Stats"
            ButtonClass="@GetButtonClass("stats")"
            IsActive="@(currentPage == "stats")"
            OnClick="@(() => NavigateTo("stats"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@scanIconSvg"
            IconPath="@(string.IsNullOrEmpty(scanIconSvg) ? "svgs/scan_qrcode.svg" : "")"
            Text="Scan"
            ButtonClass="@GetPrimaryButtonClass("scan")"
            IsActive="@(currentPage == "scan")"
            OnClick="@(() => NavigateTo("scan"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@settingsIconSvg"
            IconPath="@(string.IsNullOrEmpty(settingsIconSvg) ? "svgs/settings.svg" : "")"
            Text="Settings"
            ButtonClass="@GetButtonClass("settings")"
            IsActive="@(currentPage == "settings")"
            OnClick="@(() => NavigateTo("settings"))" />
    </div>
</div>

@code {
    private string currentPage = "scan";
    private string statsIconSvg = string.Empty;
    private string scanIconSvg = string.Empty;
    private string settingsIconSvg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Determine the current page from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var path = uri.AbsolutePath;
        
        if (path.Contains("Stats"))
            currentPage = "stats";
        else if (path.Contains("Courses"))
            currentPage = "settings";
        else
            currentPage = "scan";

        // Load SVG icons with fallback handling
        await LoadIcons();
        
        // Listen for navigation changes
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    
    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        var uri = NavigationManager.ToAbsoluteUri(e.Location);
        var path = uri.AbsolutePath;
        
        if (path.Contains("Stats"))
            currentPage = "stats";
        else if (path.Contains("Courses"))
            currentPage = "settings";
        else
            currentPage = "scan";
            
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task LoadIcons()
    {
        try
        {
            // Load with explicit error handling for each icon
            var statsTask = SvgIconService.GetSvgContentAsync("stats");
            var scanTask = SvgIconService.GetSvgContentAsync("scan_qrcode");
            var settingsTask = SvgIconService.GetSvgContentAsync("settings");

            var results = await Task.WhenAll(statsTask, scanTask, settingsTask);
            
            statsIconSvg = results[0] ?? string.Empty;
            scanIconSvg = results[1] ?? string.Empty;
            settingsIconSvg = results[2] ?? string.Empty;

            // Debug logging
            Console.WriteLine($"Stats SVG loaded: {!string.IsNullOrEmpty(statsIconSvg)}");
            Console.WriteLine($"Scan SVG loaded: {!string.IsNullOrEmpty(scanIconSvg)}");
            Console.WriteLine($"Settings SVG loaded: {!string.IsNullOrEmpty(settingsIconSvg)}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading navigation icons: {ex.Message}");
            // Icons remain empty, fallback to IconPath will be used
        }
        
        StateHasChanged();
    }

    private string GetButtonClass(string page)
    {
        return currentPage == page ? "nav-active" : "";
    }

    private string GetPrimaryButtonClass(string page)
    {
        var baseClass = "primary";
        var activeClass = currentPage == page ? " nav-active" : "";
        return baseClass + activeClass;
    }

    private void NavigateTo(string page)
    {
        switch (page)
        {
            case "stats":
                NavigationManager.NavigateTo("Client/Stats");
                break;
            case "settings":
                NavigationManager.NavigateTo("Client/Courses");
                break;
            case "scan":
            default:
                NavigationManager.NavigateTo("Client/ScanAttendance");
                break;
        }
    }
}