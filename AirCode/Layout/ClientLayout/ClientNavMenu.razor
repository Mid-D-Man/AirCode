@* Layout/ClientLayout/ClientNavMenu.razor *@
@namespace AirCode.Layout.ClientLayout
@inject NavigationManager NavigationManager
@inject AirCode.Services.VisualElements.ISvgIconService SvgIconService
@using AirQrCode.Components.SharedPrefabs
@implements IDisposable

<div class="client-nav-menu">
    <div class="nav-buttons">
        <CircularNavigationButton 
            IconSvgContent="@_icons["stats"]"
            IconPath="@(string.IsNullOrEmpty(_icons["stats"]) ? "svgs/stats.svg" : "")"
            Text="Stats"
            ButtonClass="@GetButtonClass("stats")"
            IsActive="@(_currentPage == "stats")"
            OnClick="@(() => NavigateTo("stats"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@_icons["scan"]"
            IconPath="@(string.IsNullOrEmpty(_icons["scan"]) ? "svgs/scan_qrcode.svg" : "")"
            Text="Scan"
            ButtonClass="@GetPrimaryButtonClass("scan")"
            IsActive="@(_currentPage == "scan")"
            OnClick="@(() => NavigateTo("scan"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@_icons["courses"]"
            IconPath="@(string.IsNullOrEmpty(_icons["courses"]) ? "svgs/courses.svg" : "")"
            Text="MyCourses"
            ButtonClass="@GetButtonClass("courses")"
            IsActive="@(_currentPage == "courses")"
            OnClick="@(() => NavigateTo("courses"))" />
    </div>
</div>

@code {
    private string _currentPage = "scan";
    private readonly Dictionary<string, string> _icons = new();
    private readonly Dictionary<string, string> _emojiMap = new()
    {
        { "stats", "ðŸ“Š" },
        { "scan", "ðŸ“·" },
        { "courses", "ðŸ“š" }
    };
    private bool _disposed = false;

    protected override async Task OnInitializedAsync()
    {
        SetCurrentPage();
        NavigationManager.LocationChanged += OnLocationChanged;
        await LoadIconsOptimized();
    }

    private void SetCurrentPage()
    {
        var path = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).AbsolutePath;
        _currentPage = path switch
        {
            var p when p.Contains("Stats") => "stats",
            var p when p.Contains("Courses") => "courses",
            _ => "scan"
        };
    }
    
    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (!_disposed)
        {
            SetCurrentPage();
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadIconsOptimized()
    {
        var iconMap = new Dictionary<string, string>
        {
            { "stats", "stats" },
            { "scan", "scan_qrcode" },
            { "courses", "courses" }
        };

        var loadTasks = iconMap.Select(async kvp =>
        {
            try
            {
                var svgContent = await SvgIconService.GetSvgContentAsync(kvp.Value);
                return (key: kvp.Key, content: svgContent ?? CreateEmojiSvg(_emojiMap[kvp.Key]));
            }
            catch
            {
                return (key: kvp.Key, content: CreateEmojiSvg(_emojiMap[kvp.Key]));
            }
        });

        var results = await Task.WhenAll(loadTasks);
        
        foreach (var (key, content) in results)
        {
            _icons[key] = content;
        }
        
        StateHasChanged();
    }

    private string CreateEmojiSvg(string emoji)
    {
        return $@"<svg width=""24"" height=""24"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"">
                    <text x=""12"" y=""16"" text-anchor=""middle"" font-size=""16"">{emoji}</text>
                  </svg>";
    }

    private string GetButtonClass(string page) => _currentPage == page ? "nav-active" : "";
    
    private string GetPrimaryButtonClass(string page) => "primary" + (_currentPage == page ? " nav-active" : "");

    private void NavigateTo(string page)
    {
        var route = page switch
        {
            "stats" => "Client/Stats",
            "courses" => "Client/Courses",
            _ => "Client/ScanAttendance"
        };
        NavigationManager.NavigateTo(route);
    }
    
    public void Dispose()
    {
        _disposed = true;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}