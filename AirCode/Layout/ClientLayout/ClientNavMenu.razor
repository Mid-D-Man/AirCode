@* Layout/ClientLayout/ClientNavMenu.razor *@
@namespace AirCode.Layout.ClientLayout
@inject NavigationManager NavigationManager
@inject AirCode.Services.VisualElements.ISvgIconService SvgIconService
@using AirQrCode.Components.SharedPrefabs

<div class="client-nav-menu">
    <div class="nav-buttons">
        <CircularNavigationButton 
            IconSvgContent="@statsIconSvg"
            IconPath="@(string.IsNullOrEmpty(statsIconSvg) ? "svgs/stats.svg" : "")"
            Text="Stats"
            ButtonClass="@GetButtonClass("stats")"
            IsActive="@(currentPage == "stats")"
            OnClick="@(() => NavigateTo("stats"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@scanIconSvg"
            IconPath="@(string.IsNullOrEmpty(scanIconSvg) ? "svgs/scan_qrcode.svg" : "")"
            Text="Scan"
            ButtonClass="@GetPrimaryButtonClass("scan")"
            IsActive="@(currentPage == "scan")"
            OnClick="@(() => NavigateTo("scan"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@settingsIconSvg"
            IconPath="@(string.IsNullOrEmpty(settingsIconSvg) ? "svgs/settings.svg" : "")"
            Text="Settings"
            ButtonClass="@GetButtonClass("settings")"
            IsActive="@(currentPage == "settings")"
            OnClick="@(() => NavigateTo("settings"))" />
    </div>
</div>

@code {
    private string currentPage = "scan";
    private string statsIconSvg = string.Empty;
    private string scanIconSvg = string.Empty;
    private string settingsIconSvg = string.Empty;
    private bool _iconsLoaded = false;
    private int _retryCount = 0;
    private const int MAX_RETRIES = 3;

    protected override async Task OnInitializedAsync()
    {
        SetCurrentPage();
        await LoadIconsWithRetry();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void SetCurrentPage()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var path = uri.AbsolutePath;
        
        currentPage = path switch
        {
            var p when p.Contains("Stats") => "stats",
            var p when p.Contains("Courses") => "settings",
            _ => "scan"
        };
    }
    
    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        SetCurrentPage();
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task LoadIconsWithRetry()
    {
        while (_retryCount < MAX_RETRIES && !_iconsLoaded)
        {
            _retryCount++;
            
            try
            {
                Console.WriteLine($"Attempting icon load (attempt {_retryCount}/{MAX_RETRIES})");
                
                // Load icons with timeout protection
                var loadTasks = new[]
                {
                    LoadSingleIconAsync("stats"),
                    LoadSingleIconAsync("scan_qrcode"),
                    LoadSingleIconAsync("settings")
                };

                // Add overall timeout
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(8));
                var results = await Task.WhenAll(loadTasks).WaitAsync(cts.Token);
                
                statsIconSvg = results[0];
                scanIconSvg = results[1];  
                settingsIconSvg = results[2];

                // Validate load success
                var loadedCount = new[] { statsIconSvg, scanIconSvg, settingsIconSvg }
                    .Count(icon => !string.IsNullOrEmpty(icon));

                Console.WriteLine($"Loaded {loadedCount}/3 icons successfully");
                
                if (loadedCount >= 2) // Accept partial success
                {
                    _iconsLoaded = true;
                    Console.WriteLine("Icon loading completed successfully");
                }
                else if (_retryCount < MAX_RETRIES)
                {
                    Console.WriteLine($"Insufficient icons loaded, retrying in {_retryCount}s...");
                    await Task.Delay(_retryCount * 1000); // Progressive delay
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Icon load attempt {_retryCount} failed: {ex.Message}");
                
                if (_retryCount < MAX_RETRIES)
                {
                    await Task.Delay(_retryCount * 1000);
                }
            }
        }

        // Final fallback assignment
        if (!_iconsLoaded)
        {
            Console.WriteLine("All icon load attempts failed, using fallbacks");
            statsIconSvg = string.Empty;
            scanIconSvg = string.Empty;
            settingsIconSvg = string.Empty;
        }
        
        StateHasChanged();
    }

    private async Task<string> LoadSingleIconAsync(string iconName)
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3));
            var content = await SvgIconService.GetSvgContentAsync(iconName);
            
            if (!string.IsNullOrEmpty(content))
            {
                Console.WriteLine($"✓ {iconName} loaded successfully");
                return content;
            }
            else
            {
                Console.WriteLine($"✗ {iconName} returned empty content");
                return string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"✗ {iconName} load failed: {ex.Message}");
            return string.Empty;
        }
    }

    private string GetButtonClass(string page)
    {
        return currentPage == page ? "nav-active" : "";
    }

    private string GetPrimaryButtonClass(string page)
    {
        var baseClass = "primary";
        var activeClass = currentPage == page ? " nav-active" : "";
        return baseClass + activeClass;
    }

    private void NavigateTo(string page)
    {
        switch (page)
        {
            case "stats":
                NavigationManager.NavigateTo("Client/Stats");
                break;
            case "settings":
                NavigationManager.NavigateTo("Client/Courses");
                break;
            case "scan":
            default:
                NavigationManager.NavigateTo("Client/ScanAttendance");
                break;
        }
    }
}