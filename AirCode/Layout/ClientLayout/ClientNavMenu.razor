@* Layout/ClientLayout/ClientNavMenu.razor *@
@namespace AirCode.Layout.ClientLayout
@inject NavigationManager NavigationManager
@inject AirCode.Services.VisualElements.ISvgIconService SvgIconService
@using AirQrCode.Components.SharedPrefabs

<div class="client-nav-menu">
    <div class="nav-buttons">
        <CircularNavigationButton 
            IconSvgContent="@statsIconSvg"
            Text="Stats"
            ButtonClass="@GetButtonClass("stats")"
            IsActive="@(currentPage == "stats")"
            OnClick="@(() => NavigateTo("stats"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@scanIconSvg"
            Text="Scan"
            ButtonClass="@GetPrimaryButtonClass("scan")"
            IsActive="@(currentPage == "scan")"
            OnClick="@(() => NavigateTo("scan"))" />
        
        <CircularNavigationButton 
            IconSvgContent="@settingsIconSvg"
            Text="Settings"
            ButtonClass="@GetButtonClass("settings")"
            IsActive="@(currentPage == "settings")"
            OnClick="@(() => NavigateTo("settings"))" />
    </div>
</div>

@code {
    private string currentPage = "scan";
    private string statsIconSvg = string.Empty;
    private string scanIconSvg = string.Empty;
    private string settingsIconSvg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Determine the current page from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var path = uri.AbsolutePath;
        
        if (path.Contains("stats"))
            currentPage = "stats";
        else if (path.Contains("settings"))
            currentPage = "settings";
        else
            currentPage = "scan";

        // Load SVG icons
        await LoadIcons();
    }

    private async Task LoadIcons()
    {
        try
        {
            statsIconSvg = await SvgIconService.GetSvgContentAsync("stats") ?? string.Empty;
            scanIconSvg = await SvgIconService.GetSvgContentAsync("scan_qrcode") ?? string.Empty;
            settingsIconSvg = await SvgIconService.GetSvgContentAsync("settings") ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading navigation icons: {ex.Message}");
            // Icons will remain empty strings, component should handle gracefully
        }
    }

    private string GetButtonClass(string page)
    {
        return currentPage == page ? "nav-active" : "";
    }

    private string GetPrimaryButtonClass(string page)
    {
        var baseClass = "primary";
        var activeClass = currentPage == page ? " nav-active" : "";
        return baseClass + activeClass;
    }

    private void NavigateTo(string page)
    {
        currentPage = page;
        
        switch (page)
        {
            case "stats":
                NavigationManager.NavigateTo("/Client/Stats");
                break;
            case "settings":
                NavigationManager.NavigateTo("/Client/Settings");
                break;
            default:
                NavigationManager.NavigateTo("/Client/ScanPage");
                break;
        }
    }
}