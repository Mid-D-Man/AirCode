@page "/UnknownError"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="error-container">
    <div class="animated-background">
        <div class="floating-shapes">
            @for (int i = 0; i < 8; i++)
            {
                <div class="shape shape-@i"></div>
            }
        </div>
        
        <div class="gradient-orbs">
            <div class="orb orb-1"></div>
            <div class="orb orb-2"></div>
        </div>
    </div>

    <div class="content-wrapper">
        <div class="error-content">
            <!-- Static Error Icon -->
            <div class="error-icon-container">
                <div class="error-icon">
                    <svg class="error-symbol" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"/>
                        <line x1="15" y1="9" x2="9" y2="15"/>
                        <line x1="9" y1="9" x2="15" y2="15"/>
                    </svg>
                </div>
            </div>

            <!-- Static Title -->
            <div class="title-container">
                <h1 class="error-title">
                    SYSTEM ANOMALY DETECTED
                </h1>
            </div>

            <!-- Error Code -->
            <div class="error-code-container">
                <div class="error-code">
                    <span class="code-label">ERROR CODE:</span>
                    <span class="code-value" id="errorCode">UNKNOWN_0x4F75</span>
                </div>
                <div class="code-description">
                    <span>An unexpected error occurred. Please try the options below.</span>
                </div>
            </div>

            <!-- Status Indicators -->
            <div class="status-indicators">
                <div class="indicator indicator-1">
                    <div class="indicator-light error-light"></div>
                    <span>SYSTEM STATUS</span>
                </div>
                <div class="indicator indicator-2">
                    <div class="indicator-light warning-light"></div>
                    <span>RECOVERY MODE</span>
                </div>
                <div class="indicator indicator-3">
                    <div class="indicator-light success-light"></div>
                    <span>USER SESSION</span>
                </div>
            </div>

            <!-- Action Buttons - Fixed for Mobile -->
            <div class="action-buttons">
                <button class="btn btn-primary" @onclick="ReturnHome" type="button">
                    <div class="btn-content">
                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                            <polyline points="9,22 9,12 15,12 15,22"/>
                        </svg>
                        <span>RETURN TO BASE</span>
                    </div>
                </button>

                <button class="btn btn-secondary" @onclick="ContactSupport" type="button">
                    <div class="btn-content">
                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
                        </svg>
                        <span>CONTACT SUPPORT</span>
                    </div>
                </button>

                <button class="btn btn-warning" @onclick="InitiateLogout" type="button">
                    <div class="btn-content">
                        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/>
                            <polyline points="16,17 21,12 16,7"/>
                            <line x1="21" y1="12" x2="9" y2="12"/>
                        </svg>
                        <span>EMERGENCY LOGOUT</span>
                    </div>
                </button>
            </div>

            <!-- Simplified Diagnostic Information -->
            <div class="diagnostic-panel">
                <div class="panel-header">
                    <span>DIAGNOSTIC INFORMATION</span>
                    <button class="toggle-switch" @onclick="ToggleDiagnostics" type="button" aria-label="Toggle diagnostics">
                        <div class="toggle-slider @(showDiagnostics ? "active" : "")"></div>
                    </button>
                </div>
                <div class="panel-content @(showDiagnostics ? "active" : "")" id="diagnosticContent">
                    <div class="diagnostic-item">
                        <span class="diagnostic-label">Timestamp:</span>
                        <span class="diagnostic-value" id="timestamp"></span>
                    </div>
                    <div class="diagnostic-item">
                        <span class="diagnostic-label">Session ID:</span>
                        <span class="diagnostic-value" id="sessionId"></span>
                    </div>
                    <div class="diagnostic-item">
                        <span class="diagnostic-label">User Agent:</span>
                        <span class="diagnostic-value" id="userAgent"></span>
                    </div>
                    <div class="diagnostic-item">
                        <span class="diagnostic-label">Stack Trace:</span>
                        <span class="diagnostic-value">Classified</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Simplified Particle System -->
    <div class="particle-system" id="particleSystem"></div>
</div>

@code {
    private bool showDiagnostics = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                // Simplified initialization
                window.initializeErrorPage = function() {
                    // Initialize diagnostic information
                    const now = new Date();
                    document.getElementById('timestamp').textContent = now.toISOString();
                    document.getElementById('sessionId').textContent = 'SID-' + Math.random().toString(36).substr(2, 9).toUpperCase();
                    document.getElementById('userAgent').textContent = navigator.userAgent.substring(0, 50) + '...';

                    // Simple particle system (reduced for performance)
                    const particleSystem = document.getElementById('particleSystem');
                    const particleCount = window.innerWidth < 768 ? 5 : 10;
                    
                    function createParticle() {
                        const particle = document.createElement('div');
                        particle.className = 'particle';
                        particle.style.left = Math.random() * 100 + '%';
                        particle.style.animationDuration = (15 + Math.random() * 10) + 's';
                        particle.style.animationDelay = Math.random() * 5 + 's';
                        particleSystem.appendChild(particle);
                        
                        setTimeout(() => {
                            if (particle.parentNode) {
                                particle.parentNode.removeChild(particle);
                            }
                        }, 25000);
                    }
                    
                    for (let i = 0; i < particleCount; i++) {
                        setTimeout(() => createParticle(), i * 1000);
                    }
                    
                    setInterval(() => {
                        if (particleSystem.children.length < particleCount) {
                            createParticle();
                        }
                    }, 5000);
                };

                window.initializeErrorPage();
            ");
        }
    }

    private async Task ReturnHome()
    {
        Navigation.NavigateTo("/", true);
    }

    private async Task ContactSupport()
    {
        Navigation.NavigateTo("ContactUs", true);
    }

    private async Task InitiateLogout()
    {
        Navigation.NavigateTo("logout", true);
    }

    private void ToggleDiagnostics()
    {
        showDiagnostics = !showDiagnostics;
    }
}