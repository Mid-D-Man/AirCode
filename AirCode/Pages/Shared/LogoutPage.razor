@page "/logout"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using AirCode.Services.Storage
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Services.Auth
@using AirCode.Utilities.HelperScripts
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IOfflineCredentialsService OfflineCredentialsService
@inject IBlazorAppLocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JSRuntime

@if (showConfirmation)
{
    <div class="logout-container">
        <div class="logout-card">
            <div class="logout-icon">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17,7L15.59,8.41L18.17,11H8V13H18.17L15.59,15.59L17,17L22,12L17,7M4,5H12V3H4C2.89,3 2,3.89 2,5V19A2,2 0 0,0 4,21H12V19H4V5Z"/>
                </svg>
            </div>
            <div class="logout-content">
                <h2 class="logout-title">Confirm Logout</h2>
                <p class="logout-message">Are you sure you want to sign out of AirCode? You'll need to authenticate again to access your account.</p>
                <div class="logout-actions">
                    <button class="btn btn-secondary" @onclick="CancelLogout">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z"/>
                        </svg>
                        Cancel
                    </button>
                    <button class="btn btn-danger" @onclick="ConfirmLogout">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M17,7L15.59,8.41L18.17,11H8V13H18.17L15.59,15.59L17,17L22,12L17,7M4,5H12V3H4C2.89,3 2,3.89 2,5V19A2,2 0 0,0 4,21H12V19H4V5Z"/>
                        </svg>
                        Sign Out
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else if (isLoggingOut)
{
    <div class="logout-container">
        <div class="logout-card processing-card">
            <div class="logout-icon processing-icon">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17,7L15.59,8.41L18.17,11H8V13H18.17L15.59,15.59L17,17L22,12L17,7M4,5H12V3H4C2.89,3 2,3.89 2,5V19A2,2 0 0,0 4,21H12V19H4V5Z"/>
                </svg>
            </div>
            <LoadingSpinner Title="Logging out..." Subtitle="Securely signing you out of AirCode and Auth0, please wait." />
        </div>
    </div>
}

@code {
    private bool showConfirmation = true;
    private bool isLoggingOut = false;

    private void CancelLogout()
    {
        Navigation.NavigateTo("", forceLoad: false);
    }

    private async Task ConfirmLogout()
    {
        showConfirmation = false;
        isLoggingOut = true;
        StateHasChanged();

        try
        {
            MID_HelperFunctions.DebugMessage("Calling Logout...");
            // Check if user is authenticated
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity?.IsAuthenticated == true)
            {
                // Clear offline credentials
                await OfflineCredentialsService.ClearCredentialsAsync();

                // Clear local storage
                await LocalStorageService.ClearAllAsync();

                // Clear session storage
                await JSRuntime.InvokeVoidAsync("sessionStorage.clear");

                // Get the ID token for proper OIDC logout
                var tokenResult = await TokenProvider.RequestAccessToken();
                string idTokenHint = null;

                if (tokenResult.TryGetToken(out var token))
                {
                    // Try to get the ID token from the token result
                    if (token.Value.Contains("id_token"))
                    {
                        var tokenParts = token.Value.Split('&');
                        var idTokenPart = tokenParts.FirstOrDefault(p => p.StartsWith("id_token="));
                        if (idTokenPart != null)
                        {
                            idTokenHint = idTokenPart.Substring("id_token=".Length);
                        }
                    }
                }

                // Build OIDC logout URL
                var authority = $"https://{Configuration["Auth0:Domain"]}";
                var clientId = Configuration["Auth0:ClientId"];
                var returnUrl = Uri.EscapeDataString(Navigation.BaseUri);
                
                string logoutUrl;
                if (!string.IsNullOrEmpty(idTokenHint))
                {
                    // Use OIDC logout with ID token hint
                    logoutUrl = $"{authority}/oidc/logout?id_token_hint={idTokenHint}&post_logout_redirect_uri={returnUrl}";
                }
                else
                {
                    // Fallback to Auth0 v2 logout
                    logoutUrl = $"{authority}/v2/logout?client_id={clientId}&returnTo={returnUrl}";
                }

                // Redirect to logout URL
                Navigation.NavigateTo(logoutUrl, forceLoad: true);
            }
            else
            {
                // User not authenticated, redirect to home
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Logout error: {ex.Message}");
            // Fallback logout method
            var authority = $"https://{Configuration["Auth0:Domain"]}";
            var clientId = Configuration["Auth0:ClientId"];
            var returnUrl = Uri.EscapeDataString(Navigation.BaseUri);
            var logoutUrl = $"{authority}/v2/logout?client_id={clientId}&returnTo={returnUrl}";
            Navigation.NavigateTo(logoutUrl, forceLoad: true);
        }
    }
}
