@page "/outside-business-hours"
@using AirCode.Services.Time
@inject IServerTimeService ServerTimeService
@inject IJSRuntime JSRuntime

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="text-center">
        <div class="mb-4">
            <i class="fas fa-clock fa-5x text-warning"></i>
        </div>
        
        <h1 class="display-4 text-dark mb-3">Outside Business Hours</h1>
        <p class="lead text-muted mb-4">
            This application is only available during business hours:<br>
            <strong>Monday - Friday, 8:00 AM - 7:00 PM</strong>
        </p>
        
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Current Server Time</h5>
                <p class="card-text display-6 text-primary" id="current-time">
                    @currentServerTime.ToString("dddd, MMMM dd, yyyy")
                    <br>
                    @currentServerTime.ToString("hh:mm:ss tt")
                </p>
                
                @if (nextBusinessDay.HasValue)
                {
                    <hr>
                    <p class="text-muted mb-0">
                        Next available: <strong>@nextBusinessDay.Value.ToString("dddd, MMMM dd at 8:00 AM")</strong>
                    </p>
                }
            </div>
        </div>
        
        <div class="mt-4">
            <button class="btn btn-outline-primary" @onclick="CheckBusinessHours">
                <i class="fas fa-refresh me-2"></i>Check Again
            </button>
        </div>
    </div>
</div>

@code {
    private DateTime currentServerTime = DateTime.UtcNow;
    private DateTime? nextBusinessDay;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await UpdateCurrentTime();
        CalculateNextBusinessDay();
        
        // Update time every second
        refreshTimer = new Timer(async _ => await UpdateTimeCallback(), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private async Task UpdateTimeCallback()
    {
        await InvokeAsync(async () =>
        {
            await UpdateCurrentTime();
            StateHasChanged();
        });
    }

    private async Task UpdateCurrentTime()
    {
        try
        {
            currentServerTime = await ServerTimeService.GetCurrentServerTimeAsync();
        }
        catch
        {
            currentServerTime = DateTime.UtcNow; // Fallback
        }
    }

    private void CalculateNextBusinessDay()
    {
        var checkDate = currentServerTime.Date;
        
        // Find next business day
        for (int i = 1; i <= 7; i++)
        {
            checkDate = checkDate.AddDays(1);
            
            if (checkDate.DayOfWeek != DayOfWeek.Saturday && 
                checkDate.DayOfWeek != DayOfWeek.Sunday)
            {
                nextBusinessDay = checkDate;
                break;
            }
        }
    }

    private async Task CheckBusinessHours()
    {
        await UpdateCurrentTime();
        
        if (ServerTimeService.IsBusinessHours())
        {
            // Navigate to home or last requested page
            await JSRuntime.InvokeVoidAsync("location.reload");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}