@page "/"
@layout MainLayout
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Domain.Enums
@using AirCode.Layout.Main
@using AirCode.Services.Auth
@using AirCode.Services.Auth.Offline
@using AirCode.Utilities.HelperScripts
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IOfflineCredentialsService OfflineCredentialService
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<BlobBackground />

<div class="main-container">
    <AuthorizeView>
        <Authorized>
            @{
                // For lectureradmin users, we include an invisible NavLink to ShaderPage1.
                // This hidden link enables us to auto-trigger navigation without using NavigationManager directly.
            }
            <!-- Invisible NavLink for ShaderPage1 auto-navigation -->
            <NavLink id="autoNav" href="/ShaderPage1" style="display: none;"></NavLink>

            @{
                // If user is already authenticated, redirect them based on their role
                _ = RedirectAuthenticatedUser();
            }
            <div class="welcome-section">
                <h1 class="welcome-title">Welcome back!</h1>
                <p class="welcome-subtitle">Redirecting you to your dashboard...</p>
            </div>
            <!-- Optional button to manually trigger the hidden NavLink for testing -->
            <button @onclick="TriggerNav">Navigate Invisibly</button>
        </Authorized>
        <NotAuthorized>
            <div class="welcome-section">
                <h1 class="welcome-title">Welcome to AirCode</h1>
                <p class="welcome-subtitle">Secure attendance tracking for higher institutions</p>
            </div>

            <div class="auth-container">
                <div class="auth-options">
                    <PrimaryButton Text="Continue Online" OnClick="ContinueOnline" IsLoading="@isOnlineLoading" />
                    <PrimaryButton Text="Continue Offline" OnClick="ContinueOffline" Class="offline-button" IsLoading="@isOfflineLoading" />
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private bool isOnlineLoading = false;
    private bool isOfflineLoading = false;
    private bool isOnline = true;
    private DotNetObjectReference<Index> objRef;

    protected override async Task OnInitializedAsync()
    {
        // Register connectivity checker for online status updates
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("connectivityChecker.init", objRef);

        // Get the initial online status
        isOnline = await JSRuntime.InvokeAsync<bool>("connectivityChecker.getOnlineStatus");
    }

    [JSInvokable]
    public void OnConnectivityChanged(bool online)
    {
        isOnline = online;
        StateHasChanged();
    }

    private async Task RedirectAuthenticatedUser()
    {
        try
        {
            // Get the user's role
            string userRole = await AuthService.GetUserRoleAsync();
            MID_HelperFunctions.DebugMessage($"[auth] Logging in user with role {userRole}");
            // Redirect based on the role
            switch (userRole?.ToLower())
            {
                case "superioradmin":
                    NavigationManager.NavigateTo("/SupaTest", forceLoad: false);
                    break;
                case "lectureradmin":
                    // Auto-trigger the hidden NavLink for ShaderPage1
                    await TriggerNav();
                    break;
                case "courseadmin":
                    NavigationManager.NavigateTo("/SupaTest", forceLoad: false);
                    break;
                case "student":
                    NavigationManager.NavigateTo("/Client/Dashboard", forceLoad: false);
                    break;
                default:
                    // If the role is undetermined, navigate to an auth-info page for troubleshooting
                    NavigationManager.NavigateTo("/auth-info", forceLoad: false);
                    break;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error redirecting authenticated user: {ex.Message}");
        }
    }

    private async Task TriggerNav()
    {
        await JSRuntime.InvokeVoidAsync("triggerAutoNav");
    }



    private async Task ContinueOnline()
    {
        isOnlineLoading = true;

        if (!isOnline)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You are currently offline. Please check your internet connection and try again.");
            isOnlineLoading = false;
            return;
        }

        // Use built-in authentication for online users
        NavigationManager.NavigateTo("authentication/login");
        isOnlineLoading = false;
    }

    private async Task ContinueOffline()
    {
        isOfflineLoading = true;

        try
        {
            // Check for existing offline credentials
            var offlineCredentials = await OfflineCredentialService.GetCredentialsAsync();

            if (offlineCredentials == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "No offline credentials found. Please log in online at least once.");
                isOfflineLoading = false;
                return;
            }

            // Retrieve user id and role
            string userId = await OfflineCredentialService.GetUserIdAsync();
            string userRole = await OfflineCredentialService.GetUserRoleAsync();

            if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(userRole))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid offline credentials. Please log in online.");
                isOfflineLoading = false;
                return;
            }

            // Navigate based on offline credentialsâ€™ user role
            switch (userRole.ToLower())
            {
                case "lectureradmin":
                    NavigationManager.NavigateTo("/Admin/Dashboard");
                    break;
                case "courseadmin":
                    NavigationManager.NavigateTo("/Admin/Dashboard");
                    break;
                case "student":
                    NavigationManager.NavigateTo("/Client/Dashboard");
                    break;
                default:
                    await JSRuntime.InvokeVoidAsync("alert", "Unable to determine user role. Please log in online.");
                    break;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error accessing offline credentials: {ex.Message}");
        }
        finally
        {
            isOfflineLoading = false;
        }
    }

    public void Dispose()
    {
        // Clean up and dispose JS interop connections
        JSRuntime.InvokeVoidAsync("connectivityChecker.dispose");
        objRef?.Dispose();
    }
}
