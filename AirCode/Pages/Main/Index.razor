@page "/"
@layout MainLayout
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Components.SharedPrefabs.Cards
@using AirCode.Layout.Main
@using AirCode.Services.Auth
@using AirCode.Utilities.HelperScripts
@using Microsoft.AspNetCore.Components.Authorization
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Domain.Enums
@using AirCode.Domain.ValueObjects
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IOfflineCredentialsService OfflineCredentialService
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ConnectivityService ConnectivityService

@implements IDisposable

<BlobBackground />
<NotificationComponent @ref="notificationComponent" Position="NotificationPosition.TopRight" />

<div class="main-container">
    <AuthorizeView>
        <Authorized>
            @{
                // If user is already authenticated, redirect them based on their role
                _ = RedirectAuthenticatedUser();
            }
            <LoadingSpinner Title="Welcome back!" Subtitle="Redirecting you to your dashboard..." />
        </Authorized>
        <NotAuthorized>
            <div class="logo-section">
                <img src="AirCode_LogoAndText.png" 
                     alt="AirCode Logo" 
                     class="brand-logo" 
                     loading="eager" />
            </div>
            
            <div class="welcome-section">
                
                <p class="welcome-subtitle">Secure attendance tracking for higher institutions</p>
            </div>

            <div class="auth-container">
                <div class="auth-options">
                    <PrimaryButton Text="Continue Online" OnClick="ContinueOnline" IsLoading="@isOnlineLoading" />
                    <PrimaryButton Text="Continue Offline" OnClick="ContinueOffline" Class="offline-button" IsLoading="@isOfflineLoading" />
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    // Authentication and connectivity logic remains unchanged
    private bool isOnlineLoading = false;
    private bool isOfflineLoading = false;
    private bool isOnline = true;
    private DotNetObjectReference<Index> objRef;
    private NotificationComponent notificationComponent;


    protected override async Task OnInitializedAsync()
{
    await ConnectivityService.InitializeAsync();
    
    // Subscribe to connectivity changes
    ConnectivityService.ConnectivityChanged += OnConnectivityStatusChanged;
    
    // Get initial status
    var status = await ConnectivityService.GetConnectivityStatusAsync();
    isOnline = status.IsOnline;
}

private void OnConnectivityStatusChanged(ConnectivityStatus status)
{
    isOnline = status.IsOnline;
    
    if (!status.IsOnline)
    {
        notificationComponent?.ShowError($"You are currently offline. Network quality: {status.NetworkQuality}");
    }
    else
    {
        notificationComponent?.ShowSuccess($"Connection restored. Network quality: {status.NetworkQuality}");
    }
    
    InvokeAsync(StateHasChanged);
}

    private async Task RedirectAuthenticatedUser()
    {
        try
        {
            // Check online status for authenticated users
            if (!isOnline)
            {
                notificationComponent?.ShowError("You are currently offline. Please check your internet connection.");
                return;
            }

            // Get the user's role
            string userRole = await AuthService.GetUserRoleAsync();
            MID_HelperFunctions.DebugMessage($"[auth] Login in user with role {userRole} auto ");
            
            // Navigate based on the role
            switch (userRole?.ToLower())
            {
                case "superioradmin":
                    NavigationManager.NavigateTo("Admin/SuperiorDashboard", forceLoad: false);
                    break;
                case "lectureradmin":
                    NavigationManager.NavigateTo("Admin/Dashboard", forceLoad: false);
                    break;
                case "courserepadmin":
                    NavigationManager.NavigateTo("Admin/Dashboard", forceLoad: false);
                    break;
                case "student":
                    NavigationManager.NavigateTo("Client/ScanAttendance", forceLoad: false);
                    break;
                default:
                    // If we can't determine the role, go to auth-info for debugging
                    NavigationManager.NavigateTo("UnknownError", forceLoad: false);
                    break;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error redirecting authenticated user: {ex.Message}");
            notificationComponent?.ShowError("Error redirecting to dashboard. Please try again.");
        }
    }

    private async Task ContinueOnline()
    {
        isOnlineLoading = true;

        if (!isOnline)
        {
            notificationComponent?.ShowError("You are currently offline. Please check your internet connection and try again.");
            isOnlineLoading = false;
            return;
        }

        // Use the built-in authentication mechanism
        NavigationManager.NavigateTo("authentication/login");
        
        isOnlineLoading = false;
    }

    private async Task ContinueOffline()
    {
        isOfflineLoading = true;

        try 
        {
            // Check if offline credentials exist
            var offlineCredentials = await OfflineCredentialService.GetCredentialsAsync();

            if (offlineCredentials == null)
            {
                notificationComponent?.ShowError("No offline credentials found. Please login online at least once for credentials to be created.");
                isOfflineLoading = false;
                return;
            }

            // Get user ID and role from credentials
            string userId = await OfflineCredentialService.GetUserIdAsync();
            string userRole = await OfflineCredentialService.GetUserRoleAsync();

            if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(userRole))
            {
                notificationComponent?.ShowError("Invalid offline credentials. Please login online to refresh your credentials.");
                isOfflineLoading = false;
                return;
            }

            // Check if user role supports offline mode (superior admin doesn't)
            if (userRole.ToLower() == "superioradmin")
            {
                notificationComponent?.ShowError("Superior admin accounts do not support offline mode. Please login online.");
                isOfflineLoading = false;
                return;
            }

            // Navigate to dedicated offline pages based on role
            switch (userRole.ToLower())
            {
                case "lectureradmin":
                    NavigationManager.NavigateTo("Admin/OfflineAttendanceEvent", forceLoad: false);
                    break;
                case "courserepadmin":
                    NavigationManager.NavigateTo("Admin/OfflineAttendanceEvent", forceLoad: false);
                    break;
                case "student":
                    NavigationManager.NavigateTo("Client/OfflineScanPage", forceLoad: false);
                    break;
                default:
                    notificationComponent?.ShowError("Unable to determine user role for offline mode. Please login online.");
                    break;
            }
        }
        catch (Exception ex)
        {
            notificationComponent?.ShowError($"Error accessing offline credentials: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", $"Offline login error: {ex.Message}");
        }
        finally 
        {
            isOfflineLoading = false;
        }
    }

    public void Dispose()
    {
        // Clean up JS interop
        JSRuntime.InvokeVoidAsync("connectivityChecker.dispose");
        objRef?.Dispose();
    }
}
