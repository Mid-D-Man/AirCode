@page "/Client/Profile"
@using AirCode.Services.Auth
@using ILocalStorageService = AirCode.Services.Storage.IBlazorAppLocalStorageService
@layout AirCode.Layout.ClientLayout.ClientLayout
@inject NavigationManager NavigationManager
@inject ILocalStorageService BlazorAppLocalStorage
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

<div class="client-profile-page">
    <div class="profile-header">
        <div class="profile-avatar-container">
            <img src="@ProfileImagePath" alt="Profile" class="profile-avatar" />
        </div>
        <div class="profile-user-info">
            <h3>@UserName</h3>
            <p>@UserEmail</p>
            <span class="role-badge">@UserRole</span>
        </div>
    </div>

    <div class="profile-sections">
        <div class="profile-section">
            <h4>User Information</h4>
            <div class="info-group">
                <div class="info-item">
                    <label>User ID</label>
                    <div class="copyable-field">
                        <input type="text" value="@UserId" readonly />
                        <button class="copy-btn" @onclick="() => CopyToClipboard(UserId)">
                            <i class="oi oi-clipboard"></i>
                        </button>
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(MatricNumber))
                {
                    <div class="info-item">
                        <label>Matric Number</label>
                        <div class="copyable-field">
                            <input type="text" value="@MatricNumber" readonly />
                            <button class="copy-btn" @onclick="() => CopyToClipboard(MatricNumber)">
                                <i class="oi oi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(LecturerId))
                {
                    <div class="info-item">
                        <label>Lecturer ID</label>
                        <div class="copyable-field">
                            <input type="text" value="@LecturerId" readonly />
                            <button class="copy-btn" @onclick="() => CopyToClipboard(LecturerId)">
                                <i class="oi oi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                }

                <div class="info-item">
                    <label>Device ID</label>
                    <div class="copyable-field">
                        <input type="text" value="@DeviceId" readonly />
                        <button class="copy-btn" @onclick="() => CopyToClipboard(DeviceId)">
                            <i class="oi oi-clipboard"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="profile-section">
            <h4>App Settings</h4>
            <div class="settings-notice">
                <p><i class="oi oi-info"></i> Minimal settings available for now. More customization options will be added in future updates for a smoother experience.</p>
            </div>
            
            <div class="setting-item">
                <div class="setting-info">
                    <span class="setting-title">Dark Mode</span>
                    <span class="setting-description">Switch between light and dark themes</span>
                </div>
                <div class="setting-control">
                    <label class="toggle-switch">
                        <input type="checkbox" 
                               checked="@isDarkModeEnabled" 
                               @onchange="ToggleDarkMode" />
                        <span class="slider round"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>

    <div class="profile-actions">
        <button class="btn btn-logout" @onclick="Logout">
            <i class="oi oi-account-logout"></i> Logout
        </button>
    </div>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="status-message @(IsErrorMessage ? "error" : "success")">
            @StatusMessage
        </div>
    }
</div>

@code {
    private string ProfileImagePath = "/icons/user-profile.png";
    private string UserName = "Loading...";
    private string UserEmail = "Loading...";
    private string UserRole = "Loading...";
    private string UserId = "Loading...";
    private string MatricNumber = "";
    private string LecturerId = "";
    private string DeviceId = "Loading...";
    private bool isDarkModeEnabled = false;
    private string StatusMessage = "";
    private bool IsErrorMessage = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load user data from AuthService
            UserId = await AuthService.GetUserIdAsync() ?? "Not Available";
            UserRole = await AuthService.GetUserRoleAsync() ?? "Not Available";
            DeviceId = await AuthService.GetDeviceIdAsync() ?? "Not Available";
            
            // Load role-specific data
            if (UserRole?.Contains("Student") == true || UserRole?.Contains("CourseRep") == true)
            {
                MatricNumber = await AuthService.GetMatricNumberAsync() ?? "";
            }
            
            if (UserRole?.Contains("Lecturer") == true)
            {
                LecturerId = await AuthService.GetLecturerIdAsync() ?? "";
            }

            // Set display values (you can enhance this with actual user service later)
            UserName = !string.IsNullOrEmpty(MatricNumber) ? $"Student {MatricNumber}" : 
                      !string.IsNullOrEmpty(LecturerId) ? $"Lecturer {LecturerId}" : 
                      $"User {UserId}";
            UserEmail = "user@aircode.edu"; // Placeholder - replace with actual email service

            // Load theme setting
            isDarkModeEnabled = await BlazorAppLocalStorage.GetItemAsync<bool>("darkMode");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatusMessage = "Error loading profile data";
            IsErrorMessage = true;
            StateHasChanged();
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            StatusMessage = "Copied to clipboard!";
            IsErrorMessage = false;
            StateHasChanged();
            
            // Clear message after 3 seconds
            await Task.Delay(3000);
            StatusMessage = "";
            StateHasChanged();
        }
        catch
        {
            StatusMessage = "Failed to copy to clipboard";
            IsErrorMessage = true;
            StateHasChanged();
        }
    }

    private async Task ToggleDarkMode(ChangeEventArgs e)
    {
        try
        {
            isDarkModeEnabled = (bool)e.Value;
            await BlazorAppLocalStorage.SetItemAsync("darkMode", isDarkModeEnabled);
            await JSRuntime.InvokeVoidAsync("window.themeSwitcher.toggleTheme");
            
            StatusMessage = isDarkModeEnabled ? "Dark mode enabled" : "Light mode enabled";
            IsErrorMessage = false;
            StateHasChanged();
        }
        catch
        {
            StatusMessage = "Failed to change theme";
            IsErrorMessage = true;
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        try
        {
            // Clear any stored data if needed
            await BlazorAppLocalStorage.RemoveItemAsync("darkMode");
            NavigationManager.NavigateTo("/logout", true);
        }
        catch
        {
            StatusMessage = "Logout failed";
            IsErrorMessage = true;
            StateHasChanged();
        }
    }
}
