@page "/Client/ScanPage"
@using AirCode.Components.SharedPrefabs
@using AirCode.Components.SharedPrefabs.Scanner
@layout AirCode.Layout.ClientLayout.ClientLayout
@inject IJSRuntime JSRuntime

<div class="scan-attendance-page">
    <div class="scan-header">
        <h3>Scan QR Code</h3>
        <p>Scan the attendance QR code to mark your presence</p>
    </div>
    
    <div class="scanner-options">
        <label class="scanner-toggle">
            <input type="checkbox" @bind="autoStartScanner" @bind:after="OnToggleAutoStart" />
            <span class="slider"></span>
            <span class="toggle-label">@(autoStartScanner ? "Auto Start" : "Manual Start")</span>
        </label>
    </div>
    
    <div class="scan-container">
        <BasicQRCodeScanner 
            @ref="scannerRef"
            OnScanResult="HandleScanResult"
            OnError="HandleScanError"
            AutoStart="@autoStartScanner"
            ScanDelay="300"
            PreferredCamera="environment" />
    </div>
</div>

<!-- QR Code Result Popup -->
@if (showPopup)
{
    <div class="popup-overlay" @onclick="ClosePopup">
        <div class="popup-content" @onclick:stopPropagation="true">
            <div class="popup-header">
                <h4>QR Code Detected</h4>
                <button class="popup-close" @onclick="ClosePopup">&times;</button>
            </div>
            <div class="popup-body">
                <div class="qr-result">
                    <div class="result-label">Scanned Content:</div>
                    <div class="result-content">@lastScannedCode</div>
                </div>
                <div class="scan-timestamp">
                    Scanned at: @scanTimestamp.ToString("MMM dd, yyyy HH:mm:ss")
                </div>
            </div>
            <div class="popup-footer">
                <button class="btn btn-primary" @onclick="CopyToClipboard">
                    Copy Content
                </button>
                <button class="btn btn-secondary" @onclick="ClosePopup">
                    Continue Scanning
                </button>
            </div>
        </div>
    </div>
}

@code {
    private BasicQRCodeScanner? scannerRef;
    private List<ScanRecord> recentScans = new List<ScanRecord>();
    private bool autoStartScanner = true;
    private bool showPopup = false;
    private string lastScannedCode = string.Empty;
    private DateTime scanTimestamp;
    
    private async Task OnToggleAutoStart()
    {
        // The scanner component will handle auto-start behavior
        StateHasChanged();
    }
    
    private async Task HandleScanResult(string result)
    {
        if (!string.IsNullOrEmpty(result) && !showPopup && result != lastScannedCode)
        {
            // Update UI with scanned data
            lastScannedCode = result;
            scanTimestamp = DateTime.Now;
            showPopup = true;
            
            AddScanRecord(result, true);
            
            // Process the scanned QR code (e.g., validate attendance)
            await ProcessAttendanceCode(result);
            
            StateHasChanged();
        }
    }
    
    private async Task HandleScanError(string error)
    {
        AddScanRecord($"Error: {error}", false);
    }
    
    private async Task ClosePopup()
    {
        showPopup = false;
        
        // Resume scanning if auto-start is enabled
        if (autoStartScanner && scannerRef != null)
        {
            await scannerRef.ResumeScanning();
        }
        
        StateHasChanged();
    }
    
    private async Task CopyToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", lastScannedCode);
            // Could add a brief success indicator here
        }
        catch (Exception)
        {
            // Handle clipboard error - could show error message
            AddScanRecord("Failed to copy to clipboard", false);
        }
    }
    
    private void AddScanRecord(string data, bool isSuccessful)
    {
        var scanRecord = new ScanRecord
        {
            Data = data ?? "Invalid code",
            ScanTime = DateTime.Now,
            IsSuccessful = isSuccessful
        };
        
        recentScans.Insert(0, scanRecord);
        
        // Keep only the most recent scans (limit to 5)
        if (recentScans.Count > 5)
        {
            recentScans.RemoveAt(recentScans.Count - 1);
        }
        
        StateHasChanged();
    }
    
    private async Task ProcessAttendanceCode(string qrCode)
    {
        try
        {
            // Add your attendance processing logic here
            // This could involve:
            // 1. Decrypting the QR code data
            // 2. Validating the session
            // 3. Recording attendance
            // 4. Showing success/failure feedback
            
            Console.WriteLine($"Processing attendance code: {qrCode}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing attendance: {ex.Message}");
            AddScanRecord($"Processing failed: {ex.Message}", false);
        }
    }
    
    private string GetDisplayText(string data)
    {
        if (string.IsNullOrEmpty(data))
            return "Invalid code";
        
        return data.Length > 30 ? data.Substring(0, 27) + "..." : data;
    }
    
    private class ScanRecord
    {
        public string Data { get; set; } = "";
        public DateTime ScanTime { get; set; }
        public bool IsSuccessful { get; set; }
    }
}