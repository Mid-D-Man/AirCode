@page "/Client/ScanAttendance"
@layout AirCode.Layout.ClientLayout.ClientLayout
@inject IJSRuntime JSRuntime
@using AirCode.Models.Supabase
@using AirCode.Services.SupaBase
@using ReactorBlazorQRCodeScanner
@using AirCode.Utilities.HelperScripts
@inject ISupabaseEdgeFunctionService EdgeService
@inject QRCodeDecoder QRDecoder

<div class="scan-attendance-page">
    <div class="scan-header">
        <h3>Scan QR Code</h3>
        <p>Scan the attendance QR code to mark your presence</p>
    </div>
    
    <div class="scan-container @(isProcessing ? "processing" : "") @(scanComplete ? "scan-complete" : "")">
        <div class="qr-scanner-container">
            <QRCodeScanner ShowOutput="false" Width="100%" />
        </div>

        <!-- Scan frame overlay -->
        <div class="scan-frame">
            <div class="corner top-left"></div>
            <div class="corner top-right"></div>
            <div class="corner bottom-left"></div>
            <div class="corner bottom-right"></div>
            <div class="scan-line"></div>
        </div>

        <!-- Processing overlay -->
        @if (isProcessing)
        {
            <div class="processing-overlay">
                <div class="spinner"></div>
                <span>Processing QR Code...</span>
            </div>
        }

        <!-- Result overlay -->
        @if (showResult && !isProcessing)
        {
            <div class="result-overlay @(resultSuccess ? "success" : "error")">
                <div class="result-icon">
                    @if (resultSuccess)
                    {
                        <span class="success-icon">‚úì</span>
                    }
                    else
                    {
                        <span class="error-icon">‚úó</span>
                    }
                </div>
                <div class="result-message">@((MarkupString)resultMessage)</div>
                <button class="continue-btn" @onclick="ContinueScanning">Continue Scanning</button>
            </div>
        }

        <div class="scan-controls">
            @if (isScanning)
            {
                <button class="control-btn" @onclick="StopScanning">
                    <span class="btn-icon">‚è∏</span>
                    Stop Scanner
                </button>
            }
            else
            {
                <button class="control-btn" @onclick="StartScanning">
                    <span class="btn-icon">‚ñ∂</span>
                    Start Scanner
                </button>
            }
        </div>
    </div>
</div>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private bool isScanning = true;
    private bool isProcessing = false;
    private bool showResult = false;
    private bool resultSuccess = false;
    private bool scanComplete = false;
    private string resultMessage = string.Empty;

    // TODO: Get actual user data from authentication service
    private string currentUserMatricNumber = "SukaBlak"; // temporary matric number üòÇüòÇüòÇ

    protected override async Task OnInitializedAsync()
    {
        _onQrCodeScanAction = (code) => OnQrCodeScan(code);
        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JSRuntime);
        
        try
        {
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
            MID_HelperFunctions.DebugMessage("QR Scanner initialized successfully", DebugClass.Info);
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Failed to initialize scanner: {ex.Message}", DebugClass.Exception);
            ShowResult($"Failed to initialize scanner: {ex.Message}", false);
        }
    }

    private async void OnQrCodeScan(string code)
    {
        if (!string.IsNullOrEmpty(code) && !isProcessing && !showResult)
        {
            MID_HelperFunctions.DebugMessage($"QR Code detected: {code}", DebugClass.Info);
            
            // Stop scanning and show processing state
            await PauseScanning();
            isProcessing = true;
            scanComplete = true;
            StateHasChanged();
            
            try
            {
                // Decode the session data
                var decodedSessionData = await QRDecoder.DecodeSessionDataAsync(code);
                
                if (decodedSessionData != null)
                {
                    MID_HelperFunctions.DebugMessage($"Valid AirCode QR detected for course: {decodedSessionData.CourseCode}", DebugClass.Info);
                    
                    // Process attendance
                    await ProcessAttendanceWithNewPayload(code);
                }
                else
                {
                    MID_HelperFunctions.DebugMessage("QR code is not a valid AirCode attendance QR", DebugClass.Warning);
                    ShowResult("Invalid attendance QR code format", false);
                }
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Error processing QR code: {ex.Message}", DebugClass.Exception);
                ShowResult($"Error processing QR code: {ex.Message}", false);
            }
            
            isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ProcessAttendanceWithNewPayload(string qrCode)
    {
        try
        {
            MID_HelperFunctions.DebugMessage($"Processing attendance with new payload structure for QR: {qrCode}", DebugClass.Info);
        
            var attendanceRecord = new AttendanceRecord
            {
                MatricNumber = currentUserMatricNumber,
                HasScannedAttendance = true,
                IsOnlineScan = true
            };
        
            MID_HelperFunctions.DebugMessage($"Attendance record: {MID_HelperFunctions.ToJson(attendanceRecord)}", DebugClass.Log);
        
            // Create the Edge Function request
            var edgeFunctionRequest = await QRDecoder.CreateEdgeFunctionRequestAsync(qrCode, attendanceRecord);
            
            if (edgeFunctionRequest == null)
            {
                ShowResult("Failed to create valid request payload", false);
                return;
            }

            MID_HelperFunctions.DebugMessage($"Edge function request: {MID_HelperFunctions.ToJson(edgeFunctionRequest)}", DebugClass.Log);
        
            // Process attendance
            var result = await EdgeService.ProcessAttendanceWithPayloadAsync(edgeFunctionRequest);
        
            MID_HelperFunctions.DebugMessage($"Edge function result: {MID_HelperFunctions.ToJson(result)}", DebugClass.Log);
        
            if (result.Success)
            {
                ShowResult("Attendance recorded successfully!", true);
                MID_HelperFunctions.DebugMessage("Attendance processed successfully", DebugClass.Info);
            }
            else
            {
                ShowResult($"Failed: {result.Message}", false);
                MID_HelperFunctions.DebugMessage($"Attendance processing failed: {result.Message}", DebugClass.Warning);
            }
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Exception in ProcessAttendanceWithNewPayload: {ex}", DebugClass.Exception);
            ShowResult($"Error: {ex.Message}", false);
        }
    }

    private void ShowResult(string message, bool success)
    {
        resultMessage = message;
        resultSuccess = success;
        showResult = true;
        StateHasChanged();
    }

    private async Task ContinueScanning()
    {
        showResult = false;
        scanComplete = false;
        await ResumeScanning();
        StateHasChanged();
    }

    private async Task PauseScanning()
    {
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                isScanning = false;
                MID_HelperFunctions.DebugMessage("Scanner paused", DebugClass.Log);
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Failed to pause scanner: {ex.Message}", DebugClass.Exception);
                ShowResult($"Failed to pause scanner: {ex.Message}", false);
            }
        }
    }

    private async Task ResumeScanning()
    {
        if (_qrCodeScannerJsInterop != null && !isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
                isScanning = true;
                MID_HelperFunctions.DebugMessage("Scanner resumed", DebugClass.Log);
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Failed to resume scanner: {ex.Message}", DebugClass.Exception);
                ShowResult($"Failed to resume scanner: {ex.Message}", false);
            }
        }
    }

    private async Task StartScanning()
    {
        await ResumeScanning();
    }

    private async Task StopScanning()
    {
        await PauseScanning();
    }

    public async ValueTask DisposeAsync()
    {
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                MID_HelperFunctions.DebugMessage("Scanner disposed", DebugClass.Log);
            }
            catch
            {
                // Ignore disposal errors
            }
        }
    }
}