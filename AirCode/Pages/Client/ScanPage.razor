@page "/Client/ScanAttendance"
@layout AirCode.Layout.ClientLayout.ClientLayout
@inject IJSRuntime JSRuntime
@using AirCode.Services.SupaBase
@using ReactorBlazorQRCodeScanner
@using AirCode.Utilities.DataStructures
@using AirCode.Utilities.HelperScripts

@inject ISupabaseEdgeFunctionService EdgeService
@inject QRCodeDecoder QRDecoder

<div class="scan-attendance-page">
    <div class="scan-header">
        <h3>Scan QR Code</h3>
        <p>Scan the attendance QR code to mark your presence</p>
    </div>
    
    <div class="scan-container">
        <div class="qr-scanner-container">
            <QRCodeScanner ShowOutput="false" Width="100%" />
        </div>

        <div class="scan-controls">
            @if (isScanning)
            {
                <button class="control-btn" @onclick="StopScanning">
                    Stop Scanner
                </button>
            }
            else
            {
                <button class="control-btn" @onclick="StartScanning">
                    Start Scanner
                </button>
            }
        </div>

        @if (showAlert && !string.IsNullOrEmpty(alertMessage))
        {
            <div class="scanner-alert @(isErrorAlert ? "scanner-error" : "scanner-success")">
                @((MarkupString)alertMessage)
            </div>
        }

        @if (isProcessing)
        {
            <div class="processing-indicator">
                <div class="spinner"></div>
                <span>Processing QR Code...</span>
            </div>
        }
    </div>
</div>

<!-- QR Code Result Popup -->
@if (showPopup)
{
    <div class="popup-overlay" @onclick="ClosePopup">
        <div class="popup-content" @onclick:stopPropagation="true">
            <div class="popup-header">
                <h4>QR Code Detected</h4>
                <button class="popup-close" @onclick="ClosePopup">&times;</button>
            </div>
            <div class="popup-body">
                @if (decodedSessionData != null)
                {
                    <div class="session-info">
                        <div class="info-row">
                            <span class="label">Course:</span>
                            <span class="value">@decodedSessionData.CourseCode</span>
                        </div>
                        <div class="info-row">
                            <span class="label">Session:</span>
                            <span class="value">@decodedSessionData.SessionId</span>
                        </div>
                        <div class="info-row">
                            <span class="label">Lecture:</span>
                            <span class="value">@(decodedSessionData.LectureId ?? "General")</span>
                        </div>
                        <div class="info-row">
                            <span class="label">Expires:</span>
                            <span class="value">@decodedSessionData.ExpirationTime.ToString("HH:mm:ss")</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="qr-result">
                        <div class="result-label">Scanned Content:</div>
                        <div class="result-content">@lastScannedCode</div>
                    </div>
                }
                <div class="scan-timestamp">
                    Scanned at: @scanTimestamp.ToString("MMM dd, yyyy HH:mm:ss")
                </div>
            </div>
            <div class="popup-footer">
                @if (attendanceProcessed)
                {
                    <button class="btn btn-success" disabled>
                        ✓ Attendance Recorded
                    </button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="CopyToClipboard">
                        Copy Content
                    </button>
                }
                <button class="btn btn-secondary" @onclick="ClosePopup">
                    Continue Scanning
                </button>
            </div>
        </div>
    </div>
}

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private bool showPopup = false;
    private bool isScanning = true;
    private bool isProcessing = false;
    private bool attendanceProcessed = false;
    private string lastScannedCode = string.Empty;
    private DateTime scanTimestamp;
    private bool showAlert = false;
    private bool isErrorAlert = true;
    private string alertMessage = string.Empty;
    private QRCodeDecoder.DecodedSessionData decodedSessionData;

    // TODO: Get actual user data from authentication service
    private string currentUserMatricNumber = "SukaBlak"; // Replace with actual user data

    protected override async Task OnInitializedAsync()
    {
        _onQrCodeScanAction = (code) => OnQrCodeScan(code);
        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JSRuntime);
        
        try
        {
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
            MID_HelperFunctions.DebugMessage("QR Scanner initialized successfully", DebugClass.Info);
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Failed to initialize scanner: {ex.Message}", DebugClass.Exception);
            ShowAlert($"Failed to initialize scanner: {ex.Message}");
        }
    }

    private async void OnQrCodeScan(string code)
    {
        if (!string.IsNullOrEmpty(code) && !showPopup && !isProcessing)
        {
            MID_HelperFunctions.DebugMessage($"QR Code detected: {code}", DebugClass.Info);
            
            // Stop scanning and show processing state
            await PauseScanning();
            isProcessing = true;
            StateHasChanged();
            
            // Update UI with scanned data
            lastScannedCode = code;
            scanTimestamp = DateTime.Now;
            attendanceProcessed = false;
            
            try
            {
                // First, try to decode as AirCode QR
                decodedSessionData = await QRDecoder.DecodeSessionDataAsync(code);
                
                if (decodedSessionData != null)
                {
                    MID_HelperFunctions.DebugMessage($"Valid AirCode QR detected for course: {decodedSessionData.CourseCode}", DebugClass.Info);
                    
                    // Process attendance with decoded session data
                    await ProcessAttendanceCode(code);
                }
                else
                {
                    MID_HelperFunctions.DebugMessage("QR code is not a valid AirCode attendance QR", DebugClass.Warning);
                    ShowAlert("Invalid attendance QR code format");
                }
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Error processing QR code: {ex.Message}", DebugClass.Exception);
                ShowAlert($"Error processing QR code: {ex.Message}");
            }
            
            isProcessing = false;
            showPopup = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ProcessAttendanceCode(string qrCode)
    {
        try
        {
            MID_HelperFunctions.DebugMessage($"Processing attendance for QR: {qrCode}", DebugClass.Info);
        
            var attendanceRecord = new AttendanceRecord
            {
                MatricNumber = currentUserMatricNumber,
                HasScannedAttendance = true,
                IsOnlineScan = true
            };
        
            MID_HelperFunctions.DebugMessage($"Attendance record: {MID_HelperFunctions.ToJson(attendanceRecord)}", DebugClass.Log);
        
            var result = await EdgeService.ProcessAttendanceAsync(qrCode, attendanceRecord);
        
            MID_HelperFunctions.DebugMessage($"Edge function result: {MID_HelperFunctions.ToJson(result)}", DebugClass.Log);
        
            if (result.Success)
            {
                attendanceProcessed = true;
                ShowAlert($"<span style='color: #28a745; font-weight: bold;'>✓ Attendance recorded successfully!</span>", false);
                MID_HelperFunctions.DebugMessage("Attendance processed successfully", DebugClass.Info);
            }
            else
            {
                ShowAlert($"<span style='color: #dc3545; font-weight: bold;'>✗ Failed:</span> {result.Message}");
                MID_HelperFunctions.DebugMessage($"Attendance processing failed: {result.Message}", DebugClass.Warning);
            }
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Exception in ProcessAttendanceCode: {ex}", DebugClass.Exception);
            ShowAlert($"<span style='color: #dc3545; font-weight: bold;'>Error:</span> {ex.Message}");
        }
    }

    private async Task ClosePopup()
    {
        showPopup = false;
        decodedSessionData = null;
        await ResumeScanning();
        StateHasChanged();
    }

    private async Task PauseScanning()
    {
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                isScanning = false;
                MID_HelperFunctions.DebugMessage("Scanner paused", DebugClass.Log);
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Failed to pause scanner: {ex.Message}", DebugClass.Exception);
                ShowAlert($"Failed to pause scanner: {ex.Message}");
            }
        }
    }

    private async Task ResumeScanning()
    {
        if (_qrCodeScannerJsInterop != null && !isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
                isScanning = true;
                HideAlert();
                MID_HelperFunctions.DebugMessage("Scanner resumed", DebugClass.Log);
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Failed to resume scanner: {ex.Message}", DebugClass.Exception);
                ShowAlert($"Failed to resume scanner: {ex.Message}");
            }
        }
    }

    private async Task StartScanning()
    {
        await ResumeScanning();
    }

    private async Task StopScanning()
    {
        await PauseScanning();
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", lastScannedCode);
            ShowAlert("<span style='color: #17a2b8;'>📋 Content copied to clipboard!</span>", false);
            MID_HelperFunctions.DebugMessage("Content copied to clipboard", DebugClass.Info);
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Failed to copy to clipboard: {ex.Message}", DebugClass.Exception);
            ShowAlert("Failed to copy to clipboard");
        }
    }

    private void ShowAlert(string message, bool isError = true)
    {
        alertMessage = message;
        isErrorAlert = isError;
        showAlert = true;
        StateHasChanged();

        // Auto-hide alert after 4 seconds
        _ = Task.Delay(4000).ContinueWith(_ => HideAlert());
    }

    private void HideAlert()
    {
        showAlert = false;
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                MID_HelperFunctions.DebugMessage("Scanner disposed", DebugClass.Log);
            }
            catch
            {
                // Ignore disposal errors
            }
        }
    }
}