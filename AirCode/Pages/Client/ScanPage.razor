@page "/Client/ScanAttendance"
@layout AirCode.Layout.ClientLayout.ClientLayout
@inject IJSRuntime JSRuntime
@using AirCode.Models.Supabase
@using AirCode.Services.Auth
@using AirCode.Services.Courses
@using AirCode.Services.SupaBase
@using ReactorBlazorQRCodeScanner
@using AirCode.Utilities.HelperScripts
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Components.SharedPrefabs.Buttons
@inject ISupabaseEdgeFunctionService EdgeService
@inject QRCodeDecoder QRDecoder
@inject IAuthService AuthService
@inject ICourseService CourseService

<div class="scan-page">
    <!-- Header -->
    <header class="scan-header">
        <h3>Scan QR Code</h3>
        <p>Scan the attendance QR code to mark your presence</p>
    </header>

    <!-- Main Scanner Area -->
    <main class="scanner-main">
        <!-- QR Scanner Video -->
        <div class="video-container" id="videoContainer">
            <QRCodeScanner ShowOutput="false" Width="100%" />
        </div>

        <!-- Scan Frame Overlay -->
        <div class="scan-overlay">
            <div class="scan-frame" id="scanFrame">
                <div class="frame-corners">
                    <div class="corner tl"></div>
                    <div class="corner tr"></div>
                    <div class="corner bl"></div>
                    <div class="corner br"></div>
                </div>
                <div class="scan-line"></div>
            </div>
        </div>

        <!-- Processing State -->
        @if (isProcessing)
        {
            <div class="processing-state">
                <LoadingSpinner Title="Processing QR Code..." Subtitle="Please wait while we verify your attendance" />
            </div>
        }
    </main>

    <!-- Scan Result Popup -->
    @if (showResultPopup)
    {
        <div class="popup-overlay" @onclick="ClosePopup">
            <div class="result-popup" @onclick:stopPropagation="true">
                <div class="popup-header">
                    <h4>@popupTitle</h4>
                    <button class="close-btn" @onclick="ClosePopup">×</button>
                </div>
                <div class="popup-content">
                    <div class="result-icon @(scanSuccess ? "success" : "error")">
                        @if (scanSuccess)
                        {
                            <span>✓</span>
                        }
                        else
                        {
                            <span>✗</span>
                        }
                    </div>
                    <p class="result-message">@popupMessage</p>
                </div>
                <div class="popup-footer">
                    <PrimaryButton Text="Continue" OnClick="ClosePopup" />
                </div>
            </div>
        </div>
    }

    <!-- Performance Info (Debug) -->
    @if (showPerformanceInfo)
    {
        <div class="performance-info">
            <small>
                GPU: @(gpuAccelerated ? "✓" : "✗") | 
                FPS: @currentFPS |
                Device: @devicePixelRatio
            </small>
        </div>
    }

    <!-- Controls -->
    <footer class="scan-controls">
        @if (isScanning)
        {
            <button class="control-btn stop" @onclick="StopScanning">
                <span class="icon">⏸</span>
                Stop Scanner
            </button>
        }
        else
        {
            <button class="control-btn start" @onclick="StartScanning">
                <span class="icon">▶</span>
                Start Scanner
            </button>
        }
        
        <button class="control-btn settings" @onclick="TogglePerformanceInfo">
            <span class="icon">⚙️</span>
            Performance
        </button>
    </footer>
</div>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private bool isScanning = true;
    private bool isProcessing = false;
    private bool scanComplete = false;
    
    // Performance monitoring
    private bool gpuAccelerated = false;
    private bool showPerformanceInfo = false;
    private int currentFPS = 0;
    private double devicePixelRatio = 1.0;
    private Timer? performanceTimer;
    
    // Popup state
    private bool showResultPopup = false;
    private bool scanSuccess = false;
    private string popupTitle = "";
    private string popupMessage = "";

    // User data
    private string currentUserMatricNumber = "SukaBlak";
    private string deviceGUID = "N";
    
    protected override async Task OnInitializedAsync()
    {
        _onQrCodeScanAction = (code) => OnQrCodeScan(code);
        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JSRuntime);
        
        try
        {
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
            MID_HelperFunctions.DebugMessage("QR Scanner initialized successfully", DebugClass.Info);

            currentUserMatricNumber = await AuthService.GetMatricNumberAsync();
            deviceGUID = await AuthService.GetDeviceIdAsync();
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Failed to initialize scanner: {ex.Message}", DebugClass.Exception);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await OptimizePerformance();
            await MonitorPerformance();
        }
    }

    private async Task OptimizePerformance()
    {
        try
        {
            // Enable GPU acceleration for key elements
            var gpuElements = new[]
            {
                "#videoContainer",
                ".video-container video",
                "#scanFrame",
                ".scan-line",
                ".processing-state",
                ".result-popup"
            };

            foreach (var element in gpuElements)
            {
                await JSRuntime.InvokeVoidAsync("enableGPUAcceleration", element);
            }

            // Check GPU acceleration status
            gpuAccelerated = await JSRuntime.InvokeAsync<bool>("getGPUAccelerationStatus", "#videoContainer");
            
            // Get device pixel ratio for optimization
            devicePixelRatio = await JSRuntime.InvokeAsync<double>("eval", "window.devicePixelRatio || 1");
            
            MID_HelperFunctions.DebugMessage($"Performance optimized - GPU: {gpuAccelerated}, DPR: {devicePixelRatio}", DebugClass.Info);
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Performance optimization failed: {ex.Message}", DebugClass.Warning);
        }
    }

    private async Task MonitorPerformance()
    {
        try
        {
            // Monitor performance every 2 seconds
            performanceTimer = new Timer(async _ => 
            {
                try
                {
                    var fps = await JSRuntime.InvokeAsync<int>("eval", @"
                        (() => {
                            const video = document.querySelector('.video-container video');
                            return video && video.webkitDecodedFrameCount ? 
                                Math.round(video.webkitDecodedFrameCount / video.currentTime) || 0 : 0;
                        })()
                    ");
                    currentFPS = fps;
                    await InvokeAsync(StateHasChanged);
                }
                catch
                {
                    // Ignore monitoring errors
                }
            }, null, 0, 2000);
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Performance monitoring setup failed: {ex.Message}", DebugClass.Warning);
        }
    }

    private async Task OnQrCodeScan(string code)
    {
        if (!string.IsNullOrEmpty(code) && CanProcessAttendance())
        {
            MID_HelperFunctions.DebugMessage($"QR Code detected: {code}", DebugClass.Info);
        
            await PauseScanning();
            isProcessing = true;
            scanComplete = true;
            StateHasChanged();
        
            try
            {
                var decodedSessionData = await QRDecoder.DecodeSessionDataAsync(code);

                if (decodedSessionData != null)
                {
                    MID_HelperFunctions.DebugMessage($"Valid AirCode QR detected for course: {decodedSessionData.CourseCode}", DebugClass.Info);
                    var myCourses = await CourseService.GetStudentCoursesByMatricAsync(currentUserMatricNumber);
                    var courseRefs = myCourses.GetEnrolledCourses();

                    bool isTakingCourse = courseRefs.FirstOrDefault(course => course.CourseCode == decodedSessionData.CourseCode) != null;

                    if (isTakingCourse)
                    {
                        await ProcessAttendanceWithNewPayload(code);
                    }
                    else
                    {
                        ShowResultPopup(false, "Course Not Found", "You are not enrolled in this course. Please contact your instructor if this is incorrect.");
                    }
                }
                else
                {
                    ShowResultPopup(false, "Invalid QR Code", "This QR code is not a valid AirCode attendance QR. Please scan the correct QR code from your instructor.");
                }
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Error processing QR code: {ex.Message}", DebugClass.Exception);
                ShowResultPopup(false, "Processing Error", "An error occurred while processing the QR code. Please try again.");
            }
        
            isProcessing = false;
            scanComplete = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ProcessAttendanceWithNewPayload(string qrCode)
    {
        try
        {
            MID_HelperFunctions.DebugMessage($"Processing attendance with new payload structure for QR: {qrCode}", DebugClass.Info);
        
            var attendanceRecord = new AttendanceRecord
            {
                MatricNumber = currentUserMatricNumber,
                HasScannedAttendance = true,
                IsOnlineScan = true,
                DeviceGUID = deviceGUID
            };
        
            MID_HelperFunctions.DebugMessage($"Attendance record: {MID_HelperFunctions.ToJson(attendanceRecord)}", DebugClass.Log);
        
            var edgeFunctionRequest = await QRDecoder.CreateEdgeFunctionRequestAsync(qrCode, attendanceRecord);
            
            if (edgeFunctionRequest == null)
            {
                ShowResultPopup(false, "Request Failed", "Failed to create a valid attendance request. Please try scanning again.");
                return;
            }

            MID_HelperFunctions.DebugMessage($"Edge function request: {MID_HelperFunctions.ToJson(edgeFunctionRequest)}", DebugClass.Log);
        
            var result = await EdgeService.ProcessAttendanceWithPayloadAsync(edgeFunctionRequest);
        
            MID_HelperFunctions.DebugMessage($"Edge function result: {MID_HelperFunctions.ToJson(result)}", DebugClass.Log);
        
            if (result.Success)
            {
                ShowResultPopup(true, "Attendance Recorded", "Your attendance has been successfully recorded for this session.");
            }
            else
            {
                var userFriendlyMessage = GetUserFriendlyErrorMessage(result.ErrorCode, result.Message);
                ShowResultPopup(false, "Attendance Failed", userFriendlyMessage);
            }
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Exception in ProcessAttendanceWithNewPayload: {ex}", DebugClass.Exception);
            ShowResultPopup(false, "System Error", "A system error occurred. Please try again or contact support.");
        }
    }

    private void ShowResultPopup(bool success, string title, string message)
    {
        scanSuccess = success;
        popupTitle = title;
        popupMessage = message;
        showResultPopup = true;
        StateHasChanged();
    }

    private async Task ClosePopup()
    {
        showResultPopup = false;
        StateHasChanged();
        await ResumeScanning();
    }

    private void TogglePerformanceInfo()
    {
        showPerformanceInfo = !showPerformanceInfo;
        StateHasChanged();
    }

    private string GetUserFriendlyErrorMessage(string errorCode, string originalMessage)
    {
        return errorCode switch
        {
            "DUPLICATE_ATTENDANCE" => "You have already marked attendance for this session. Multiple submissions are not allowed.",
            "SESSION_NOT_FOUND" => "This attendance session does not exist or has been removed. Please check with your instructor.",
            "TEMPORAL_KEY_EXPIRED" => "Your QR code has expired. Please scan the latest QR code displayed by your instructor.",
            "TEMPORAL_KEY_MISSING" => "This session requires a temporal security key. Please scan a fresh QR code.",
            "DEVICE_SECURITY_VIOLATION" => "This device has already been used by another student for attendance. Please use your own device or contact your instructor.",
            "DEVICE_GUID_MISSING" => "Device identification is required for this secure session.",
            "MATRIC_NUMBER_MISSING" => "Student identification number is required for attendance.",
            "SESSION_QUERY_ERROR" => "Database connection failed. Please check your internet connection and try again.",
            "ATTENDANCE_UPDATE_ERROR" => "Failed to save attendance record. Please try again or contact support.",
            "NETWORK_ERROR" => "Network connection failed. Please check your internet connection.",
            "SUPABASE_CONFIG_ERROR" => "Server configuration error. Please contact technical support.",
            "INVALID_JSON" => "Invalid request format. Please try scanning the QR code again.",
            "MISSING_PARAMETERS" => "Required information is missing. Please try scanning the QR code again.",
            _ => originalMessage
        };
    }

    private bool CanProcessAttendance()
    {
        if (isProcessing)
        {
            MID_HelperFunctions.DebugMessage("Attendance processing already in progress", DebugClass.Warning);
            return false;
        }

        if (string.IsNullOrWhiteSpace(currentUserMatricNumber))
        {
            MID_HelperFunctions.DebugMessage("User identification not available. Please ensure you are logged in.", DebugClass.Warning);
            return false;
        }

        return true;
    }

    private async Task PauseScanning()
    {
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                isScanning = false;
                MID_HelperFunctions.DebugMessage("Scanner paused", DebugClass.Log);
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Failed to pause scanner: {ex.Message}", DebugClass.Exception);
            }
        }
    }

    private async Task ResumeScanning()
    {
        if (_qrCodeScannerJsInterop != null && !isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
                isScanning = true;
                MID_HelperFunctions.DebugMessage("Scanner resumed", DebugClass.Log);
            }
            catch (Exception ex)
            {
                MID_HelperFunctions.DebugMessage($"Failed to resume scanner: {ex.Message}", DebugClass.Exception);
            }
        }
    }

    private async Task StartScanning()
    {
        await ResumeScanning();
    }

    private async Task StopScanning()
    {
        await PauseScanning();
    }

    public async ValueTask DisposeAsync()
    {
        performanceTimer?.Dispose();
        
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                MID_HelperFunctions.DebugMessage("Scanner disposed", DebugClass.Log);
            }
            catch
            {
                // Ignore disposal errors
            }
        }

        // Disable GPU acceleration on cleanup
        try
        {
            await JSRuntime.InvokeVoidAsync("disableGPUAcceleration", "#videoContainer");
        }
        catch
        {
            // Ignore cleanup errors
        }
    }
}
