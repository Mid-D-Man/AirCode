@page "/Client/ScanAttendance"
@layout AirCode.Layout.ClientLayout.ClientLayout
@inject IJSRuntime JSRuntime
@using AirCode.Models.Supabase
@using AirCode.Services.Auth
@using AirCode.Services.Courses
@using AirCode.Services.SupaBase
@using ReactorBlazorQRCodeScanner
@using AirCode.Utilities.HelperScripts
@inject ISupabaseEdgeFunctionService EdgeService
@inject QRCodeDecoder QRDecoder
@inject IAuthService AuthService
@inject ICourseService CourseService

<div class="scan-attendance-page">
    <div class="scan-header">
        <h3>Scan QR Code</h3>
        <p>Scan the attendance QR code to mark your presence</p>
    </div>
    
    <div class="scan-container @(isProcessing ? "processing" : "") @(scanComplete ? "scan-complete" : "")">
        <div class="qr-scanner-container">
            <QRCodeScanner ShowOutput="false" Width="100%" />
        </div>

        <!-- Simplified scan frame overlay -->
        <div class="scan-frame">
            <div class="corner top-left"></div>
            <div class="corner top-right"></div>
            <div class="corner bottom-left"></div>
            <div class="corner bottom-right"></div>
            <div class="scan-line"></div>
        </div>

        <!-- Processing overlay -->
        @if (isProcessing)
        {
            <div class="processing-overlay">
                <div class="spinner"></div>
                <span>Processing QR Code...</span>
            </div>
        }

        <div class="scan-controls">
            @if (isScanning)
            {
                <button class="control-btn" @onclick="StopScanning">
                    <span class="btn-icon">‚è∏</span>
                    Stop Scanner
                </button>
            }
            else
            {
                <button class="control-btn" @onclick="StartScanning">
                    <span class="btn-icon">‚ñ∂</span>
                    Start Scanner
                </button>
            }
        </div>
    </div>
</div>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private bool isScanning = true;
    private bool isProcessing = false;
    private bool scanComplete = false;

    // User data
    private string currentUserMatricNumber = "SukaBlak";
    private string deviceGUID = "N";
    
    protected override async Task OnInitializedAsync()
    {
        _onQrCodeScanAction = (code) => OnQrCodeScan(code);
        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JSRuntime);
        
        try
        {
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
           await MID_HelperFunctions.DebugMessageAsync("QR Scanner initialized successfully", DebugClass.Info);

            currentUserMatricNumber = await AuthService.GetMatricNumberAsync();
            deviceGUID = await AuthService.GetDeviceIdAsync();
        }
        catch (Exception ex)
        {
           await MID_HelperFunctions.DebugMessageAsync($"Failed to initialize scanner: {ex.Message}", DebugClass.Exception);
            // Use notification component instead of ShowResult
        }
    }

    private async void OnQrCodeScan(string code)
    {
        if (!string.IsNullOrEmpty(code) && await CanProcessAttendance())
        {
          await MID_HelperFunctions.DebugMessageAsync($"QR Code detected: {code}", DebugClass.Info);
        
            await PauseScanning();
            isProcessing = true;
            scanComplete = true;
            StateHasChanged();
        
            try
            {
                var decodedSessionData = await QRDecoder.DecodeSessionDataAsync(code);

                if (decodedSessionData != null)
                {
                   await MID_HelperFunctions.DebugMessageAsync($"Valid AirCode QR detected for course: {decodedSessionData.CourseCode}", DebugClass.Info);
                    var myCourses = await CourseService.GetStudentCoursesByMatricAsync(currentUserMatricNumber);
                    var courseRefs = myCourses.GetEnrolledCourses();

                    bool isTakingCourse = courseRefs.FirstOrDefault(course => course.CourseCode == decodedSessionData.CourseCode) != null;

                    if (isTakingCourse)
                    {
                        await ProcessAttendanceWithNewPayload(code);
                    }
                    else
                    {
                       await MID_HelperFunctions.DebugMessageAsync("You are not taking this course", DebugClass.Warning);
                        // Use notification component here
                    }
                }
                else
                {
                   await MID_HelperFunctions.DebugMessageAsync("QR code is not a valid AirCode attendance QR", DebugClass.Warning);
                    // Use notification component here
                }
            }
            catch (Exception ex)
            {
              await  MID_HelperFunctions.DebugMessageAsync($"Error processing QR code: {ex.Message}", DebugClass.Exception);
                // Use notification component here
            }
        
            isProcessing = false;
            scanComplete = false;
            await ResumeScanning();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ProcessAttendanceWithNewPayload(string qrCode)
    {
        try
        {
           await MID_HelperFunctions.DebugMessageAsync($"Processing attendance with new payload structure for QR: {qrCode}", DebugClass.Info);
        
            var attendanceRecord = new AttendanceRecord
            {
                MatricNumber = currentUserMatricNumber,
                HasScannedAttendance = true,
                IsOnlineScan = true,
                DeviceGUID = deviceGUID
            };
        
           await MID_HelperFunctions.DebugMessageAsync($"Attendance record: {MID_HelperFunctions.ToJson(attendanceRecord)}", DebugClass.Log);
        
            var edgeFunctionRequest = await QRDecoder.CreateEdgeFunctionRequestAsync(qrCode, attendanceRecord);
            
            if (edgeFunctionRequest == null)
            {
               await MID_HelperFunctions.DebugMessageAsync("Failed to create valid request payload", DebugClass.Warning);
                // Use notification component here
                return;
            }

           await MID_HelperFunctions.DebugMessageAsync($"Edge function request: {MID_HelperFunctions.ToJson(edgeFunctionRequest)}", DebugClass.Log);
        
            var result = await EdgeService.ProcessAttendanceWithPayloadAsync(edgeFunctionRequest);
        
           await MID_HelperFunctions.DebugMessageAsync($"Edge function result: {MID_HelperFunctions.ToJson(result)}", DebugClass.Log);
        
            if (result.Success)
            {
              await  MID_HelperFunctions.DebugMessageAsync("Attendance recorded successfully!", DebugClass.Info);
                // Use notification component for success
            }
            else
            {
                var userFriendlyMessage = GetUserFriendlyErrorMessage(result.ErrorCode, result.Message);
               await MID_HelperFunctions.DebugMessageAsync($"Attendance processing failed: {result.Message} (Code: {result.ErrorCode})", DebugClass.Warning);
                // Use notification component for error
            }
        }
        catch (Exception ex)
        {
          await  MID_HelperFunctions.DebugMessageAsync($"Exception in ProcessAttendanceWithNewPayload: {ex}", DebugClass.Exception);
            // Use notification component for exception
        }
    }

    private string GetUserFriendlyErrorMessage(string errorCode, string originalMessage)
    {
        return errorCode switch
        {
            "DUPLICATE_ATTENDANCE" => "‚ö†Ô∏è You have already marked attendance for this session. Multiple submissions are not allowed.",
            "SESSION_NOT_FOUND" => "‚ùå This attendance session does not exist or has been removed. Please check with your instructor.",
            "TEMPORAL_KEY_EXPIRED" => "‚è∞ Your QR code has expired. Please scan the latest QR code displayed by your instructor.",
            "TEMPORAL_KEY_MISSING" => "üîí This session requires a temporal security key. Please scan a fresh QR code.",
            "DEVICE_SECURITY_VIOLATION" => "üõ°Ô∏è This device has already been used by another student for attendance. Please use your own device or contact your instructor.",
            "DEVICE_GUID_MISSING" => "üì± Device identification is required for this secure session.",
            "MATRIC_NUMBER_MISSING" => "üÜî Student identification number is required for attendance.",
            "SESSION_QUERY_ERROR" => "üîå Database connection failed. Please check your internet connection and try again.",
            "ATTENDANCE_UPDATE_ERROR" => "üíæ Failed to save attendance record. Please try again or contact support.",
            "NETWORK_ERROR" => "üåê Network connection failed. Please check your internet connection.",
            "SUPABASE_CONFIG_ERROR" => "‚öôÔ∏è Server configuration error. Please contact technical support.",
            "INVALID_JSON" => "üìã Invalid request format. Please try scanning the QR code again.",
            "MISSING_PARAMETERS" => "üìù Required information is missing. Please try scanning the QR code again.",
            _ => $"‚ùå {originalMessage}"
        };
    }

    private async Task<bool> CanProcessAttendance()
    {
        if (isProcessing)
        {
           await MID_HelperFunctions.DebugMessageAsync("Attendance processing already in progress", DebugClass.Warning);
            return false;
        }

        if (string.IsNullOrWhiteSpace(currentUserMatricNumber))
        {
          await  MID_HelperFunctions.DebugMessageAsync("User identification not available. Please ensure you are logged in.", DebugClass.Warning);
            // Use notification component here
            return false;
        }

        return true;
    }

    private async Task PauseScanning()
    {
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                isScanning = false;
               await MID_HelperFunctions.DebugMessageAsync("Scanner paused", DebugClass.Log);
            }
            catch (Exception ex)
            {
              await  MID_HelperFunctions.DebugMessageAsync($"Failed to pause scanner: {ex.Message}", DebugClass.Exception);
            }
        }
    }

    private async Task ResumeScanning()
    {
        if (_qrCodeScannerJsInterop != null && !isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
                isScanning = true;
               await MID_HelperFunctions.DebugMessageAsync("Scanner resumed", DebugClass.Log);
            }
            catch (Exception ex)
            {
               await MID_HelperFunctions.DebugMessageAsync($"Failed to resume scanner: {ex.Message}", DebugClass.Exception);
            }
        }
    }

    private async Task StartScanning()
    {
        await ResumeScanning();
    }

    private async Task StopScanning()
    {
        await PauseScanning();
    }

    public async ValueTask DisposeAsync()
    {
        if (_qrCodeScannerJsInterop != null && isScanning)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
               await MID_HelperFunctions.DebugMessageAsync("Scanner disposed", DebugClass.Log);
            }
            catch
            {
                // Ignore disposal errors
            }
        }
    }
}