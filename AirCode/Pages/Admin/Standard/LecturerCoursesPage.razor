@page "/Admin/Lecturer/Courses"
@attribute [Authorize(Policy = "LecturerAdmin")]
@using AirCode.Components.SharedPrefabs.Cards
@using AirCode.Domain.Entities
@using AirCode.Services.Courses
@using AirCode.Services.Auth
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Domain.Enums
@using AirCode.Layout.AdminLayout.Superior
@using Microsoft.AspNetCore.Authorization
@layout SuperiorAdminLayout
@inject ICourseService CourseService
@inject IAuthService AuthService

<div class="lecturer-courses-page">
    <div class="page-header">
        <div class="header-content">
            <h2 class="text-adaptive-primary">My Courses</h2>
            <div class="lecturer-info">
                <span class="lecturer-icon">üë®‚Äçüè´</span>
                <div class="lecturer-details">
                    <span class="lecturer-label text-adaptive-muted">Lecturer ID:</span>
                    <span class="lecturer-id text-adaptive-primary">@CurrentLecturerId</span>
                </div>
            </div>
        </div>
    </div>

    @if (IsInitialLoading)
    {
        <LoadingSpinner 
            Title="Loading Your Courses" 
            Subtitle="Please wait while we retrieve your assigned courses..." />
    }
    else if (!string.IsNullOrEmpty(AuthErrorMessage))
    {
        <div class="error-container">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3 class="text-adaptive-primary">Authentication Error</h3>
            <p class="text-adaptive-secondary">@AuthErrorMessage</p>
            <button class="retry-btn" @onclick="LoadLecturerCourses">
                <span class="btn-text">Retry Authentication</span>
            </button>
        </div>
    }
    else
    {
        <div class="courses-section">
            <CourseManagementComponent 
                AssignedCourses="@AssignedCourses"
                UserId="@CurrentLecturerId"
                SectionTitle="Courses You Handle"
                AddButtonText="Add Course to Handle"
                OnCourseAdded="@HandleCourseAdded"
                OnCourseRemoved="@HandleCourseRemoved"
                OnNotification="@HandleNotification" />
        </div>
    }
</div>

<!-- Notification Component -->
<NotificationComponent @ref="notificationComponent" 
    Position="NotificationPosition.TopRight" 
    AutoDismissTime="5000" 
    ShowProgressBar="true" 
    ShowCloseButton="true" 
    PauseOnHover="true" />

@code {
    private NotificationComponent notificationComponent;
    private string CurrentLecturerId = "";
    private string AuthErrorMessage = "";
    
    private List<Course> AssignedCourses = new();
    private bool IsInitialLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadLecturerCourses();
    }

    private async Task LoadLecturerCourses()
    {
        IsInitialLoading = true;
        AuthErrorMessage = "";
        StateHasChanged();

        try
        {
            // Authenticate and get lecturer ID
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                AuthErrorMessage = "User is not authenticated. Please log in again.";
                return;
            }

            CurrentLecturerId = await AuthService.GetLecturerIdAsync();
            if (string.IsNullOrEmpty(CurrentLecturerId))
            {
                AuthErrorMessage = "Unable to retrieve lecturer credentials. Please ensure you have lecturer permissions.";
                return;
            }

            // Load courses for authenticated lecturer
            AssignedCourses = await CourseService.GetCoursesByLecturerAsync(CurrentLecturerId) ?? new();
            
            // Show success notification
            ShowNotification("Courses loaded successfully", NotificationType.Success);
        }
        catch (UnauthorizedAccessException)
        {
            AuthErrorMessage = "Access denied. Please ensure you have lecturer permissions.";
            AssignedCourses = new();
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Error loading lecturer courses: {ex.Message}");
            AuthErrorMessage = "Error loading courses. Please check your connection and try again.";
            AssignedCourses = new();
        }
        finally
        {
            IsInitialLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCourseAdded(string courseCode)
    {
        if (string.IsNullOrEmpty(CurrentLecturerId))
        {
            ShowNotification("Authentication required to add courses.", NotificationType.Error);
            return;
        }

        try
        {
            var success = await CourseService.AssignLecturerToCourseAsync(courseCode, CurrentLecturerId);
            
            if (success)
            {
                ShowNotification($"Successfully added to course {courseCode}", NotificationType.Success);
                await LoadLecturerCourses(); // Refresh the list
            }
            else
            {
                ShowNotification($"Failed to add course {courseCode}. Please try again.", NotificationType.Error);
            }
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Error adding course {courseCode}: {ex.Message}");
            ShowNotification($"Error adding course {courseCode}. Please try again.", NotificationType.Error);
        }
    }

    private async Task HandleCourseRemoved(string courseCode)
    {
        if (string.IsNullOrEmpty(CurrentLecturerId))
        {
            ShowNotification("Authentication required to remove courses.", NotificationType.Error);
            return;
        }

        try
        {
            var success = await CourseService.RemoveLecturerFromCourseAsync(courseCode, CurrentLecturerId);
            
            if (success)
            {
                ShowNotification($"Successfully removed from course {courseCode}", NotificationType.Success);
                await LoadLecturerCourses(); // Refresh the list
            }
            else
            {
                ShowNotification($"Failed to remove course {courseCode}. Please try again.", NotificationType.Error);
            }
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Error removing course {courseCode}: {ex.Message}");
            ShowNotification($"Error removing course {courseCode}. Please try again.", NotificationType.Error);
        }
    }

    private async Task HandleNotification((string message, NotificationType type) notification)
    {
        ShowNotification(notification.message, notification.type);
    }

    private void ShowNotification(string message, NotificationType type, int? duration = null)
    {
        try
        {
            notificationComponent?.ShowNotification(message, type, duration);
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage($"Notification error: {ex.Message}");
        }
    }
}