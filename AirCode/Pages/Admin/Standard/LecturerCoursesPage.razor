@* Pages/Admin/Standard/LecturerCoursesPage.razor *@
@page "/Admin/Lecturer/Courses"
@attribute [Authorize(Policy = "LecturerAdmin")]
@using AirCode.Domain.Entities
@using AirCode.Services.Courses
@using AirCode.Services.Auth
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.Spinner

@using AirCode.Layout.AdminLayout.Superior
@using Microsoft.AspNetCore.Authorization
@layout SuperiorAdminLayout
@inject ICourseService CourseService
@inject IAuthService AuthService

<div class="lecturer-courses-page">
    <div class="page-header">
        <div class="header-content">
            <h2 class="text-adaptive-primary">My Courses</h2>
            <div class="lecturer-info">
                <span class="lecturer-icon">üë®‚Äçüè´</span>
                <div class="lecturer-details">
                    <span class="lecturer-label text-adaptive-muted">Lecturer ID:</span>
                    <span class="lecturer-id text-adaptive-primary">@CurrentLecturerId</span>
                </div>
            </div>
        </div>
    </div>

    @if (IsInitialLoading)
    {
        <LoadingSpinner 
            Title="Loading Your Courses" 
            Subtitle="Please wait while we retrieve your assigned courses..." />
    }
    else if (!string.IsNullOrEmpty(AuthErrorMessage))
    {
        <div class="error-container">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3 class="text-adaptive-primary">Authentication Error</h3>
            <p class="text-adaptive-secondary">@AuthErrorMessage</p>
            <button class="retry-btn" @onclick="LoadLecturerCourses">
                <span class="btn-text">Retry Authentication</span>
            </button>
        </div>
    }
    else
    {
        <div class="courses-section">
            <CourseManagementComponent 
                AssignedCourses="@AssignedCourses"
                UserId="@CurrentLecturerId"
                SectionTitle="Courses You Handle"
                AddButtonText="Add Course to Handle"
                OnCourseAdded="@HandleCourseAdded"
                OnCourseRemoved="@HandleCourseRemoved" />
        </div>
    }

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="status-message @(IsError ? "error" : "success")">
            <div class="status-icon">
                @if (IsError) { <span>‚ùå</span> } else { <span>‚úÖ</span> }
            </div>
            <span class="status-text">@StatusMessage</span>
        </div>
    }
</div>

@code {
    private string CurrentLecturerId = "";
    private string AuthErrorMessage = "";
    
    private List<Course> AssignedCourses = new();
    private bool IsInitialLoading = true;
    private string StatusMessage = "";
    private bool IsError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLecturerCourses();
    }

    private async Task LoadLecturerCourses()
    {
        IsInitialLoading = true;
        AuthErrorMessage = "";
        StateHasChanged();

        try
        {
            // Authenticate and get lecturer ID
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                AuthErrorMessage = "User is not authenticated. Please log in again.";
                return;
            }

            CurrentLecturerId = await AuthService.GetLecturerIdAsync();
            if (string.IsNullOrEmpty(CurrentLecturerId))
            {
                AuthErrorMessage = "Unable to retrieve lecturer credentials. Please ensure you have lecturer permissions.";
                return;
            }

            // Load courses for authenticated lecturer
            AssignedCourses = await CourseService.GetCoursesByLecturerAsync(CurrentLecturerId) ?? new();
            ClearStatusMessage();
        }
        catch (UnauthorizedAccessException)
        {
            AuthErrorMessage = "Access denied. Please ensure you have lecturer permissions.";
            AssignedCourses = new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lecturer courses: {ex.Message}");
            AuthErrorMessage = "Error loading courses. Please check your connection and try again.";
            AssignedCourses = new();
        }
        finally
        {
            IsInitialLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCourseAdded(string courseCode)
    {
        if (string.IsNullOrEmpty(CurrentLecturerId))
        {
            ShowStatusMessage("Authentication required to add courses.", true);
            return;
        }

        try
        {
            var success = await CourseService.AssignLecturerToCourseAsync(courseCode, CurrentLecturerId);
            
            if (success)
            {
                ShowStatusMessage($"Successfully added to course {courseCode}", false);
                await LoadLecturerCourses(); // Refresh the list
            }
            else
            {
                ShowStatusMessage($"Failed to add course {courseCode}. Please try again.", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding course {courseCode}: {ex.Message}");
            ShowStatusMessage($"Error adding course {courseCode}. Please try again.", true);
        }
    }

    private async Task HandleCourseRemoved(string courseCode)
    {
        if (string.IsNullOrEmpty(CurrentLecturerId))
        {
            ShowStatusMessage("Authentication required to remove courses.", true);
            return;
        }

        try
        {
            var success = await CourseService.RemoveLecturerFromCourseAsync(courseCode, CurrentLecturerId);
            
            if (success)
            {
                ShowStatusMessage($"Successfully removed from course {courseCode}", false);
                await LoadLecturerCourses(); // Refresh the list
            }
            else
            {
                ShowStatusMessage($"Failed to remove course {courseCode}. Please try again.", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing course {courseCode}: {ex.Message}");
            ShowStatusMessage($"Error removing course {courseCode}. Please try again.", true);
        }
    }

    private void ShowStatusMessage(string message, bool isError)
    {
        StatusMessage = message;
        IsError = isError;
        StateHasChanged();

        // Auto-hide message after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ => 
        {
            InvokeAsync(() => 
            {
                ClearStatusMessage();
                StateHasChanged();
            });
        });
    }

    private void ClearStatusMessage()
    {
        StatusMessage = "";
        IsError = false;
    }
}