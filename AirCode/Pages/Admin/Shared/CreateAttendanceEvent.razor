@page "/Admin/CreateSession"
@using AirCode.Layout.AdminLayout.Superior
@using Microsoft.AspNetCore.Authorization
@layout SuperiorAdminLayout
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.QrCode
@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Models.QRCode
@using AirCode.Components.Admin.Shared
@using AirCode.Domain.Enums
<div class="create-session-page">
    <h1>Create Attendance Event</h1>

    <!-- Session Restoration Dialog -->
    @if (showSessionRestoreDialog && !isRestoringSession)
    {
        <div class="session-restore-backdrop">
            <div class="session-restore-dialog">
                <div class="dialog-header">
                    <h3>Restore Previous Sessions</h3>
                    <button class="close-button" @onclick="DismissSessionRestoreDialogAsync">Ã—</button>
                </div>
                <div class="dialog-content">
                    <p class="dialog-message">Found @storedSessions.Count stored session(s) from previous usage:</p>
                    <div class="dialog-warning">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/>
                        </svg>
                        Choose to restore a session or clean up all stored sessions to start fresh.
                    </div>
                    <div class="stored-sessions-list">
                        @foreach (var session in storedSessions)
                        {
                            <div class="stored-session-item @(selectedStoredSession?.SessionId == session.SessionId ? "selected" : "")"
                                 @onclick="() => SelectStoredSession(session)">
                                <div class="session-details">
                                    <strong>@session.CourseName</strong>
                                    <span class="session-course-id">(@session.CourseCode)</span>
                                    <div class="session-metadata">
                                        <span class="session-time">Duration: @session.Duration min</span>
                                        <span class="session-started">Started: @session.StartTime.ToString("MMM dd, HH:mm")</span>
                                        <span class="session-remaining">
                                        @{
                                                var remaining = session.StartTime.AddMinutes(session.Duration) - DateTime.UtcNow;
                                                var remainingText = remaining.TotalMinutes > 60
                                                    ? $"{remaining.Hours}h {remaining.Minutes}m remaining"
                                                    : $"{(int)remaining.TotalMinutes}m remaining";
                                            }
                                            @remainingText
                                    </span>
                                    </div>
                                </div>
                                <button class="delete-session-btn" @onclick="() => DeleteStoredSessionAsync(session)"
                                        @onclick:stopPropagation="true" title="Delete this stored session">
                                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                                    </svg>
                                </button>
                            </div>
                        }
                    </div>
                </div>
                <div class="dialog-actions">
                    <button class="secondary-button" @onclick="DismissSessionRestoreDialogAsync" title="Keep stored sessions but start new">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        Start New Session
                    </button>
                    <button class="danger-button" @onclick="AbandonStoredSessionsAsync" title="Delete all stored sessions">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                        </svg>
                        Clean Up All Sessions
                    </button>
                    <PrimaryButton Text="Restore Selected"
                                   OnClick="RestoreSelectedSessionAsync"
                                   Disabled="@(selectedStoredSession == null)"
                                   title="Restore the selected session" />
                </div>
            </div>
        </div>
    }

    <!-- Enhanced Loading Backdrop -->
    @if (isSearchingForSessions || isRestoringSession)
    {
        <div class="loading-backdrop">
            <div class="loading-container">
                @if (isSearchingForSessions)
                {
                    <LoadingSpinner Title="Initializing Session Manager"
                                    Subtitle="Scanning for existing sessions and cleaning up expired data..." />
                }
                else if (isRestoringSession)
                {
                    <LoadingSpinner Title="Processing Request"
                                    Subtitle="@restorationMessage" />
                }
            </div>
        </div>
    }

    <!-- Enhanced Status Message Display -->
    @if (!string.IsNullOrEmpty(restorationMessage) && !isSearchingForSessions && !isRestoringSession && !showSessionRestoreDialog)
    {
        <div class="status-message-container">
            <div class="status-message @GetStatusMessageClass(restorationMessage)">
                <div class="status-icon">
                    @if (IsErrorMessage(restorationMessage))
                    {
                        <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                    }
                    else
                    {
                        <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                    }
                </div>
                <span class="status-text">@restorationMessage</span>
                <button class="status-dismiss" @onclick="() => restorationMessage = string.Empty" title="Dismiss">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                </button>
            </div>
        </div>
    }
    
    <div class="content-container @(isSessionStarted ? "session-active" : "")">
        @if (!isSessionStarted)
        {
            <div class="form-container">
                <EditForm Model="sessionModel" OnValidSubmit="StartSessionAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="form-group">
                        <label>Selected Course</label>
                        @if (selectedCourse != null)
                        {
                            <div class="selected-course-display">
                                <div class="course-info">
                                    <span class="course-code">@selectedCourse.CourseCode</span>
                                    <span class="course-name">@selectedCourse.Name</span>
                                </div>
                                <button type="button" class="change-course-btn" @onclick="ShowCourseSelection">
                                    Change Course
                                </button>
                            </div>
                        }
                        else
                        {
                            <button type="button" class="select-course-btn" @onclick="ShowCourseSelection">
                                Select Course
                            </button>
                        }
                    </div>
                    
                    <div class="form-group">
                        <label for="duration">Session Duration</label>
                        <InputSelect id="duration" @bind-Value="sessionModel.Duration" class="form-control">
                            <option value="10">10 minutes</option>
                            <option value="15">15 minutes</option>
                            <option value="30">30 minutes</option>
                            <option value="60">1 hour</option>
                            <option value="120">2 hours</option>
                            <option value="180">3 hours</option>
                            <option value="240">4 hours</option>
                            <option value="300">5 hours</option>
                            <option value="360">6 hours</option>
                        </InputSelect>
                    </div>
                    
                    <div class="form-group">
                        <label for="qrTheme">QR Code Theme</label>
                        <InputSelect id="qrTheme" @bind-Value="selectedTheme" class="form-control">
                            <option value="Standard">Standard</option>
                            <option value="Gradient">Gradient</option>
                            <option value="Branded">With Logo</option>
                            <option value="GradientWithLogo">Gradient with Logo</option>
                        </InputSelect>
                    </div>

                    <!-- Security Configuration Section -->
                    <div class="form-section">
                        <h3 class="section-title">Security Configuration</h3>
                        
                        <!-- Allow Offline Sync Toggle -->
                        <div class="form-group toggle-group">
                            <div class="toggle-header">
                                <label for="allowOfflineSync">Allow Offline Sync</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoPopup.InfoType.OfflineSync)">
                                    <span class="info-icon">â“˜</span>
                                </button>
                            </div>
                            <div class="toggle-switch">
                                <input type="checkbox" id="allowOfflineSync" @bind="allowOfflineSync" />
                                <label for="allowOfflineSync" class="toggle-label"></label>
                            </div>
                        </div>

                        <!-- Use Temporal Key Refresh Toggle -->
                        <div class="form-group toggle-group">
                            <div class="toggle-header">
                                <label for="useTemporalKeyRefresh">Use Temporal Key Refresh</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoPopup.InfoType.TemporalKeyRefresh)">
                                    <span class="info-icon">â“˜</span>
                                </button>
                            </div>
                            <div class="toggle-switch">
                                <input type="checkbox" id="useTemporalKeyRefresh" @bind="useTemporalKeyRefresh" />
                                <label for="useTemporalKeyRefresh" class="toggle-label"></label>
                            </div>
                        </div>

                        <!-- Temporal Key Refresh Interval (only show when temporal key is enabled) -->
                        @if (useTemporalKeyRefresh)
                        {
                            <div class="form-group">
                                <div class="field-header">
                                    <label for="temporalKeyRefreshInterval">Temporal Key Refresh Interval</label>
                                    <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoPopup.InfoType.RefreshInterval)">
                                        <span class="info-icon">â“˜</span>
                                    </button>
                                </div>
                                <InputSelect id="temporalKeyRefreshInterval" @bind-Value="temporalKeyRefreshInterval" class="form-control">
                                    <option value="2">2 minutes</option>
                                    <option value="5">5 minutes</option>
                                    <option value="10">10 minutes</option>
                                    <option value="30">30 minutes</option>
                                </InputSelect>
                            </div>
                        }

                        <!-- Security Features Dropdown -->
                        <div class="form-group">
                            <div class="field-header">
                                <label for="securityFeatures">Security Features</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoPopup.InfoType.SecurityFeatures)">
                                    <span class="info-icon">â“˜</span>
                                </button>
                            </div>
                            <InputSelect id="securityFeatures" @bind-Value="securityFeatures" class="form-control">
                                <option value="@AdvancedSecurityFeatures.Default">Default (Basic Security)</option>
                                <option value="@AdvancedSecurityFeatures.DeviceGuidCheck">Device GUID Check</option>
                            </InputSelect>
                        </div>
                    </div>
                    
                    <div class="button-container">
                        <PrimaryButton Text="Start Session" 
                                     OnClick="StartSessionAsync" 
                                     Disabled="@(selectedCourse == null || isCreatingSession)" />
                        @if (isCreatingSession)
                        {
                            <LoadingSpinner Title="Creating Session" 
                                          Subtitle="Please wait while we set up your attendance session..." />
                        }
                    </div>
                </EditForm>
            </div>
        }
        else
        {
            <div class="active-session-container">
                <div class="session-header">
                    <h3>@selectedCourse?.Name</h3>
                    <span class="course-code-badge">@selectedCourse?.CourseCode</span>
                </div>

                <div class="session-status-indicators">
                    <div class="countdown-timer @GetCountdownClass()">
                        <span class="timer-label">Session ends in:</span>
                        <span class="timer-value @(IsCountdownCritical() ? "critical-flash" : "")">@FormatTimeRemaining()</span>
                    </div>
                    
                    @if (useTemporalKeyRefresh)
                    {
                        <div class="temporal-key-indicator">
                            <span class="security-badge temporal-key-active">
                                <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                </svg>
                                Temporal Key Refresh Active
                            </span>
                            <span class="refresh-interval">Updates every @temporalKeyRefreshInterval min</span>
                        </div>
                    }
                    
                    @if (securityFeatures != AdvancedSecurityFeatures.Default)
                    {
                        <div class="security-level-indicator">
                            <span class="security-badge enhanced-security">
                                <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M10,17L6,13L7.41,11.59L10,14.17L16.59,7.58L18,9L10,17Z"/>
                                </svg>
                                Enhanced Security
                            </span>
                            <span class="security-description">@GetSecurityFeatureDescription(securityFeatures)</span>
                        </div>
                    }

                    @if (allowOfflineSync)
                    {
                        <div class="offline-sync-indicator">
                            <span class="security-badge offline-sync-enabled">
                                <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M1,9H23L12,20L1,9Z"/>
                                </svg>
                                Offline Sync Enabled
                            </span>
                        </div>
                    }
                </div>

                <div class="qr-code-wrapper">
                    <QRCodeCompo SessionId="@sessionModel.SessionId"
                                 CourseCode="@sessionModel.CourseCode"
                                 StartTime="@sessionModel.StartTime"
                                 Duration="@sessionModel.Duration"
                                 Theme="@ConvertStringToTheme(selectedTheme)"
                                 Options="@GenerateQRCodeOptions()"
                                 UseTemporalKeyRefresh="@useTemporalKeyRefresh"
                                 AllowOfflineSync="@allowOfflineSync"
                                 SecurityFeatures="@securityFeatures"
                                 TemporalKey="@(currentActiveSession?.TemporalKey ?? string.Empty)"
                                 OnGenerated="@HandleQRCodeGenerated" />
                </div>
                
              <div class="session-actions">
    <button class="floating-qr-icon" @onclick="OpenFloatingQR" title="Open Floating QR Code">
        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
            <path d="M3 11h8V3H3v8zm2-6h4v4H5V5zM3 21h8v-8H3v8zm2-6h4v4H5v-4zM13 3v8h8V3h-8zm6 6h-4V5h4v4zM19 13h2v2h-2zM13 13h2v2h-2zM15 15h2v2h-2zM13 17h2v2h-2zM15 19h2v2h-2zM17 17h2v2h-2zM19 19h2v2h-2zM17 15h2v2h-2z"/>
        </svg>
    </button>
    
    <button class="manual-attendance-icon" @onclick="OpenManualAttendancePopup" title="Manual Attendance Sign">
        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"/>
        </svg>
    </button>
    
    <div class="end-session-container">
        <PrimaryButton Text="End Session" 
                     OnClick="EndSession" 
                     Disabled="@isEndingSession" />
        @if (isEndingSession)
        {
            <LoadingSpinner Title="Ending Session" 
                          Subtitle="Finalizing attendance data and cleaning up..." />
        }
    </div>
</div>
            </div>
        }
    </div>
    
    <!-- Active Sessions List -->
    @if (otherActiveSessions.Any())
    {
        <div class="active-sessions-list">
            <h3>Other Active Sessions</h3>
            @foreach (var session in otherActiveSessions)
            {
                <div class="session-card">
                    <div class="session-info">
                        <div class="session-main-info">
                            <strong>@session.CourseName (@session.CourseCode)</strong>
                            <span class="session-time">Ends: @session.EndTime.ToString("HH:mm")</span>
                        </div>
                        <div class="session-badges">
                            @if (session.UseTemporalKeyRefresh)
                            {
                                <span class="session-feature-badge temporal">
                                    <svg width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                    Temporal Key
                                </span>
                            }
                            @if (session.SecurityFeatures != AdvancedSecurityFeatures.Default)
                            {
                                <span class="session-feature-badge security">
                                    <svg width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M10,17L6,13L7.41,11.59L10,14.17L16.59,7.58L18,9L10,17Z"/>
                                    </svg>
                                    Enhanced
                                </span>
                            }
                            @if (session.OfflineSyncEnabled)
                            {
                                <span class="session-feature-badge offline">
                                    <svg width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M1,9H23L12,20L1,9Z"/>
                                    </svg>
                                    Offline
                                </span>
                            }
                        </div>
                    </div>
                    <button class="qr-icon-button" @onclick="() => OpenFloatingQRForSession(session)" title="Show QR Code">
                        <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M3 11h8V3H3v8zm2-6h4v4H5V5zM3 21h8v-8H3v8zm2-6h4v4H5v-4zM13 3v8h8V3h-8zm6 6h-4V5h4v4z"/>
                        </svg>
                    </button>
                </div>
            }
        </div>
    }
</div>

<!-- Course Selection Modal -->
<CourseSelectionComponent 
    IsVisible="showCourseSelection" 
    OnCourseSelected="HandleCourseSelected"
    OnClosed="HideCourseSelection" />

<!-- Floating QR Code Component -->
<FloatingQrCodeWindow 
    IsVisible="showFloatingQR" 
    SessionData="floatingSessionData" 
    OnClose="CloseFloatingQR" />

<!-- Info Popup Component -->
<InfoPopup 
    IsVisible="showInfoPopup" 
    CurrentInfoType="currentInfoType" 
    OnClose="CloseInfoPopup" />
<!-- Manual Attendance Popup -->
<ManualAttendancePopup 
    IsVisible="showManualAttendancePopup" 
    SessionData="manualAttendanceSessionData" 
    OnClose="CloseManualAttendancePopup" 
    OnAttendanceSigned="HandleManualAttendanceSigned" />

