@page "/Admin/CreateSession"
@using AirCode.Layout.AdminLayout.Superior
@using Microsoft.AspNetCore.Authorization
@layout SuperiorAdminLayout
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.QrCode
@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Models.QRCode
<div class="create-session-page">
    <h1>Create Attendance Event</h1>
    
    <div class="content-container @(isSessionStarted ? "session-active" : "")">
        @if (!isSessionStarted)
        {
            <div class="form-container">
                <EditForm Model="sessionModel" OnValidSubmit="StartSession">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="form-group">
                        <label>Selected Course</label>
                        @if (selectedCourse != null)
                        {
                            <div class="selected-course-display">
                                <div class="course-info">
                                    <span class="course-code">@selectedCourse.CourseCode</span>
                                    <span class="course-name">@selectedCourse.Name</span>
                                </div>
                                <button type="button" class="change-course-btn" @onclick="ShowCourseSelection">
                                    Change Course
                                </button>
                            </div>
                        }
                        else
                        {
                            <button type="button" class="select-course-btn" @onclick="ShowCourseSelection">
                                Select Course
                            </button>
                        }
                    </div>
                    
                    <div class="form-group">
                        <label for="duration">Session Duration</label>
                        <InputSelect id="duration" @bind-Value="sessionModel.Duration" class="form-control">
                            <option value="10">10 minutes</option>
                            <option value="15">15 minutes</option>
                            <option value="30">30 minutes</option>
                            <option value="60">1 hour</option>
                            <option value="120">2 hours</option>
                            <option value="180">3 hours</option>
                            <option value="240">4 hours</option>
                            <option value="300">5 hours</option>
                            <option value="360">6 hours</option>
                        </InputSelect>
                    </div>
                    
                    <div class="form-group">
                        <label for="qrTheme">QR Code Theme</label>
                        <InputSelect id="qrTheme" @bind-Value="selectedTheme" class="form-control">
                            <option value="Standard">Standard</option>
                            <option value="Gradient">Gradient</option>
                            <option value="Branded">With Logo</option>
                            <option value="GradientWithLogo">Gradient with Logo</option>
                        </InputSelect>
                    </div>

                    <!-- Security Configuration Section -->
                    <div class="form-section">
                        <h3 class="section-title">Security Configuration</h3>
                        
                        <!-- Allow Offline Sync Toggle -->
                        <div class="form-group toggle-group">
                            <div class="toggle-header">
                                <label for="allowOfflineSync">Allow Offline Sync</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoType.OfflineSync)">
                                    <span class="info-icon">ⓘ</span>
                                </button>
                            </div>
                            <div class="toggle-switch">
                                <input type="checkbox" id="allowOfflineSync" @bind="allowOfflineSync" />
                                <label for="allowOfflineSync" class="toggle-label"></label>
                            </div>
                        </div>

                        <!-- Use Temporal Key Refresh Toggle -->
                        <div class="form-group toggle-group">
                            <div class="toggle-header">
                                <label for="useTemporalKeyRefresh">Use Temporal Key Refresh</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoType.TemporalKeyRefresh)">
                                    <span class="info-icon">ⓘ</span>
                                </button>
                            </div>
                            <div class="toggle-switch">
                                <input type="checkbox" id="useTemporalKeyRefresh" @bind="useTemporalKeyRefresh" />
                                <label for="useTemporalKeyRefresh" class="toggle-label"></label>
                            </div>
                        </div>

                        <!-- Temporal Key Refresh Interval (only show when temporal key is enabled) -->
                        @if (useTemporalKeyRefresh)
                        {
                            <div class="form-group">
                                <div class="field-header">
                                    <label for="temporalKeyRefreshInterval">Temporal Key Refresh Interval</label>
                                    <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoType.RefreshInterval)">
                                        <span class="info-icon">ⓘ</span>
                                    </button>
                                </div>
                                <InputSelect id="temporalKeyRefreshInterval" @bind-Value="temporalKeyRefreshInterval" class="form-control">
                                    <option value="2">2 minutes</option>
                                    <option value="5">5 minutes</option>
                                    <option value="10">10 minutes</option>
                                    <option value="30">30 minutes</option>
                                </InputSelect>
                            </div>
                        }

                        <!-- Security Features Dropdown -->
                        <div class="form-group">
                            <div class="field-header">
                                <label for="securityFeatures">Security Features</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoType.SecurityFeatures)">
                                    <span class="info-icon">ⓘ</span>
                                </button>
                            </div>
                            <InputSelect id="securityFeatures" @bind-Value="securityFeatures" class="form-control">
                                <option value="@AdvancedSecurityFeatures.Default">Default (Basic Security)</option>
                                <option value="@AdvancedSecurityFeatures.DeviceGuidCheck">Device GUID Check</option>
                            </InputSelect>
                        </div>
                    </div>
                    
                    <div class="button-container">
                        <PrimaryButton Text="Start Session" 
                                     OnClick="StartSession" 
                                     Disabled="@(selectedCourse == null || isCreatingSession)" />
                        @if (isCreatingSession)
                        {
                            <div class="loading-spinner">
                                <span>Creating session...</span>
                            </div>
                        }
                    </div>
                </EditForm>
            </div>
        }
        else
        {
            <div class="active-session-container">
                <div class="session-header">
                    <h3>@selectedCourse?.Name</h3>
                    <span class="course-code-badge">@selectedCourse?.CourseCode</span>
                </div>

                <div class="countdown-timer">
                    Session ends in: @FormatTimeRemaining()
                </div>

                <div class="qr-code-wrapper">
                    <QRCodeCompo
                        SessionId="@sessionModel.SessionId"
                        CourseCode="@sessionModel.CourseId"
                        LectureId="@sessionModel.LectureId"
                        StartTime="@sessionModel.StartTime"
                        Duration="@sessionModel.Duration"
                        Theme="@ConvertStringToTheme(selectedTheme)"
                        Options="@GenerateQRCodeOptions()"
                        OnGenerated="HandleQRCodeGenerated" />
                </div>
                
                <div class="session-actions">
                    <button class="floating-qr-icon" @onclick="OpenFloatingQR" title="Open Floating QR Code">
                        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M3 11h8V3H3v8zm2-6h4v4H5V5zM3 21h8v-8H3v8zm2-6h4v4H5v-4zM13 3v8h8V3h-8zm6 6h-4V5h4v4zM19 13h2v2h-2zM13 13h2v2h-2zM15 15h2v2h-2zM13 17h2v2h-2zM15 19h2v2h-2zM17 17h2v2h-2zM19 19h2v2h-2zM17 15h2v2h-2z"/>
                        </svg>
                    </button>
                    <PrimaryButton Text="End Session" OnClick="EndSession" />
                </div>
            </div>
        }
    </div>
    
    <!-- Active Sessions List -->
    @if (otherActiveSessions.Any())
    {
        <div class="active-sessions-list">
            <h3>Other Active Sessions</h3>
            @foreach (var session in otherActiveSessions)
            {
                <div class="session-card">
                    <div class="session-info">
                        <strong>@session.CourseName (@session.CourseId)</strong>
                        <span class="session-time">Ends: @session.EndTime.ToString("HH:mm")</span>
                    </div>
                    <button class="qr-icon-button" @onclick="() => OpenFloatingQRForSession(session)" title="Show QR Code">
                        <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M3 11h8V3H3v8zm2-6h4v4H5V5zM3 21h8v-8H3v8zm2-6h4v4H5v-4zM13 3v8h8V3h-8zm6 6h-4V5h4v4z"/>
                        </svg>
                    </button>
                </div>
            }
        </div>
    }
</div>

<!-- Course Selection Modal -->
<CourseSelectionComponent 
    IsVisible="showCourseSelection" 
    OnCourseSelected="HandleCourseSelected"
    OnClosed="HideCourseSelection" />

<!-- Floating QR Code Component -->
<FloatingQRWindow 
    IsVisible="showFloatingQR" 
    SessionData="floatingSessionData" 
    OnClose="CloseFloatingQR" />

<!-- Info Popup Modal -->
@if (showInfoPopup)
{
    <div class="info-popup-overlay" @onclick="CloseInfoPopup">
        <div class="info-popup" @onclick:stopPropagation="true">
            <div class="info-popup-header">
                <h4>@GetInfoTitle()</h4>
                <button class="close-btn" @onclick="CloseInfoPopup">
                    <span>&times;</span>
                </button>
            </div>
            <div class="info-popup-content">
                <p>@GetInfoContent()</p>
            </div>
        </div>
    </div>
}
