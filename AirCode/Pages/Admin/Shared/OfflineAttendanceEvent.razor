@page "/Admin/OfflineAttendanceEvent"
@using AirCode.Layout.AdminLayout.Superior
@using Microsoft.AspNetCore.Authorization
@layout SuperiorAdminLayout
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.QrCode
@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Domain.Enums
@using AirCode.Models.QRCode

<div class="create-session-page offline-mode">
    <h1>Create Offline Attendance Event</h1>

    <!-- Offline Status Banner -->
    <div class="offline-status-banner">
        <div class="offline-indicator">
            <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                <path d="M1,9H23L12,20L1,9Z"/>
            </svg>
            <span>Offline Mode Active</span>
        </div>
        <div class="sync-status">
            @if (HasPendingRecords())
            {
                <span class="pending-sync">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6A6,6 0 0,1 18,12A6,6 0 0,1 12,18M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"/>
                    </svg>
                    @pendingRecords.Count records awaiting sync
                </span>
            }
            else
            {
                <span class="sync-complete">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    All data synced
                </span>
            }
        </div>
    </div>

    <!-- Enhanced Loading Backdrop -->
    @if (isCreatingOfflineSession || isSyncInProgress)
    {
        <div class="loading-backdrop">
            <div class="loading-container">
                @if (isCreatingOfflineSession)
                {
                    <LoadingSpinner Title="Creating Offline Session"
                                    Subtitle="Setting up offline attendance collection..." />
                }
                else if (isSyncInProgress)
                {
                    <LoadingSpinner Title="Syncing Offline Data"
                                    Subtitle="Uploading pending attendance records to server..." />
                }
            </div>
        </div>
    }

    <!-- Sync Results Dialog -->
    @if (showSyncResults && lastSyncResult != null)
    {
        <div class="sync-results-backdrop">
            <div class="sync-results-dialog">
                <div class="dialog-header">
                    <h3>Sync Results</h3>
                    <button class="close-button" @onclick="CloseSyncResults">×</button>
                </div>
                <div class="dialog-content">
                    <div class="sync-summary">
                        <div class="sync-stat success">
                            <span class="stat-number">@lastSyncResult.ProcessedSuccessfully</span>
                            <span class="stat-label">Synced Successfully</span>
                        </div>
                        <div class="sync-stat failed">
                            <span class="stat-number">@lastSyncResult.Failed</span>
                            <span class="stat-label">Failed to Sync</span>
                        </div>
                        <div class="sync-stat total">
                            <span class="stat-number">@lastSyncResult.TotalRecords</span>
                            <span class="stat-label">Total Records</span>
                        </div>
                    </div>
                    
                    @if (lastSyncResult.Failed > 0)
                    {
                        <div class="failed-records">
                            <h4>Failed Records Details</h4>
                            @foreach (var failedResult in lastSyncResult.IndividualResults.Where(r => !r.Success))
                            {
                                <div class="failed-record-item">
                                    <span class="record-id">@failedResult.ErrorCode</span>
                                    <span class="error-message">@failedResult.ErrorMessage</span>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="dialog-actions">
                    <PrimaryButton Text="Close" OnClick="CloseSyncResults" />
                </div>
            </div>
        </div>
    }
    
    <div class="content-container @(isOfflineSessionActive ? "session-active" : "")">
        @if (!isOfflineSessionActive)
        {
            <div class="form-container">
                <EditForm Model="currentOfflineSession" OnValidSubmit="CreateOfflineSessionAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="form-group">
                        <label>Selected Course</label>
                        @if (selectedCourse != null)
                        {
                            <div class="selected-course-display">
                                <div class="course-info">
                                    <span class="course-code">@selectedCourse.CourseCode</span>
                                    <span class="course-name">@selectedCourse.Name</span>
                                </div>
                                <button type="button" class="change-course-btn" @onclick="ShowCourseSelection">
                                    Change Course
                                </button>
                            </div>
                        }
                        else
                        {
                            <button type="button" class="select-course-btn" @onclick="ShowCourseSelection">
                                Select Course
                            </button>
                        }
                    </div>
                    
                    <div class="form-group">
                        <label for="duration">Session Duration</label>
                        <InputSelect id="duration" @bind-Value="sessionDuration" class="form-control">
                            <option value="30">30 minutes</option>
                            <option value="60">1 hour</option>
                            <option value="120">2 hours</option>
                            <option value="180">3 hours</option>
                            <option value="240">4 hours</option>
                            <option value="300">5 hours</option>
                            <option value="360">6 hours</option>
                        </InputSelect>
                    </div>
                    
                    <div class="form-group">
                        <label for="qrTheme">QR Code Theme</label>
                        <InputSelect id="qrTheme" @bind-Value="selectedTheme" class="form-control">
                            <option value="Standard">Standard</option>
                            <option value="Gradient">Gradient</option>
                            <option value="Branded">With Logo</option>
                            <option value="GradientWithLogo">Gradient with Logo</option>
                        </InputSelect>
                    </div>

                    <!-- Offline Configuration Section -->
                    <div class="form-section offline-config">
                        <h3 class="section-title">Offline Configuration</h3>
                        
                        <!-- Offline Sync Status (Always Enabled) -->
                        <div class="form-group toggle-group disabled">
                            <div class="toggle-header">
                                <label>Offline Sync</label>
                                <span class="feature-badge enabled">Always Enabled</span>
                            </div>
                            <div class="feature-description">
                                Attendance data is automatically stored locally and synced when connection is available.
                            </div>
                        </div>

                        <!-- Temporal Key Refresh (Always Disabled for Offline) -->
                        <div class="form-group toggle-group disabled">
                            <div class="toggle-header">
                                <label>Temporal Key Refresh</label>
                                <span class="feature-badge disabled">Disabled for Offline</span>
                            </div>
                            <div class="feature-description">
                                Temporal key refresh is not available in offline mode to ensure QR code remains valid without network connectivity.
                            </div>
                        </div>

                        <!-- Device GUID Check Toggle -->
                        <div class="form-group toggle-group">
                            <div class="toggle-header">
                                <label for="useDeviceGuidCheck">Device GUID Security</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoPopup.InfoType.DeviceGuidCheck)">
                                    <span class="info-icon">ⓘ</span>
                                </button>
                            </div>
                            <div class="toggle-switch">
                                <input type="checkbox" id="useDeviceGuidCheck" @bind="useDeviceGuidCheck" />
                                <label for="useDeviceGuidCheck" class="toggle-label"></label>
                            </div>
                            <div class="feature-description">
                                @if (useDeviceGuidCheck)
                                {
                                    <span class="security-enhanced">Enhanced security: QR codes are validated against device identifiers</span>
                                }
                                else
                                {
                                    <span class="security-standard">Standard security: QR codes can be scanned from any device</span>
                                }
                            </div>
                        </div>

                        <!-- Offline Storage Duration -->
                        <div class="form-group">
                            <div class="field-header">
                                <label for="offlineStorageDays">Local Storage Duration</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoPopup.InfoType.OfflineStorage)">
                                    <span class="info-icon">ⓘ</span>
                                </button>
                            </div>
                            <InputSelect id="offlineStorageDays" @bind-Value="maxOfflineStorageDays" class="form-control">
                                <option value="3">3 days</option>
                                <option value="7">1 week</option>
                                <option value="14">2 weeks</option>
                                <option value="30">1 month</option>
                            </InputSelect>
                        </div>

                        <!-- Sync Interval -->
                        <div class="form-group">
                            <div class="field-header">
                                <label for="syncInterval">Auto-Sync Interval</label>
                                <button type="button" class="info-btn" @onclick="() => ShowInfoPopup(InfoPopup.InfoType.SyncInterval)">
                                    <span class="info-icon">ⓘ</span>
                                </button>
                            </div>
                            <InputSelect id="syncInterval" @bind-Value="syncIntervalMinutes" class="form-control">
                                <option value="5">5 minutes</option>
                                <option value="10">10 minutes</option>
                                <option value="15">15 minutes</option>
                                <option value="30">30 minutes</option>
                                <option value="60">1 hour</option>
                            </InputSelect>
                        </div>
                    </div>
                    
                    <div class="button-container">
                        <PrimaryButton Text="Start Offline Session" 
                                     OnClick="CreateOfflineSessionAsync" 
                                     Disabled="@(selectedCourse == null || isCreatingOfflineSession)" />
                        @if (isCreatingOfflineSession)
                        {
                            <LoadingSpinner Title="Creating Offline Session" 
                                          Subtitle="Please wait while we set up your offline attendance session..." />
                        }
                    </div>
                </EditForm>
            </div>
        }
        else
        {
            <div class="active-session-container offline-active">
                <div class="session-header">
                    <h3>@selectedCourse?.Name</h3>
                    <span class="course-code-badge">@selectedCourse?.CourseCode</span>
                    <span class="offline-mode-badge">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M1,9H23L12,20L1,9Z"/>
                        </svg>
                        Offline Mode
                    </span>
                </div>

                <div class="session-status-indicators">
                    <div class="countdown-timer @GetCountdownClass()">
                        <span class="timer-label">Session ends in:</span>
                        <span class="timer-value">@FormatTimeRemaining()</span>
                    </div>
                    
                    <!-- Offline-Specific Status Indicators -->
                    <div class="offline-status-indicators">
                        <div class="offline-sync-indicator">
                            <span class="security-badge offline-sync-enabled">
                                <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M1,9H23L12,20L1,9Z"/>
                                </svg>
                                Offline Sync Active
                            </span>
                            <span class="sync-details">Auto-sync every @syncIntervalMinutes min</span>
                        </div>

                        @if (useDeviceGuidCheck)
                        {
                            <div class="security-level-indicator">
                                <span class="security-badge enhanced-security">
                                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M10,17L6,13L7.41,11.59L10,14.17L16.59,7.58L18,9L10,17Z"/>
                                    </svg>
                                    Device GUID Security
                                </span>
                                <span class="security-description">Enhanced device validation active</span>
                            </div>
                        }

                        <div class="storage-status-indicator">
                            <span class="storage-badge">
                                <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M6,2C4.89,2 4,2.89 4,4V20C4,21.11 4.89,22 6,22H18C19.11,22 20,21.11 20,20V8L14,2H6Z"/>
                                </svg>
                                @pendingRecords.Count records stored locally
                            </span>
                        </div>
                    </div>
                </div>

                <div class="qr-code-wrapper offline-qr">
                    @if (showOfflineQR && currentOfflineSession != null)
                    {
                        <QRCodeCompo SessionId="@currentOfflineSession.SessionId"
                                     CourseCode="@currentOfflineSession.SessionDetails.CourseCode"
                                     StartTime="@currentOfflineSession.SessionDetails.StartTime"
                                     Duration="@sessionDuration"
                                     Theme="@ConvertStringToTheme(selectedTheme)"
                                     Options="@GenerateOfflineQRCodeOptions()"
                                     UseTemporalKeyRefresh="false"
                                     AllowOfflineSync="true"
                                     SecurityFeatures="@(useDeviceGuidCheck ? AdvancedSecurityFeatures.DeviceGuidCheck : AdvancedSecurityFeatures.Default)"
                                     TemporalKey="@string.Empty"
                                     OnGenerated="@HandleQRCodeGenerated" />
                    }
                </div>
                
                <div class="session-actions offline-actions">
                    <div class="sync-controls">
                        <PrimaryButton Text="Sync Now" 
                                     OnClick="SyncOfflineDataAsync" 
                                     Disabled="@(isSyncInProgress || !HasPendingRecords())" />
                        @if (HasPendingRecords())
                        {
                            <span class="sync-info">@pendingRecords.Count records pending</span>
                        }
                    </div>
                    
                    <div class="end-session-container">
                        <SecondaryButton Text="End Offline Session" 
                                       OnClick="EndOfflineSessionAsync" 
                                       Disabled="false" />
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Offline Sessions History -->
    @if (allOfflineSessions.Any())
    {
        <div class="offline-sessions-history">
            <h3>Offline Sessions History</h3>
            <div class="sessions-grid">
                @foreach (var session in allOfflineSessions.OrderByDescending(s => s.CreatedAt))
                {
                    <div class="session-history-card @session.SyncStatus.ToString().ToLower()">
                        <div class="session-info">
                            <div class="session-main-info">
                                <strong>@session.SessionDetails.CourseName</strong>
                                <span class="course-code">(@session.SessionDetails.CourseCode)</span>
                            </div>
                            <div class="session-metadata">
                                <span class="session-date">@session.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                <span class="records-count">@session.PendingAttendanceRecords.Count records</span>
                            </div>
                        </div>
                        <div class="session-status">
                            <span class="status-badge @session.SyncStatus.ToString().ToLower()" 
                                  style="color: @GetSyncStatusColor(session.SyncStatus)">
                                @session.SyncStatus
                            </span>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Course Selection Modal -->
<CourseSelectionComponent 
    IsVisible="showCourseSelection" 
    OnCourseSelected="HandleCourseSelected"
    OnClosed="HideCourseSelection" />

<!-- Info Popup Component -->
<InfoPopup 
    IsVisible="showInfoPopup" 
    CurrentInfoType="currentInfoType" 
    OnClose="CloseInfoPopup" />