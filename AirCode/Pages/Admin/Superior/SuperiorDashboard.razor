@* Pages/Admin/Superior/SuperiorDashboard.razor *@
@page "/Admin/SuperiorDashboard"
@attribute [Authorize(Roles = "SuperiorAdmin")]
@layout SuperiorAdminLayout
@using AirCode.Domain.ValueObjects
@using Microsoft.AspNetCore.Authorization
@using AirCode.Layout.AdminLayout.Superior
@using AirCode.Models.Admin
@using AirCode.Services.Firebase
@using AirCode.Services.Courses
@using AirCode.Services.Attendance
@inject IJSRuntime JSRuntime
@inject IFirestoreService FirestoreService
@inject ICourseService CourseService
@inject IAttendanceSessionService AttendanceService
@implements IDisposable

<PageTitle>Superior Admin Dashboard</PageTitle>

<div class="superior-dashboard">
    @if (_isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading dashboard data...</p>
        </div>
    }
    else
    {
        <!-- System Overview Cards -->
        <div class="overview-grid">
            <div class="metric-card primary">
                <div class="metric-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalUsers</h3>
                    <p>Total System Users</p>
                    <span class="trend positive">
                        <i class="fas fa-arrow-up"></i>
                        @_activeUsers Active
                    </span>
                </div>
            </div>

            <div class="metric-card secondary">
                <div class="metric-icon">
                    <i class="fas fa-graduation-cap"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalStudents</h3>
                    <p>Total Students</p>
                    <span class="trend positive">
                        <i class="fas fa-users"></i>
                        @_activeStudents Active
                    </span>
                </div>
            </div>

            <div class="metric-card accent">
                <div class="metric-icon">
                    <i class="fas fa-chalkboard-teacher"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalLecturers</h3>
                    <p>Total Lecturers</p>
                    <span class="trend neutral">
                        <i class="fas fa-user-check"></i>
                        @_activeLecturers Active
                    </span>
                </div>
            </div>

            <div class="metric-card warning">
                <div class="metric-icon">
                    <i class="fas fa-book"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalCourses</h3>
                    <p>Total Courses</p>
                    <span class="trend positive">
                        <i class="fas fa-calendar"></i>
                        Current Session
                    </span>
                </div>
            </div>
        </div>

        <!-- Content Grid -->
        <div class="content-grid">
            <div class="dashboard-card">
                <div class="card-header">
                    <h4><i class="fas fa-users-cog"></i> User Distribution</h4>
                </div>
                <div class="card-content">
                    @foreach (var level in _studentsByLevel)
                    {
                        <div class="level-item">
                            <div class="level-info">
                                <span class="level-name">@level.Key Level</span>
                                <span class="level-count">@level.Value students</span>
                            </div>
                            <div class="level-stats">
                                <span class="active-count">@GetActiveLevelCount(level.Key) active</span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="dashboard-card">
                <div class="card-header">
                    <h4><i class="fas fa-server"></i> System Status</h4>
                    <span class="health-indicator @(_isConnected ? "healthy" : "error")">
                        @(_isConnected ? "Connected" : "Disconnected")
                    </span>
                </div>
                <div class="card-content">
                    <div class="health-metrics">
                        <div class="health-item">
                            <span class="label">Firebase</span>
                            <span class="status @(_isConnected ? "connected" : "disconnected")">
                                @(_isConnected ? "Connected" : "Disconnected")
                            </span>
                        </div>
                        <div class="health-item">
                            <span class="label">Last Sync</span>
                            <span class="value">@_lastSyncTime.ToString("HH:mm")</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="dashboard-card">
                <div class="card-header">
                    <h4><i class="fas fa-calendar-check"></i> Attendance Overview</h4>
                </div>
                <div class="card-content">
                    <div class="attendance-stats">
                        <div class="stat-item">
                            <span class="stat-label">Active Sessions</span>
                            <span class="stat-value">@_activeSessions</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Total Sessions</span>
                            <span class="stat-value">@_totalSessions</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Offline Sessions</span>
                            <span class="stat-value">@_offlineSessions</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="dashboard-card full-width">
                <div class="card-header">
                    <h4><i class="fas fa-chart-bar"></i> Recent Activity</h4>
                </div>
                <div class="card-content">
                    @if (_recentActivities.Any())
                    {
                        <div class="activities-list">
                            @foreach (var activity in _recentActivities.Take(5))
                            {
                                <div class="activity-item">
                                    <div class="activity-icon @activity.Type.ToLower()">
                                        <i class="fas fa-@GetActivityIcon(activity.Type)"></i>
                                    </div>
                                    <div class="activity-details">
                                        <span class="activity-title">@activity.Title</span>
                                        <span class="activity-description">@activity.Description</span>
                                        <span class="activity-time">@activity.Timestamp.ToString("MMM dd, HH:mm")</span>
                                    </div>
                                    <div class="activity-user">
                                        <span>@activity.User</span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-data">
                            <i class="fas fa-info-circle"></i>
                            <span>No recent activities</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <h4>Quick Actions</h4>
            <div class="actions-grid">
                <button class="action-btn" @onclick="ManageUsers">
                    <i class="fas fa-users-cog"></i>
                    <span>Manage Users</span>
                </button>
                <button class="action-btn" @onclick="ViewCourses">
                    <i class="fas fa-book"></i>
                    <span>View Courses</span>
                </button>
                <button class="action-btn" @onclick="ViewAttendance">
                    <i class="fas fa-calendar-check"></i>
                    <span>Attendance Overview</span>
                </button>
                <button class="action-btn" @onclick="RefreshData">
                    <i class="fas fa-sync-alt"></i>
                    <span>Refresh Data</span>
                </button>
            </div>
        </div>
    }
</div>

@code {
    private bool _isLoading = true;
    private bool _disposed = false;
    private bool _isConnected = false;
    private DateTime _lastSyncTime = DateTime.Now;

    // Metrics
    private int _totalUsers = 0;
    private int _totalStudents = 0;
    private int _totalLecturers = 0;
    private int _totalCourses = 0;
    private int _activeUsers = 0;
    private int _activeStudents = 0;
    private int _activeLecturers = 0;

    // Attendance stats
    private int _activeSessions = 0;
    private int _totalSessions = 0;
    private int _offlineSessions = 0;

    // Data collections
    private Dictionary<string, int> _studentsByLevel = new();
    private Dictionary<string, int> _activeStudentsByLevel = new();
    private List<AdminActivity> _recentActivities = new();

    // Constants
    private const string STUDENTS_COLLECTION = "STUDENTS_MATRICULATION_NUMBERS";
    private const string ADMIN_IDS_COLLECTION = "VALID_ADMIN_IDS";
    private const string LECTURER_ADMIN_DOC = "LecturerAdminIdsDoc";
    private const string COURSEREP_ADMIN_DOC = "CourseRepAdminIdsDoc";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDashboardData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Dashboard initialization error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadDashboardData()
    {
        // Check connectivity
        _isConnected = await FirestoreService.IsConnectedAsync();
        
        // Load all data concurrently
        var tasks = new[]
        {
            LoadStudentData(),
            LoadLecturerData(),
            LoadCourseData(),
            LoadAttendanceData()
        };

        await Task.WhenAll(tasks);
        
        // Calculate totals
        CalculateTotals();
        
        // Generate recent activities
        GenerateRecentActivities();
    }

    private async Task LoadStudentData()
    {
        try
        {
            var levels = new[] { "100", "200", "300", "400", "500" };
            
            foreach (var level in levels)
            {
                var docName = $"StudentLevel{level}";
                var levelDoc = await FirestoreService.GetDocumentAsync<StudentLevelDocument>(STUDENTS_COLLECTION, docName);
                
                if (levelDoc?.ValidStudentMatricNumbers != null)
                {
                    var totalStudents = levelDoc.ValidStudentMatricNumbers.Count;
                    var activeStudents = levelDoc.ValidStudentMatricNumbers.Count(s => s.IsCurrentlyInUse);
                    
                    _studentsByLevel[level] = totalStudents;
                    _activeStudentsByLevel[level] = activeStudents;
                }
                else
                {
                    _studentsByLevel[level] = 0;
                    _activeStudentsByLevel[level] = 0;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student data: {ex.Message}");
        }
    }

    private async Task LoadLecturerData()
    {
        try
        {
            var lecturerDoc = await FirestoreService.GetDocumentAsync<LecturerAdminDocument>(ADMIN_IDS_COLLECTION, LECTURER_ADMIN_DOC);
            
            if (lecturerDoc?.Ids != null)
            {
                _totalLecturers = lecturerDoc.Ids.Count;
                _activeLecturers = lecturerDoc.Ids.Count(l => l.CurrentUsage > 0);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lecturer data: {ex.Message}");
        }
    }

    private async Task LoadCourseData()
    {
        try
        {
            var courses = await CourseService.GetAllCoursesAsync();
            _totalCourses = courses?.Count ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading course data: {ex.Message}");
        }
    }

    private async Task LoadAttendanceData()
    {
        try
        {
            var activeSessions = await AttendanceService.GetActiveSessionsAsync();
            var allSessions = await AttendanceService.GetAllSessionsAsync();
            var offlineSessions = await AttendanceService.GetActiveOfflineSessionsAsync();
            
            _activeSessions = activeSessions?.Count ?? 0;
            _totalSessions = allSessions?.Count ?? 0;
            _offlineSessions = offlineSessions?.Count ?? 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading attendance data: {ex.Message}");
        }
    }

    private void CalculateTotals()
    {
        _totalStudents = _studentsByLevel.Values.Sum();
        _activeStudents = _activeStudentsByLevel.Values.Sum();
        _totalUsers = _totalStudents + _totalLecturers;
        _activeUsers = _activeStudents + _activeLecturers;
    }

    private int GetActiveLevelCount(string level)
    {
        return _activeStudentsByLevel.TryGetValue(level, out var count) ? count : 0;
    }

    private void GenerateRecentActivities()
    {
        _recentActivities = new List<AdminActivity>
        {
            new() { Title = "System Data Sync", Description = "Dashboard data refreshed", 
                   Type = "System", User = "System", Timestamp = DateTime.Now },
            new() { Title = "User Status Update", Description = $"{_activeUsers} users currently active", 
                   Type = "Update", User = "System", Timestamp = DateTime.Now.AddMinutes(-5) },
            new() { Title = "Attendance Summary", Description = $"{_activeSessions} active sessions", 
                   Type = "Info", User = "System", Timestamp = DateTime.Now.AddMinutes(-10) }
        };
    }

    private string GetActivityIcon(string type) => type.ToLower() switch
    {
        "system" => "cog",
        "update" => "sync-alt",
        "info" => "info-circle",
        _ => "circle"
    };

    private async Task RefreshData()
    {
        if (_disposed) return;
        
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            await LoadDashboardData();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ManageUsers()
    {
        if (_disposed) return;
        await JSRuntime.InvokeVoidAsync("location.assign", "/Admin/Users");
    }

    private async Task ViewCourses()
    {
        if (_disposed) return;
        await JSRuntime.InvokeVoidAsync("location.assign", "/Admin/Courses");
    }

    private async Task ViewAttendance()
    {
        if (_disposed) return;
        await JSRuntime.InvokeVoidAsync("location.assign", "/Admin/Attendance");
    }

    public void Dispose()
    {
        _disposed = true;
    }
    
    public class AdminActivity
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Type { get; set; } = "";
        public string User { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
}
