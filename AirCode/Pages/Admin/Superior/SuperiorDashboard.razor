@* Pages/Admin/Superior/SuperiorDashboard.razor *@
@page "/Admin/SuperiorDashboard"
@attribute [Authorize(Roles = "SuperiorAdmin")]
@layout SuperiorAdminLayout
@using System.Text.Json
@using AirCode.Domain.ValueObjects
@using AirCode.Domain.Entities
@using AirCode.Domain.Enums
@using Microsoft.AspNetCore.Authorization
@using AirCode.Layout.AdminLayout.Superior
@using AirCode.Models.Admin
@using AirCode.Services.Firebase
@using AirCode.Services.Courses
@using AirCode.Services.Attendance
@using AirCode.Services.Academic
@inject IJSRuntime JSRuntime
@inject IFirestoreService FirestoreService
@inject ICourseService CourseService
@inject IAttendanceSessionService AttendanceService
@inject IAcademicSessionService AcademicSessionService
@implements IDisposable

<PageTitle>Superior Admin Dashboard</PageTitle>

<div class="superior-dashboard">
    @if (_isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading dashboard data...</p>
        </div>
    }
    else
    {
        <!-- System Overview Cards -->
        <div class="overview-grid">
            <div class="metric-card primary">
                <div class="metric-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalUsers</h3>
                    <p>Total System Users</p>
                    <span class="trend positive">
                        <i class="fas fa-arrow-up"></i>
                        @_activeUsers Active
                    </span>
                </div>
            </div>

            <div class="metric-card secondary">
                <div class="metric-icon">
                    <i class="fas fa-graduation-cap"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalStudents</h3>
                    <p>Total Students</p>
                    <span class="trend positive">
                        <i class="fas fa-users"></i>
                        @_activeStudents Active
                    </span>
                </div>
            </div>

            <div class="metric-card accent">
                <div class="metric-icon">
                    <i class="fas fa-chalkboard-teacher"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalLecturers</h3>
                    <p>Total Lecturers</p>
                    <span class="trend neutral">
                        <i class="fas fa-user-check"></i>
                        @_activeLecturers Active
                    </span>
                </div>
            </div>

            <div class="metric-card warning">
                <div class="metric-icon">
                    <i class="fas fa-book"></i>
                </div>
                <div class="metric-content">
                    <h3>@_totalCourses</h3>
                    <p>Total Courses</p>
                    <span class="trend positive">
                        <i class="fas fa-calendar"></i>
                        @_currentSession?.SessionId ?? "No Session"
                    </span>
                </div>
            </div>
        </div>

        <!-- Content Grid -->
        <div class="content-grid">
            <div class="dashboard-card">
                <div class="card-header">
                    <h4><i class="fas fa-users-cog"></i> Student Distribution</h4>
                </div>
                <div class="card-content">
                    @if (_studentsByLevel.Any())
                    {
                        @foreach (var level in _studentsByLevel)
                        {
                            <div class="level-item">
                                <div class="level-info">
                                    <span class="level-name">@level.Key Level</span>
                                    <span class="level-count">@level.Value students</span>
                                </div>
                                <div class="level-stats">
                                    <span class="active-count">@GetActiveLevelCount(level.Key) active</span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-data">
                            <i class="fas fa-info-circle"></i>
                            <span>No student data available</span>
                        </div>
                    }
                </div>
            </div>

            <div class="dashboard-card">
                <div class="card-header">
                    <h4><i class="fas fa-server"></i> System Status</h4>
                    <span class="health-indicator @(_isConnected ? "healthy" : "error")">
                        @(_isConnected ? "Connected" : "Disconnected")
                    </span>
                </div>
                <div class="card-content">
                    <div class="health-metrics">
                        <div class="health-item">
                            <span class="label">Firebase</span>
                            <span class="status @(_isConnected ? "connected" : "disconnected")">
                                @(_isConnected ? "Connected" : "Disconnected")
                            </span>
                        </div>
                        <div class="health-item">
                            <span class="label">Last Sync</span>
                            <span class="value">@_lastSyncTime.ToString("HH:mm")</span>
                        </div>
                        <div class="health-item">
                            <span class="label">Academic Session</span>
                            <span class="value">@(_currentSession?.SessionId ?? "None")</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="dashboard-card">
                <div class="card-header">
                    <h4><i class="fas fa-calendar-check"></i> Attendance Overview</h4>
                </div>
                <div class="card-content">
                    <div class="attendance-stats">
                        <div class="stat-item">
                            <span class="stat-label">Active Sessions</span>
                            <span class="stat-value">@_activeSessions</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Total Sessions</span>
                            <span class="stat-value">@_totalSessions</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Offline Sessions</span>
                            <span class="stat-value">@_offlineSessions</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="dashboard-card full-width">
                <div class="card-header">
                    <h4><i class="fas fa-chart-bar"></i> Course Statistics</h4>
                </div>
                <div class="card-content">
                    @if (_coursesByLevel.Any())
                    {
                        <div class="course-stats-grid">
                            @foreach (var levelGroup in _coursesByLevel)
                            {
                                <div class="course-stat-item">
                                    <div class="stat-header">
                                        <span class="level-label">@levelGroup.Key Level</span>
                                        <span class="course-count">@levelGroup.Value.Count courses</span>
                                    </div>
                                    <div class="course-details">
                                        @foreach (var semester in levelGroup.Value.GroupBy(c => c.Semester))
                                        {
                                            <div class="semester-info">
                                                <span class="semester-name">@semester.Key:</span>
                                                <span class="semester-count">@semester.Count() courses</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-data">
                            <i class="fas fa-book"></i>
                            <span>No course data available</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <h4>Quick Actions</h4>
            <div class="actions-grid">
                <button class="action-btn" @onclick="ManageUsers">
                    <i class="fas fa-users-cog"></i>
                    <span>Manage Users</span>
                </button>
                <button class="action-btn" @onclick="ViewCourses">
                    <i class="fas fa-book"></i>
                    <span>View Courses</span>
                </button>
                <button class="action-btn" @onclick="ViewAttendance">
                    <i class="fas fa-calendar-check"></i>
                    <span>Attendance Overview</span>
                </button>
                <button class="action-btn" @onclick="RefreshData">
                    <i class="fas fa-sync-alt"></i>
                    <span>Refresh Data</span>
                </button>
            </div>
        </div>
    }
</div>

@code {
    private bool _isLoading = true;
    private bool _disposed = false;
    private bool _isConnected = false;
    private DateTime _lastSyncTime = DateTime.Now;

    // Core entities
    private AcademicSession? _currentSession;
    private List<Course> _allCourses = new();
    private List<StudentCourse> _allStudentCourses = new();

    // Metrics
    private int _totalUsers = 0;
    private int _totalStudents = 0;
    private int _totalLecturers = 0;
    private int _totalCourses = 0;
    private int _activeUsers = 0;
    private int _activeStudents = 0;
    private int _activeLecturers = 0;

    // Attendance stats
    private int _activeSessions = 0;
    private int _totalSessions = 0;
    private int _offlineSessions = 0;

    // Data collections
    private Dictionary<string, int> _studentsByLevel = new();
    private Dictionary<string, int> _activeStudentsByLevel = new();
    private Dictionary<LevelType, List<Course>> _coursesByLevel = new();

    // Constants
    private const string STUDENTS_COLLECTION = "STUDENTS_MATRICULATION_NUMBERS";
    private const string ADMIN_IDS_COLLECTION = "VALID_ADMIN_IDS";
    private const string LECTURER_ADMIN_DOC = "LecturerAdminIdsDoc";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDashboardData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Dashboard initialization error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadDashboardData()
    {
        // Check connectivity
        _isConnected = await FirestoreService.IsConnectedAsync();
        
        // Load all data concurrently
        var tasks = new[]
        {
            LoadAcademicData(),
            LoadStudentData(),
            LoadLecturerData(),
            LoadCourseData(),
            LoadAttendanceData()
        };

        await Task.WhenAll(tasks);
        
        // Calculate derived metrics
        CalculateTotals();
        GroupCoursesByLevel();
    }
    private async Task LoadAttendanceData()
    {
        try
        {
            // Replace Supabase queries with Firestore document analysis
            var attendanceEvents = await FirestoreService.GetCollectionAsync<Dictionary<string, object>>(
                "ATTENDANCE_EVENTS");
        
            _activeSessions = CountActiveSessions(attendanceEvents);
            _totalSessions = CountTotalSessions(attendanceEvents);
            _offlineSessions = await CountOfflineSessionsAsync();
        }
        catch (Exception ex)
        {
            MID_HelperFunctions.DebugMessage("Error loading attendance data via Firestore" + ex.Message,DebugClass.Exception );
            // Use fallbacks
            _activeSessions = 0;
            _totalSessions = 0;
            _offlineSessions = 0;
        }
    }

    private static int CountActiveSessions(List<Dictionary<string, object>> events)
    {
        return events?.Sum(doc => doc.Count(kvp => 
            kvp.Key.StartsWith("Event_") && IsActiveEvent(kvp.Value))) ?? 0;
    }

    private static int CountTotalSessions(List<Dictionary<string, object>> events)
    {
        return events?.Sum(doc => doc.Count(kvp => kvp.Key.StartsWith("Event_"))) ?? 0;
    }

    private async Task<int> CountOfflineSessionsAsync()
    {
        try
        {
            var offlineEvents = await FirestoreService.GetCollectionAsync<Dictionary<string, object>>(
                "OFFLINE_ATTENDANCE_EVENTS");
            return CountActiveSessions(offlineEvents);
        }
        catch
        {
            return 0;
        }
    }

    private static bool IsActiveEvent(object eventValue)
    {
        return eventValue is JsonElement element &&
               element.TryGetProperty("Status", out var status) &&
               status.GetString() == "Active";
    }
    private async Task LoadAcademicData()
    {
        try
        {
            _currentSession = await AcademicSessionService.GetCurrentSessionAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading academic data: {ex.Message}");
        }
    }

    private async Task LoadStudentData()
    {
        try
        {
            _allStudentCourses = await CourseService.GetAllStudentCoursesAsync() ?? new List<StudentCourse>();
            
            // Group students by level from StudentCourse entities
            _studentsByLevel.Clear();
            _activeStudentsByLevel.Clear();

            var levelGroups = _allStudentCourses.GroupBy(sc => sc.StudentLevel);
            foreach (var levelGroup in levelGroups)
            {
                var levelKey = levelGroup.Key.ToString().Replace("Level", "");
                var totalCount = levelGroup.Count();
                var activeCount = levelGroup.Count(sc => sc.StudentCoursesRefs?.Any(cr => 
                    cr.CourseEnrollmentStatus == CourseEnrollmentStatus.Enrolled) == true);
                
                _studentsByLevel[levelKey] = totalCount;
                _activeStudentsByLevel[levelKey] = activeCount;
            }

            // Also try to load from Firebase student documents if available
            await LoadFirebaseStudentData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student data: {ex.Message}");
        }
    }

    private async Task LoadFirebaseStudentData()
    {
        try
        {
            var levels = new[] { "100", "200", "300", "400", "500" };
            
            foreach (var level in levels)
            {
                var docName = $"StudentLevel{level}";
                var levelDoc = await FirestoreService.GetDocumentAsync<StudentLevelDocument>(STUDENTS_COLLECTION, docName);
                
                if (levelDoc?.ValidStudentMatricNumbers != null)
                {
                    var totalStudents = levelDoc.ValidStudentMatricNumbers.Count;
                    var activeStudents = levelDoc.ValidStudentMatricNumbers.Count(s => s.IsCurrentlyInUse);
                    
                    // Update if Firebase has more recent data
                    if (totalStudents > (_studentsByLevel.GetValueOrDefault(level, 0)))
                    {
                        _studentsByLevel[level] = totalStudents;
                        _activeStudentsByLevel[level] = activeStudents;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Firebase student data: {ex.Message}");
        }
    }

    private async Task LoadLecturerData()
    {
        try
        {
            var lecturerDoc = await FirestoreService.GetDocumentAsync<LecturerAdminDocument>(ADMIN_IDS_COLLECTION, LECTURER_ADMIN_DOC);
            
            if (lecturerDoc?.Ids != null)
            {
                _totalLecturers = lecturerDoc.Ids.Count;
                _activeLecturers = lecturerDoc.Ids.Count(l => l.CurrentUsage > 0);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lecturer data: {ex.Message}");
        }
    }

    private async Task LoadCourseData()
    {
        try
        {
            _allCourses = await CourseService.GetAllCoursesAsync() ?? new List<Course>();
            _totalCourses = _allCourses.Count;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading course data: {ex.Message}");
        }
    }

    

    private void CalculateTotals()
    {
        _totalStudents = _studentsByLevel.Values.Sum();
        _activeStudents = _activeStudentsByLevel.Values.Sum();
        _totalUsers = _totalStudents + _totalLecturers;
        _activeUsers = _activeStudents + _activeLecturers;
    }

    private void GroupCoursesByLevel()
    {
        _coursesByLevel = _allCourses.GroupBy(c => c.Level).ToDictionary(g => g.Key, g => g.ToList());
    }

    private int GetActiveLevelCount(string level)
    {
        return _activeStudentsByLevel.TryGetValue(level, out var count) ? count : 0;
    }

    private async Task RefreshData()
    {
        if (_disposed) return;
        
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            await LoadDashboardData();
            _lastSyncTime = DateTime.Now;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ManageUsers()
    {
        if (_disposed) return;
        await JSRuntime.InvokeVoidAsync("location.assign", "/Admin/Users");
    }

    private async Task ViewCourses()
    {
        if (_disposed) return;
        await JSRuntime.InvokeVoidAsync("location.assign", "/Admin/Courses");
    }

    private async Task ViewAttendance()
    {
        if (_disposed) return;
        await JSRuntime.InvokeVoidAsync("location.assign", "/Admin/Attendance");
    }

    public void Dispose()
    {
        _disposed = true;
    }
}
