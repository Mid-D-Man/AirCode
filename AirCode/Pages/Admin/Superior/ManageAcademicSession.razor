@page "/Admin/ManageAcademicSession"
@attribute [Authorize(Roles = "SuperiorAdmin")]
@using AirCode.Domain.Enums
@using AirCode.Layout.AdminLayout.Superior
@using AirCode.Components.SharedPrefabs.Cards
@using Microsoft.AspNetCore.Authorization
@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Components.Admin.Superior

@layout SuperiorAdminLayout

<!-- Added our notification component at the top -->
<NotificationComponent @ref="notificationComponent"
                        Position="NotificationPosition.TopRight"
                        AutoDismissTime="5000"
                        ShowProgressBar="true"
                        ShowCloseButton="true"
                        PauseOnHover="true" />

<div class="academic-session-container">
    <div class="page-header">
        <h2 class="text-secondary">Manage Academic Sessions</h2>
        <div class="actions">
            <CoolPrimaryButton Text="New Academic Session" 
                             Icon="+" 
                             OnClick="() => ShowModal(CreateAcademicSessionModal.ModalType.CreateSession)" 
                             IsDisabled="@isLoadingSessions" />
        </div>
    </div>

    @* Loading indicator when loading sessions *@
    @if (isLoadingSessions)
    {
        <div class="sessions-loading">
            <LoadingSpinner Title="Loading Academic Sessions" 
                          Subtitle="Fetching session data and checking for transitions..." />
        </div>
    }
    else
    {
        @if (currentSession != null)
        {
            <div class="current-session-card">
                <div class="card-header">
                    <h3>Current Academic Session</h3>
                    <div class="session-status @(IsSessionActive(currentSession) ? "active" : "inactive")">
                        @(IsSessionActive(currentSession) ? "Active" : "Archived")
                    </div>
                </div>
                <div class="session-details">
                    <div class="session-title">@currentSession.YearStart - @currentSession.YearEnd</div>
                    <div class="session-countdown">
                        @if (IsSessionActive(currentSession))
                        {
                            <div class="countdown-container">
                                <div class="countdown-label">Ends in:</div>
                                <div class="countdown-timer">@GetRemainingTime(GetEndDate(currentSession))</div>
                            </div>
                        }
                        else
                        {
                            <div class="session-archived">Archived on @GetEndDate(currentSession).ToShortDateString()</div>
                        }
                    </div>
                </div>
                <div class="semester-cards">
                    @foreach (var semester in currentSession.Semesters)
                    {
                        <div class="semester-card @(IsCurrentSemester(semester) ? "current-semester" : "")">
                            <div class="semester-header">
                                <h4>@GetSemesterName(semester.Type)</h4>
                                <div class="semester-status @(IsActiveSemester(semester) ? "active" : "inactive")">
                                    @(IsActiveSemester(semester) ? "Active" : 
                                      IsFutureSemester(semester) ? "Upcoming" : "Completed")
                                </div>
                            </div>
                            <div class="semester-dates">
                                <div><strong>Start:</strong> @semester.StartDate.ToShortDateString()</div>
                                <div><strong>End:</strong> @semester.EndDate.ToShortDateString()</div>
                            </div>
                            @if (IsActiveSemester(semester))
                            {
                                <div class="semester-countdown">
                                    <div class="countdown-label">Ends in:</div>
                                    <div class="countdown-timer">@GetRemainingTime(semester.EndDate)</div>
                                </div>
                            }
                        </div>
                    }
                    @if (currentSession.Semesters.Count < 2)
                    {
                        <div class="add-semester-card" @onclick="() => ShowModal(CreateAcademicSessionModal.ModalType.CreateSemester)">
                            <div class="add-icon">+</div>
                            <div>Add Semester</div>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="archived-sessions-section">
            <h3>Archived Sessions</h3>
            @if (archivedSessions.Count > 0)
            {
                <div class="archived-sessions-grid">
                    @foreach (var session in archivedSessions)
                    {
                        <div class="archived-session-card" @onclick="() => ViewSessionDetails(session)">
                            <div class="session-year">@session.YearStart - @session.YearEnd</div>
                            <div class="session-semesters">@session.Semesters.Count Semester(s)</div>
                            <div class="archived-date">Archived: @GetEndDate(session).ToShortDateString()</div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-archived-sessions">
                    <p>No archived sessions available.</p>
                </div>
            }
        </div>

        @if (nextSession != null)
        {
            <div class="upcoming-session-card">
                <div class="card-header">
                    <h3>Next Academic Session</h3>
                    <div class="session-status upcoming">Upcoming</div>
                </div>
                <div class="session-details">
                    <div class="session-title">@nextSession.YearStart - @nextSession.YearEnd</div>
                    <div class="session-countdown">
                        <div class="countdown-container">
                            <div class="countdown-label">Starts in:</div>
                            <div class="countdown-timer">@GetRemainingTime(GetStartDate(nextSession))</div>
                        </div>
                    </div>
                </div>
                <div class="semester-cards">
                    @foreach (var semester in nextSession.Semesters)
                    {
                        <div class="semester-card">
                            <div class="semester-header">
                                <h4>@GetSemesterName(semester.Type)</h4>
                                <div class="semester-status upcoming">Upcoming</div>
                            </div>
                            <div class="semester-dates">
                                <div><strong>Start:</strong> @semester.StartDate.ToShortDateString()</div>
                                <div><strong>End:</strong> @semester.EndDate.ToShortDateString()</div>
                            </div>
                        </div>
                    }
                    @if (nextSession.Semesters.Count < 2)
                    {
                        <div class="add-semester-card" @onclick="() => ShowModal(CreateAcademicSessionModal.ModalType.CreateSemester, nextSession.SessionId)">
                            <div class="add-icon">+</div>
                            <div>Add Semester</div>
                        </div>
                    }
                </div>
            </div>
        }
        else if (currentSession != null)
        {
            <div class="create-next-session">
                <CoolPrimaryButton Text="Create Next Academic Session" OnClick="() => ShowModal(CreateAcademicSessionModal.ModalType.CreateSession)" />
                <p>Prepare for the upcoming academic year by creating the next session.</p>
            </div>
        }

        @if (showWarning)
        {
            <div class="warning-banner">
                <div class="warning-icon">⚠️</div>
                <div class="warning-message">
                    <strong>Warning:</strong> No upcoming academic session has been configured. 
                    Please create a new session before the current one ends to ensure continuity.
                </div>
                <CoolPrimaryButton Text="Create Session" OnClick="() => ShowModal(CreateAcademicSessionModal.ModalType.CreateSession)" />
                <button class="close-warning" @onclick="DismissWarning">×</button>
            </div>
        }
    }
</div>

<!-- CreateAcademicSessionModal -->
<CreateAcademicSessionModal 
    IsVisible="@showModal"
    ActiveModal="@activeModal"
    SessionForm="@sessionForm"
    SemesterForm="@semesterForm"
    FirstSemesterForm="@firstSemesterForm"
    IncludeFirstSemester="@includeFirstSemester"
    IsLoading="@isModalLoading"
    OnSave="@SaveModal"
    OnClosed="@CloseModal" />
