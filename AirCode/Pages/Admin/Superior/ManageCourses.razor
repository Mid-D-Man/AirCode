@page "/Admin/ManageCourses"
@using AirCode.Layout.AdminLayout.Superior
@using AirCode.Domain.Entities
@using AirCode.Domain.Enums
@using AirCode.Components.SharedPrefabs.Cards
@layout SuperiorAdminLayout

<div class="page-container bg-primary">
    <div class="page-header">
        <h1 class="text-primary">Manage Courses</h1>
        <button class="btn btn-primary" @onclick="ShowAddForm" disabled="@_isLoading">
            Add New Course
        </button>
    </div>

    <!-- Filters Section -->
    <div class="filter-section bg-secondary border-theme">
        <div class="filter-container">
            <div class="filter-item">
                <label for="searchTerm">Search:</label>
                <input id="searchTerm" class="form-control" @bind="_searchTerm" @bind:event="oninput" 
                       placeholder="Search by name or code..." />
            </div>

            <div class="filter-item">
                <label for="departmentFilter">Department:</label>
                <input id="departmentFilter" class="form-control" @bind="_filterDepartment" @bind:event="oninput" 
                       placeholder="Enter department code..." />
            </div>

            <div class="filter-item">
                <label for="levelFilter">Level:</label>
                <select id = "levelFilter" class="form-select" @bind="_filterLevel" @bind:after="OnFilterChanged">
                    @foreach (var level in Enum.GetValues(typeof(LevelType)))
                    {
                        <option value="@level">@level</option>
                    }
                </select>
            </div>

            <div class="filter-item">
                <label for="semesterFilter">Semester:</label>
                <select id="semesterFilter" class="form-control" @bind="_filterSemester" @bind:after="OnFilterChanged">
                    <option value="">All Semesters</option>
                    @foreach (var semester in Enum.GetValues(typeof(SemesterType)))
                    {
                        <option value="@semester">@semester</option>
                    }
                </select>
            </div>

            <button class="btn btn-secondary" @onclick="ApplyFilters">
                Apply Filters
            </button>
            <button class="btn btn-outline-secondary" @onclick="ResetFilters">
                Reset
            </button>
        </div>
    </div>

    <!-- Loading and Error States -->
    @if (_isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Loading...</p>
        </div>
    }
    else if (FilteredCourses.Count == 0)
    {
        <div class="empty-state bg-secondary border-theme">
            <p>No courses found. Please add a new course or adjust your filters.</p>
        </div>
    }
    else
    {
        <!-- Courses Grid -->
     <div class="card-grid">
            @foreach (var course in PaginatedCourses)
            {
                <CourseCard Course="course" 
                           OnEdit="ShowEditForm" 
                           OnDelete="ConfirmDelete" />
            }
        </div>

        <!-- Pagination -->
        @if (TotalPages > 1)
        {
            <div class="pagination-container">
                <div class="pagination">
                    <button class="pagination-btn" @onclick="() => ChangePage(1)" disabled="@(CurrentPage == 1)">
                        &laquo;
                    </button>
                    <button class="pagination-btn" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                        &lsaquo;
                    </button>

                    @for (int i = StartPage; i <= EndPage; i++)
                    {
                        var pageNumber = i;
                        <button class="pagination-btn @(pageNumber == CurrentPage ? "active" : "")" 
                                @onclick="() => ChangePage(pageNumber)">
                            @pageNumber
                        </button>
                    }

                    <button class="pagination-btn" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                        &rsaquo;
                    </button>
                    <button class="pagination-btn" @onclick="() => ChangePage(TotalPages)" disabled="@(CurrentPage == TotalPages)">
                        &raquo;
                    </button>
                </div>
                <div class="pagination-info">
                    Page @CurrentPage of @TotalPages (@FilteredCourses.Count total courses)
                </div>
            </div>
        }
    }
</div>

<!-- Add/Edit Modal -->
@if (_showAddForm || _showEditForm)
{
    <div class="modal-backdrop" @onclick="CancelForm"></div>
    <div class="modal" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h2>@(_showEditForm ? "Edit Course" : "Add New Course")</h2>
            <button class="close-btn" @onclick="CancelForm">&times;</button>
        </div>
        <div class="modal-body">
            <EditForm Model="this" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="courseName">Course Name:</label>
                    <input id="courseName" class="form-control" @bind="_courseName" />
                </div>

                <div class="form-group">
                    <label for="courseCode">Course Code:</label>
                    <input id="courseCode" class="form-control" @bind="_courseCode" />
                </div>

                <div class="form-group">
                    <label for="department">Department ID:</label>
                    <input id="department" class="form-control" @bind="_departmentId" />
                </div>

                <div class="form-row">
                    <div class="form-group col">
                        <label for="level">Level:</label>
                        <select id="level" class="form-control" @bind="_level">
                            @foreach (var level in Enum.GetValues(typeof(LevelType)))
                            {
                                <option value="@level">@level</option>
                            }
                        </select>
                    </div>

                    <div class="form-group col">
                        <label for="semester">Semester:</label>
                        <select id="semester" class="form-control" @bind="_semester">
                            @foreach (var semester in Enum.GetValues(typeof(SemesterType)))
                            {
                                <option value="@semester">@semester</option>
                            }
                        </select>
                    </div>

                    <div class="form-group col">
                        <label for="creditUnits">Credit Units:</label>
                        <input id="creditUnits" type="number" class="form-control" @bind="_creditUnits" min="1" max="10" />
                    </div>
                </div>

                <h3>Lecturers</h3>
                <div class="lecturer-section">
                    <div class="form-row">
                        <div class="form-group col">
                            <input class="form-control" @bind="_newLecturerId" placeholder="Lecturer ID" />
                        </div>
                        <div class="form-group col-auto">
                            <button type="button" class="btn btn-secondary" @onclick="AddLecturer">Add</button>
                        </div>
                    </div>
                    @if (_lecturerIds.Count > 0)
                    {
                        <ul class="lecturer-list">
                            @foreach (var lecturerId in _lecturerIds)
                            {
                                <li>
                                    @lecturerId
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveLecturer(lecturerId)">Remove</button>
                                </li>
                            }
                        </ul>
                    }
                </div>

                <h3>Schedule</h3>
                <div class="schedule-section">
                    <div class="form-row">
                        <div class="form-group col">
                            <label>Day:</label>
                            <select class="form-control" @bind="_newDay">
                                @foreach (var day in Enum.GetValues(typeof(DayOfWeek)))
                                {
                                    <option value="@day">@day</option>
                                }
                            </select>
                        </div>
                        <div class="form-group col">
                            <label>Start Time:</label>
                            <input class="form-control" type="time"
                                   value="@_newStartTime.ToString(@"hh\:mm")"
                                   @onchange="@(e => UpdateStartTime(e))" />
                        </div>
                        <div class="form-group col">
                            <label>End Time:</label>
                            <input class="form-control" type="time"
                                   value="@_newEndTime.ToString(@"hh\:mm")"
                                   @onchange="@(e => UpdateEndTime(e))" />
                        </div>
                        <div class="form-group col">
                            <label>Location:</label>
                            <input class="form-control" @bind="_newLocation" placeholder="Room/Location" />
                        </div>
                        <div class="form-group col-auto align-self-end">
                            <button type="button" class="btn btn-secondary" @onclick="AddTimeSlot">Add</button>
                        </div>
                    </div>

                    @if (_timeSlots.Count > 0)
                    {
                        <div class="schedule-list">
                            @foreach (var slot in _timeSlots)
                            {
                                <div class="schedule-item">
                                    <span>@slot.Day: @slot.StartTime.ToString(@"hh\:mm") - @slot.EndTime.ToString(@"hh\:mm") @slot.Location</span>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveTimeSlot(slot)">Remove</button>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelForm">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Save
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (_showDeleteConfirmation)
{
    <div class="modal-backdrop" @onclick="CancelDelete"></div>
    <div class="modal" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h2>Confirm Delete</h2>
            <button class="close-btn" @onclick="CancelDelete">&times;</button>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete the course <strong>@_courseToDelete?.Name</strong>?</p>
            <p>This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
            <button type="button" class="btn btn-danger" @onclick="DeleteCourse">Delete</button>
        </div>
    </div>
}
