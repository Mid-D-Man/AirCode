@page "/Admin/ManageCourses"
@using AirCode.Layout.AdminLayout.Superior
@using AirCode.Domain.Enums
@using AirCode.Components.SharedPrefabs.Cards
@using AirCode.Components.SharedPrefabs.Spinner
@using AirCode.Components.SharedPrefabs.Buttons
@using AirCode.Components.Admin.Superior
@using AirCode.Components.SharedPrefabs.Popups
@layout SuperiorAdminLayout

<div class="page-container bg-primary">
    <div class="page-header">
        <h1 class="text-primary">Manage Courses</h1>
        <CoolPrimaryButton Text="Add New Course" IsLoading="_isLoading" OnClick="ShowAddForm" />
    </div>

   

    <!-- Filters Section -->
    <div class="filter-section bg-secondary border-theme">
        <div class="filter-container">
            <div class="filter-item">
                <label for="searchTerm">Search:</label>
                <input id="searchTerm" class="form-control" @bind="_searchTerm" @bind:event="oninput" 
                       placeholder="Search by name or code..." />
            </div>

            <div class="filter-item">
                <label for="departmentFilter">Department:</label>
                <input id="departmentFilter" class="form-control" @bind="_filterDepartment" @bind:event="oninput" 
                       placeholder="Enter department code..." />
            </div>

            <div class="filter-item">
                <label for="levelFilter">Level:</label>
                <select id = "levelFilter" class="form-select" @bind="_filterLevel" @bind:after="OnFilterChanged">
                    @foreach (var level in Enum.GetValues(typeof(LevelType)))
                    {
                        <option value="@level">@level</option>
                    }
                </select>
            </div>

            <div class="filter-item">
                <label for="semesterFilter">Semester:</label>
                <select id="semesterFilter" class="form-control" @bind="_filterSemester" @bind:after="OnFilterChanged">
                    <option value="">All Semesters</option>
                    @foreach (var semester in Enum.GetValues(typeof(SemesterType)))
                    {
                        <option value="@semester">@semester</option>
                    }
                </select>
            </div>

            <button class="btn btn-secondary" @onclick="ApplyFilters" disabled="@_isLoading">
                Apply Filters
            </button>
            <button class="btn btn-outline-secondary" @onclick="ResetFilters" disabled="@_isLoading">
                Reset
            </button>
        </div>
    </div>

    <!-- Loading State -->
    @if (_isLoading && _loadingOperation == LoadingOperation.LoadingCourses)
    {
        <LoadingSpinner Title="Loading Courses" 
                       Subtitle="Please wait while we fetch all courses..." />
    }
    else if (FilteredCourses.Count == 0 && !_isLoading)
    {
        <div class="empty-state bg-secondary border-theme">
            <p>No courses found. Please add a new course or adjust your filters.</p>
        </div>
    }
    else if (!_isLoading)
    {
        <!-- Courses Grid -->
        <div class="card-grid">
            @foreach (var course in PaginatedCourses)
            {
                <CourseCard Course="course" 
                           OnEdit="ShowEditForm" 
                           OnDelete="ConfirmDelete" />
            }
        </div>

        <!-- Pagination -->
        @if (TotalPages > 1)
        {
            <div class="pagination-container">
                <div class="pagination">
                    <button class="pagination-btn" @onclick="() => ChangePage(1)" disabled="@(CurrentPage == 1)">
                        &laquo;
                    </button>
                    <button class="pagination-btn" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                        &lsaquo;
                    </button>

                    @for (int i = StartPage; i <= EndPage; i++)
                    {
                        var pageNumber = i;
                        <button class="pagination-btn @(pageNumber == CurrentPage ? "active" : "")" 
                                @onclick="() => ChangePage(pageNumber)">
                            @pageNumber
                        </button>
                    }

                    <button class="pagination-btn" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                        &rsaquo;
                    </button>
                    <button class="pagination-btn" @onclick="() => ChangePage(TotalPages)" disabled="@(CurrentPage == TotalPages)">
                        &raquo;
                    </button>
                </div>
                <div class="pagination-info">
                    Page @CurrentPage of @TotalPages (@FilteredCourses.Count total courses)
                </div>
            </div>
        }
    }
</div>
<!-- Notification Component -->
<NotificationComponent @ref="_notificationComponent"
                       Position="NotificationPosition.TopRight"
                       AutoDismissTime="2000" />
<!-- Course Handler Modal (Replaces both Add and Edit modals) -->
<CourseHandler IsVisible="_showCourseHandler"
               CourseToEdit="_selectedCourse"
               OnCourseSaved="HandleCourseSaved"
               OnClosed="HandleCourseHandlerClosed"
               OnShowNotification="HandleNotification" />

<!-- Delete Confirmation Popup -->
<AreYouSurePopup IsVisible="_showDeleteConfirmation"
                 IsLoading="_isDeleting"
                 Title="Delete Course"
                 Message="@($"Are you sure you want to delete the course '{_courseToDelete?.Name}'? This action cannot be undone.")"
                 WarningText="This will permanently remove the course and all associated data."
                 ConfirmButtonText="Delete Course"
                 ConfirmButtonClass="btn-danger"
                 LoadingTitle="Deleting Course"
                 LoadingSubtitle="Please wait while we remove the course..."
                 OnConfirm="DeleteCourse"
                 OnCancel="CancelDelete" />
