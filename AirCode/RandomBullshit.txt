//og from manual attendance popup
    public class SessionData
    {
        public string SessionId { get; set; } = string.Empty;
        public string CourseCode { get; set; } = string.Empty;
        public string CourseName { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public int Duration { get; set; }
    }
    
    //og from notification compo
    public enum NotificationType
    {
        Success,
        Error,
        Info,
        Warning
    }

    public enum NotificationPosition
    {
        TopRight,
        TopLeft,
        BottomRight,
        BottomLeft
    }
    
    //og from form feild
    
    
    public class ValidationEventArgs
    {
        public string Value { get; set; }
        public string FieldName { get; set; }
        public bool IsValid { get; set; } = true;
        public string ErrorMessage { get; set; } = string.Empty;
    }
    
    //og from attendance chart compo
      public class AttendanceChartData
        {
            public DateTime Date { get; set; }
            public double AttendanceRate { get; set; }
            public int PresentCount { get; set; }
            public int TotalCount { get; set; }
        }
        
        //og from info popup compo
         public enum InfoType
            {
                OfflineSync,
                TemporalKeyRefresh,
                RefreshInterval,
                SecurityFeatures,
                DeviceGuidCheck,
                OfflineStorage,
                SyncInterval
            }
            
            //og from pwa compo
            
    public class PWAStatus
    {
        public bool IsInstallable { get; set; }
        public bool IsInstalled { get; set; }
        public bool HasServiceWorker { get; set; }
        public bool UpdateAvailable { get; set; }
        public bool IsOnline { get; set; } = true;
        public bool IsChromiumBased { get; set; }
    }
    public class OfflineRoute
    {
        public string Url { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
    }
    
    //og from floating qr code compo
    
    
    public class FloatingSessionData
    {
        public string SessionId { get; set; }
        public string CourseName { get; set; }
        public string CourseId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public int Duration { get; set; }
        public string QrCodePayload { get; set; }
        public string Theme { get; set; }
        public bool UseTemporalKeyRefresh { get; set; }
        public AdvancedSecurityFeatures SecurityFeatures { get; set; } = AdvancedSecurityFeatures.Default;
        public string TemporalKey { get; set; } = string.Empty;
    }
    
    //from superior admin layout
    private class NavItemExtended
        {
            public string IconName { get; set; }
            public string Label { get; set; }
            public string? Path { get; set; }
            public bool RequiresOnline { get; set; }
            public string[] AllowedRoles { get; set; }
            public Action? Action { get; set; }
            public bool IsAvailable => true; // Can be extended for more complex logic
    
            public NavItemExtended(string iconName, string label, string? path, bool requiresOnline, string[] allowedRoles, Action? action = null)
            {
                IconName = iconName;
                Label = label;
                Path = path;
                RequiresOnline = requiresOnline;
                AllowedRoles = allowedRoles;
                Action = action;
            }
        }
        
        //from offline attendance event page
        
    // Helper classes for configuration
    private class OfflinePreferences
    {
        public int MaxStorageDays { get; set; } = 7;
        public int SyncIntervalMinutes { get; set; } = 15;
        public bool UseAdvancedEncryption { get; set; } = true;
        public int SessionDuration { get; set; } = 60;
    }
    
    //from reports page 
    
    // Firebase Data Models for Report Generation
    public class FirebaseAttendanceEvent
    {
        public string SessionId { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public int Duration { get; set; }
        public string Theme { get; set; } = string.Empty;
        public Dictionary<string, FirebaseAttendanceRecord> AttendanceRecords { get; set; } = new();
    }

    public class FirebaseAttendanceRecord
    {
        public string MatricNumber { get; set; } = string.Empty;
        public bool HasScannedAttendance { get; set; }
        public DateTime? ScanTime { get; set; }
        public bool IsOnlineScan { get; set; }
        public string? DeviceGUID { get; set; }
    }

    // Existing Report Data Models
    public class AttendanceReport
    {
        public string CourseCode { get; set; } = string.Empty;
        public LevelType CourseLevel { get; set; }
        public DateTime GeneratedAt { get; set; }
        public int TotalSessions { get; set; }
        public int TotalStudentsEnrolled { get; set; }
        public double AverageAttendancePercentage { get; set; }
        public int StudentsWithPerfectAttendance { get; set; }
        public int StudentsWithPoorAttendance { get; set; }
        public List<StudentAttendanceReport> StudentReports { get; set; } = new();
    }

    public class StudentAttendanceReport
    {
        public string MatricNumber { get; set; } = string.Empty;
        public LevelType StudentLevel { get; set; }
        public int TotalPresent { get; set; }
        public int TotalAbsent { get; set; }
        public double AttendancePercentage { get; set; }
        public List<SessionAttendanceRecord> SessionAttendance { get; set; } = new();
    }

    public class SessionAttendanceRecord
    {
        public string SessionId { get; set; } = string.Empty;
        public DateTime SessionDate { get; set; }
        public int Duration { get; set; }
        public bool IsPresent { get; set; }
        public DateTime? ScanTime { get; set; }
        public bool IsOnlineScan { get; set; }
        public string? DeviceGUID { get; set; }
    }
    
    //from standard admin dah board
    
    private class ActivityItem
    {
        public string Type { get; set; } = "";
        public string Title { get; set; } = "";
        public string CourseCode { get; set; } = "";
        public DateTime Time { get; set; }
        public CourseEnrollmentStatus Status { get; set; }
    }

    private class ScheduleItem
    {
        public string CourseCode { get; set; } = "";
        public string CourseName { get; set; } = "";
        public TimeSpan StartTime { get; set; }
        public TimeSpan EndTime { get; set; }
        public string Location { get; set; } = "";
    }
    
    //from manage academic sessions page,
       #region Form Models and Enums
            public class SessionFormModel
            {
                public short YearStart { get; set; }
                public short YearEnd { get; set; }
            }
            
            public class SemesterFormModel
            {
                public SemesterType Type { get; set; }
                public DateTime StartDate { get; set; }
                public DateTime EndDate { get; set; }
            }
            
            public enum ModalType
            {
                CreateSession,
                CreateSemester
            }
            #endregion
            //from manage courses page
            
private enum LoadingOperation
{
    LoadingCourses,
    SavingCourse,
    UpdatingCourse,
    DeletingCourse
}

//from manage users page

    #region Inner Classes
    private class Collections
    {
        public List<StudentSkeletonUser> Students { get; } = new();
        public List<LecturerSkeletonUser> Lecturers { get; } = new();
        public List<CourseRepSkeletonUser> CourseReps { get; } = new();
    }
    
    private class PaginationState
    {
        public int StudentsCurrentPage { get; set; } = 1;
        public int LecturersCurrentPage { get; set; } = 1;
        public int CourseRepsCurrentPage { get; set; } = 1;
        
        public void ResetAllPages()
        {
            StudentsCurrentPage = 1;
            LecturersCurrentPage = 1;
            CourseRepsCurrentPage = 1;
        }
    }
    #endregion
    //from superior admin dahboard
    
    // Data models
    private class AcademicSessionSummary
    {
        public string Name { get; set; } = "";
        public string Status { get; set; } = "";
        public bool IsActive { get; set; }
        public int StudentCount { get; set; }
    }

    private class SystemAlert
    {
        public string Title { get; set; } = "";
        public string Severity { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    private class AdminActivity
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Type { get; set; } = "";
        public string User { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
    
    //from client stats page
    

    // Enhanced CourseAttendanceStats class
    public class CourseAttendanceStats
    {
        public string CourseCode { get; set; }
        public string CourseName { get; set; }
        public string DepartmentId { get; set; }
        public LevelType Level { get; set; }
        public SemesterType Semester { get; set; }
        public byte CreditUnits { get; set; }
        public double AttendancePercentage { get; set; }
        public int ClassesAttended { get; set; }
        public int TotalClasses { get; set; }
        public int TotalAbsences { get; set; }
        public int ConsecutiveAbsences { get; set; }
        public DateTime? LastAttendanceDate { get; set; }
        public bool IsCarryOver { get; set; }
    }

    // AttendanceRecord class
    public class AttendanceRecord
    {
        public string CourseCode { get; set; }
        public string StudentMatric { get; set; }
        public DateTime Date { get; set; }
        public bool IsPresent { get; set; }
        public DateTime RecordedAt { get; set; }
        public string RecordedBy { get; set; }
    }
    
    //from academic session service
    
    #region Result Models
    public class SessionTransitionResult
    {
        public bool HasPendingTransitions { get; set; }
        public List<SessionEndEvent> EndedSessions { get; set; } = new();
        public List<SemesterEndEvent> EndedSemesters { get; set; } = new();
        public List<SessionStartEvent> StartedSessions { get; set; } = new();
        public List<SemesterStartEvent> StartedSemesters { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
        public List<string> Errors { get; set; } = new();
        public DateTime ProcessedAt { get; set; }
        public string ProcessedBy { get; set; }
    }

    public class SessionOverlapResult
    {
        public bool HasOverlap { get; set; }
        public AcademicSession OverlappingSession { get; set; }
        public AcademicSession NewSession { get; set; }
        public OverlapResolutionAction RecommendedAction { get; set; }
        public string Resolution { get; set; }
    }

    public class SystemValidationResult
    {
        public bool IsValid { get; set; }
        public List<string> Issues { get; set; } = new();
        public List<string> Warnings { get; set; } = new();
        public SystemHealthStatus HealthStatus { get; set; }
    }

    public class SessionHealthReport
    {
        public int TotalSessions { get; set; }
        public int ActiveSessions { get; set; }
        public int ArchivedSessions { get; set; }
        public int PendingSessions { get; set; }
        public List<SessionIssue> Issues { get; set; } = new();
        public DateTime LastChecked { get; set; }
        public SystemHealthStatus OverallHealth { get; set; }
    }

    public class SessionIssue
    {
        public string SessionId { get; set; }
        public IssueType Type { get; set; }
        public string Description { get; set; }
        public IssueSeverity Severity { get; set; }
        public DateTime DetectedAt { get; set; }
    }
    #endregion

    #region Event Models
    public class SessionEndEvent
    {
        public AcademicSession Session { get; set; }
        public DateTime ActualEndDate { get; set; }
        public DateTime ProcessedAt { get; set; }
        public string ProcessedBy { get; set; }
        public SessionEndReason Reason { get; set; }
        public bool WasDelayed { get; set; }
        public TimeSpan DelayDuration { get; set; }
    }

    public class SemesterEndEvent
    {
        public Semester Semester { get; set; }
        public string SessionId { get; set; }
        public DateTime ActualEndDate { get; set; }
        public DateTime ProcessedAt { get; set; }
        public string ProcessedBy { get; set; }
        public SemesterEndReason Reason { get; set; }
        public bool WasDelayed { get; set; }
        public TimeSpan DelayDuration { get; set; }
    }

    public class SessionStartEvent
    {
        public AcademicSession Session { get; set; }
        public DateTime ActualStartDate { get; set; }
        public DateTime ProcessedAt { get; set; }
        public string ProcessedBy { get; set; }
        public SessionStartReason Reason { get; set; }
        public bool WasDelayed { get; set; }
        public TimeSpan DelayDuration { get; set; }
    }

    public class SemesterStartEvent
    {
        public Semester Semester { get; set; }
        public string SessionId { get; set; }
        public DateTime ActualStartDate { get; set; }
        public DateTime ProcessedAt { get; set; }
        public string ProcessedBy { get; set; }
        public SemesterStartReason Reason { get; set; }
        public bool WasDelayed { get; set; }
        public TimeSpan DelayDuration { get; set; }
    }
    #endregion

    #region Enums
    public enum TransitionType
    {
        SessionStart,
        SessionEnd,
        SemesterStart,
        SemesterEnd
    }

    public enum OverlapResolutionAction
    {
        ExtendOldSession,
        TruncateOldSession,
        DelayNewSession,
        ManualReview
    }

    public enum SystemHealthStatus
    {
        Healthy,
        Warning,
        Error,
        Critical
    }

    public enum IssueType
    {
        MissingSession,
        OverlappingSessions,
        InvalidDates,
        OrphanedSemester,
        InconsistentData,
        MissingData
    }

    public enum IssueSeverity
    {
        Info,
        Warning,
        Error,
        Critical
    }

    public enum SessionEndReason
    {
        NaturalExpiry,
        ManualTermination,
        SystemCleanup,
        ErrorCorrection
    }

    public enum SemesterEndReason
    {
        NaturalExpiry,
        ManualTermination,
        SystemCleanup,
        ErrorCorrection
    }

    public enum SessionStartReason
    {
        ScheduledStart,
        ManualActivation,
        SystemTransition,
        ErrorCorrection
    }

    public enum SemesterStartReason
    {
        ScheduledStart,
        ManualActivation,
        SystemTransition,
        ErrorCorrection
    }
    #endregion
    //from session state service
    
    /// <summary>
    /// Simplified session data for persistence
    /// </summary>
    public class PersistentSessionData
    {
        public string SessionId { get; set; }
        public string CourseId { get; set; }
        public string CourseName { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public int Duration { get; set; }
        public DateTime CreatedAt { get; set; }
        public string QrCodePayload { get; set; }
        public string Theme { get; set; }
        public bool UseTemporalKeyRefresh { get; set; }
        public AdvancedSecurityFeatures SecurityFeatures { get; set; }
        public string TemporalKey { get; set; }
    }

    // Existing classes remain unchanged
    public class ActiveSessionData
    {
        public string SessionId { get; set; }
        public string CourseName { get; set; }
        public string CourseCode { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public int Duration { get; set; }
        public string QrCodePayload { get; set; }
        public string Theme { get; set; }
        public bool UseTemporalKeyRefresh { get; set; }
        public bool OfflineSyncEnabled { get; set; } = true;
        public AdvancedSecurityFeatures SecurityFeatures { get; set; } = AdvancedSecurityFeatures.Default;
        public string TemporalKey { get; set; } = string.Empty;
    }

    public class SessionData
    {
        public string SessionId { get; set; } = Guid.NewGuid().ToString("N");
        public string CourseName { get; set; }
        public string CourseCode { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime Date { get; set; }
        public int Duration { get; set; }
        public string LectureId { get; set; }
    }
    
    //from offline credentials service interface
    
/// <summary>
/// Enhanced user credentials model with role-specific data
/// </summary>
public class OfflineUserCredentials
{
    public string UserId { get; set; }
    public string Role { get; set; }
    public DateTime IssuedAt { get; set; }
    public DateTime ExpiresAt { get; set; }
    public string DeviceGuid { get; set; }
    
    // Role-specific properties
    public string LecturerId { get; set; } // For LecturerAdmin role
    public string MatricNumber { get; set; } // For Student/CourseRepAdmin roles
}
//from connectivity service


// Supporting classes
public class ConnectivityStatus
{
    public bool IsOnline { get; set; }
    public string NetworkQuality { get; set; } = "unknown";
    public string ConnectionStability { get; set; } = "unknown";
    public DateTime? LastOnlineTime { get; set; }
}

public class ConnectivityReport : ConnectivityStatus
{
    public bool HasConnection { get; set; }
    public List<bool> ConnectionHistory { get; set; } = new();
    public ConnectionInfo? ConnectionInfo { get; set; }
}

public class ConnectionInfo
{
    public string? EffectiveType { get; set; }
    public double? Downlink { get; set; }
    public int? Rtt { get; set; }
    public bool SaveData { get; set; }
}

//from course service

    // Firestore model for serialization
    public class CourseFirestoreModel
    {
        [JsonProperty("courseCode")]
        public string CourseCode { get; set; }
    
        [JsonProperty("name")]
        public string Name { get; set; }
    
        [JsonProperty("departmentId")]
        public string DepartmentId { get; set; }
    
        [JsonProperty("semester")]
        [JsonConverter(typeof(StringEnumConverter))]
        public SemesterType Semester { get; set; }
    
        [JsonProperty("creditUnits")]
        public byte CreditUnits { get; set; }
    
        [JsonProperty("schedule")]
        public List<CourseScheduleFirestoreModel> Schedule { get; set; }
    
        [JsonProperty("lecturerIds")]
        public List<string> LecturerIds { get; set; }
    
        [JsonProperty("lastModified")]
        [JsonConverter(typeof(IsoDateTimeConverter))]
        public DateTime LastModified { get; set; }
    
        [JsonProperty("modifiedBy")]
        public string ModifiedBy { get; set; }
    }

    public class CourseScheduleFirestoreModel
    {
        [JsonProperty("day")]
        [JsonConverter(typeof(StringEnumConverter))]
        public DayOfWeek Day { get; set; }
    
        [JsonProperty("startTime")]
        public string StartTime { get; set; }
    
        [JsonProperty("endTime")]
        public string EndTime { get; set; }
    
        [JsonProperty("location")]
        public string Location { get; set; }
    }
    
    //from department service
    
// Helper class to match Firebase document structure
public class DepartmentsContainer
{
    public List<Domain.Entities.Department> Departments { get; set; } = new();
    public DateTime LastModified { get; set; }
    public string ModifiedBy { get; set; } = string.Empty;
}

//from firbase notification service

    // Data models
    public record FirestoreListener(
        string Id,
        string Type,
        string Collection,
        string? DocumentId,
        string? WhereField,
        object? WhereValue,
        DateTime CreatedAt
    );

    public record DocumentChangeData(
        string ListenerId,
        string Collection,
        string DocumentId,
        bool Exists,
        JsonElement? Data,
        DateTime Timestamp
    );

    public record CollectionChangeData(
        string ListenerId,
        string Collection,
        List<DocumentChange> Changes,
        int Size,
        DateTime Timestamp
    );

    public record DocumentChange(
        string Type,
        JsonElement Document,
        int OldIndex,
        int NewIndex
    );

    public record ListenerErrorData(
        string ListenerId,
        string Error,
        DateTime Timestamp
    );

    // Event argument classes
    public class DocumentChangedEventArgs : EventArgs
    {
        public DocumentChangeData Data { get; }
        public DocumentChangedEventArgs(DocumentChangeData data) => Data = data;
    }

    public class CollectionChangedEventArgs : EventArgs
    {
        public CollectionChangeData Data { get; }
        public CollectionChangedEventArgs(CollectionChangeData data) => Data = data;
    }

    public class AttendanceSessionChangedEventArgs : EventArgs
    {
        public DocumentChangeData Data { get; }
        public AttendanceSessionChangedEventArgs(DocumentChangeData data) => Data = data;
    }

    public class ActiveSessionsChangedEventArgs : EventArgs
    {
        public CollectionChangeData Data { get; }
        public ActiveSessionsChangedEventArgs(CollectionChangeData data) => Data = data;
    }

    public class ListenerErrorEventArgs : EventArgs
    {
        public ListenerErrorData Data { get; }
        public ListenerErrorEventArgs(ListenerErrorData data) => Data = data;
    }
    
    from firestore service
     
        // ==================== DATA MODELS ====================
    
        private class DocumentSizeInfo
        {
            public int EstimatedSize { get; set; }
            public int FieldCount { get; set; }
            public bool Exists { get; set; }
        }
        
        //from search context service interface
        
/// <summary>
/// Represents a search suggestion
/// </summary>
public class SearchSuggestion
{
    public string Text { get; set; }
    public string Context { get; set; }
    public string Url { get; set; }
    public string IconPath { get; set; }
    public int Priority { get; set; } = 0;
}

/// <summary>
/// Represents a search result
/// </summary>
public class SearchResult
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string Url { get; set; }
    public string Context { get; set; }
    public string IconPath { get; set; }
    public double Relevance { get; set; }
}

/// <summary>
/// Provides context-specific search functionality
/// </summary>
public interface ISearchContextProvider
{
    string Context { get; }
    Task<List<SearchSuggestion>> GetSuggestionsAsync(string searchTerm, int maxResults);
    Task<List<SearchResult>> SearchAsync(string searchTerm, int maxResults);
}

//from supabase edge function service

    
    // Response model for server time
    public class ServerTimeResponse
    {
        public object Time { get; set; }
    }
    // Response Models remain the same
    public class AttendanceProcessingResult
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public string ErrorCode { get; set; } = string.Empty; // Add this property
        public string ErrorDetails { get; set; } = string.Empty;
        public QRCodePayloadData SessionData { get; set; }
        public AttendanceRecord ProcessedAttendance { get; set; }

        public override string ToString()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });
        }
    }

    public class QRValidationResult
    {
        public bool IsValid { get; set; }
        public string Message { get; set; } = string.Empty;
        public QRCodePayloadData SessionData { get; set; }
        public DateTime? ExpirationTime { get; set; }
        public bool IsExpired { get; set; }
        
        public override string ToString()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });
        }
    }


// Add response models to match Edge function structure
    public class EdgeFunctionResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public string ErrorCode { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
        public EdgeSessionData SessionData { get; set; }
        public EdgeProcessedAttendance ProcessedAttendance { get; set; }
    }

    public class EdgeSessionData
    {
        public string SessionId { get; set; } = string.Empty;
        public string CourseCode { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
    }

    public class EdgeProcessedAttendance
    {
        public string MatricNumber { get; set; } = string.Empty;
        public DateTime ScannedAt { get; set; }
        public bool IsOnlineScan { get; set; }
    }
    public class CatResponse
    {
        public string ImageUrl { get; set; } = string.Empty;
    }
    
    //from svg icon service
    
    public class SvgOptions
    {
        public string Color { get; set; } = "#000000";
        public int Width { get; set; } = 24;
        public int Height { get; set; } = 24;
        public string StrokeWidth { get; set; } = "1";
        public string Fill { get; set; } = "currentColor";
        public Dictionary<string, string> CustomAttributes { get; set; } = new Dictionary<string, string>();
    }