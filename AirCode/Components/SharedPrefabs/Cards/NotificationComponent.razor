@using System.Timers
@implements IDisposable

<div class="notification-container @_positionClass">
    @foreach (var notification in _notifications)
    {
        <div class="notification @notification.Type.ToString().ToLower()" @key="notification.Id">
            <div class="notification-content">
                <div class="notification-icon">
                    @switch (notification.Type)
                    {
                        case NotificationType.Success:
                            <i class="fas fa-check-circle"></i>
                            break;
                        case NotificationType.Error:
                            <i class="fas fa-exclamation-circle"></i>
                            break;
                        case NotificationType.Info:
                            <i class="fas fa-info-circle"></i>
                            break;
                        case NotificationType.Warning:
                            <i class="fas fa-exclamation-triangle"></i>
                            break;
                    }
                </div>
                <div class="notification-message">@notification.Message</div>
            </div>
            <button class="notification-close" @onclick="() => RemoveNotification(notification.Id)">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>

@code {
    private List<NotificationItem> _notifications = new();
    private string _positionClass = "top-right";
    private Timer _timer;

    [Parameter]
    public NotificationPosition Position { get; set; } = NotificationPosition.TopRight;

    [Parameter]
    public int AutoDismissTime { get; set; } = 5000; // time in milliseconds

    protected override void OnInitialized()
    {
        _positionClass = Position switch
        {
            NotificationPosition.TopRight => "top-right",
            NotificationPosition.TopLeft => "top-left",
            NotificationPosition.BottomRight => "bottom-right",
            NotificationPosition.BottomLeft => "bottom-left",
            _ => "top-right"
        };

        _timer = new Timer(500);
        _timer.Elapsed += CheckNotificationsExpiry;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    public void ShowNotification(string message, NotificationType type = NotificationType.Info)
    {
        var notification = new NotificationItem
        {
            Id = Guid.NewGuid(),
            Message = message,
            Type = type,
            CreatedAt = DateTime.Now
        };

        _notifications.Add(notification);
        StateHasChanged();
    }

    public void ShowSuccess(string message) => ShowNotification(message, NotificationType.Success);

    public void ShowError(string message) => ShowNotification(message, NotificationType.Error);

    public void ShowInfo(string message) => ShowNotification(message, NotificationType.Info);

    public void ShowWarning(string message) => ShowNotification(message, NotificationType.Warning);

    private void RemoveNotification(Guid id)
    {
        var notification = _notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            _notifications.Remove(notification);
            StateHasChanged();
        }
    }

    private void CheckNotificationsExpiry(object sender, ElapsedEventArgs e)
    {
        var now = DateTime.Now;
        var expiredNotifications = _notifications
            .Where(n => (now - n.CreatedAt).TotalMilliseconds > AutoDismissTime)
            .ToList();

        if (expiredNotifications.Any())
        {
            foreach (var notification in expiredNotifications)
            {
                _notifications.Remove(notification);
            }

            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    public class NotificationItem
    {
        public Guid Id { get; set; }
        public string Message { get; set; }
        public NotificationType Type { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public enum NotificationType
    {
        Success,
        Error,
        Info,
        Warning
    }

    public enum NotificationPosition
    {
        TopRight,
        TopLeft,
        BottomRight,
        BottomLeft
    }
}