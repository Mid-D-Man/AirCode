@using System.Timers
@implements IDisposable

<div class="notification-container @_positionClass">
    @foreach (var notification in _notifications)
    {
        <div class="notification @notification.Type.ToString().ToLower() @(notification.IsRemoving ? "removing" : "")"
             @key="@GetNotificationKey(notification.Id)"
             @onanimationend="@(() => OnAnimationEnd(notification))"
             style="--notification-duration: @(notification.Duration)ms">
            <div class="notification-content">
                <div class="notification-icon">
                    @switch (notification.Type)
                    {
                        case NotificationType.Success:
                            <i class="fas fa-check-circle"></i>
                            break;
                        case NotificationType.Error:
                            <i class="fas fa-exclamation-circle"></i>
                            break;
                        case NotificationType.Info:
                            <i class="fas fa-info-circle"></i>
                            break;
                        case NotificationType.Warning:
                            <i class="fas fa-exclamation-triangle"></i>
                            break;
                    }
                </div>
                <div class="notification-message">
                    @if (notification.IsHtml)
                    {
                        @((MarkupString)notification.Message)
                    }
                    else
                    {
                        @notification.Message
                    }
                </div>
            </div>
            <button class="notification-close" 
                    @onclick="() => RemoveNotification(notification.Id)"
                    @onclick:stopPropagation="true"
                    aria-label="Close notification"
                    title="Close notification">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>

@code {
    private List<NotificationItem> _notifications = new();
    private string _positionClass = "top-right";
    private Timer _timer;
    private readonly object _lockObject = new();

    [Parameter]
    public NotificationPosition Position { get; set; } = NotificationPosition.TopRight;

    [Parameter]
    public int AutoDismissTime { get; set; } = 5000;

    [Parameter]
    public int MaxNotifications { get; set; } = 5;

    [Parameter]
    public bool EnableProgressBar { get; set; } = true;

    [Parameter]
    public bool EnableSound { get; set; } = false;

    protected override void OnInitialized()
    {
        _positionClass = Position switch
        {
            NotificationPosition.TopRight => "top-right",
            NotificationPosition.TopLeft => "top-left",
            NotificationPosition.BottomRight => "bottom-right",
            NotificationPosition.BottomLeft => "bottom-left",
            _ => "top-right"
        };

        _timer = new Timer(100);
        _timer.Elapsed += CheckNotificationsExpiry;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private string GetNotificationKey(Guid id)
    {
        // Ensure key starts with letter and contains only valid characters
        return $"notif_{id:N}";
    }

    public void ShowNotification(string message, NotificationType type = NotificationType.Info, int? customDuration = null, bool isHtml = false)
    {
        lock (_lockObject)
        {
            while (_notifications.Count >= MaxNotifications)
            {
                var oldest = _notifications.FirstOrDefault(n => !n.IsRemoving);
                if (oldest != null)
                {
                    RemoveNotificationInternal(oldest.Id);
                }
                else
                {
                    break;
                }
            }

            var notification = new NotificationItem
            {
                Id = Guid.NewGuid(),
                Message = message,
                Type = type,
                CreatedAt = DateTime.Now,
                Duration = customDuration ?? AutoDismissTime,
                IsRemoving = false,
                IsHtml = isHtml
            };

            _notifications.Add(notification);
        }

        InvokeAsync(StateHasChanged);

        if (EnableSound)
        {
            PlayNotificationSound(type);
        }
    }

    public void ShowSuccess(string message, int? duration = null, bool isHtml = false) 
        => ShowNotification(message, NotificationType.Success, duration, isHtml);

    public void ShowError(string message, int? duration = null, bool isHtml = false) 
        => ShowNotification(message, NotificationType.Error, duration, isHtml);

    public void ShowInfo(string message, int? duration = null, bool isHtml = false) 
        => ShowNotification(message, NotificationType.Info, duration, isHtml);

    public void ShowWarning(string message, int? duration = null, bool isHtml = false) 
        => ShowNotification(message, NotificationType.Warning, duration, isHtml);

    private async Task RemoveNotification(Guid id)
    {
        var notification = _notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null && !notification.IsRemoving)
        {
            notification.IsRemoving = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void RemoveNotificationInternal(Guid id)
    {
        var notification = _notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null && !notification.IsRemoving)
        {
            notification.IsRemoving = true;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnAnimationEnd(NotificationItem notification)
    {
        if (notification.IsRemoving)
        {
            lock (_lockObject)
            {
                _notifications.Remove(notification);
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CheckNotificationsExpiry(object sender, ElapsedEventArgs e)
    {
        var now = DateTime.Now;
        var expiredNotifications = new List<NotificationItem>();

        lock (_lockObject)
        {
            expiredNotifications = _notifications
                .Where(n => !n.IsRemoving && (now - n.CreatedAt).TotalMilliseconds > n.Duration)
                .ToList();
        }

        if (expiredNotifications.Any())
        {
            foreach (var notification in expiredNotifications)
            {
                RemoveNotificationInternal(notification.Id);
            }
        }
    }

    private void PlayNotificationSound(NotificationType type)
    {
        // Implement sound playing logic here if needed
    }

    public void ClearAll()
    {
        lock (_lockObject)
        {
            foreach (var notification in _notifications.Where(n => !n.IsRemoving))
            {
                notification.IsRemoving = true;
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    public class NotificationItem
    {
        public Guid Id { get; set; }
        public string Message { get; set; } = string.Empty;
        public NotificationType Type { get; set; }
        public DateTime CreatedAt { get; set; }
        public int Duration { get; set; } = 5000;
        public bool IsRemoving { get; set; } = false;
        public bool IsHtml { get; set; } = false;
    }

    public enum NotificationType
    {
        Success,
        Error,
        Info,
        Warning
    }

    public enum NotificationPosition
    {
        TopRight,
        TopLeft,
        BottomRight,
        BottomLeft
    }
}