@using ReactorBlazorQRCodeScanner
@inject IJSRuntime JSRuntime

<div class="qr-scanner-container">
    @if (isActive)
    {
        <QRCodeScanner ShowOutput="@showScannerOutput" Width="100%" />
    }
    else
    {
        <div class="scanner-placeholder">
            <div class="scanner-icon">
                <i class="oi oi-target"></i>
            </div>
            <p>Click to start scanning</p>
            <button class="start-scanner-btn" @onclick="StartScanner">
                <i class="oi oi-play-circle"></i> Start Scanner
            </button>
        </div>
    }

    @if (isActive)
    {
        <div class="scanner-controls">
            <button class="control-btn" @onclick="StopScanner">
                <i class="oi oi-media-stop"></i> Stop
            </button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="scanner-error">
            <i class="oi oi-warning"></i>
            <span>@errorMessage</span>
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<string> OnScanResult { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }
    [Parameter] public int ScanDelay { get; set; } = 300;
    [Parameter] public string PreferredCamera { get; set; } = "environment";
    [Parameter] public bool AutoStart { get; set; } = true;

    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private bool isActive = false;
    private bool showScannerOutput = true;
    private string errorMessage = "";
    private string lastScannedCode = "";

    protected override async Task OnInitializedAsync()
    {
        _onQrCodeScanAction = (code) => OnQrCodeScan(code);
        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JSRuntime);

        if (AutoStart)
        {
            await StartScanner();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoStart)
        {
            try
            {
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to initialize scanner: {ex.Message}";
                await HandleScanError(errorMessage);
                StateHasChanged();
            }
        }
    }

    private async Task StartScanner()
    {
        try
        {
            errorMessage = "";
            isActive = true;
            
            if (_qrCodeScannerJsInterop != null)
            {
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to start scanner: {ex.Message}";
            isActive = false;
            await HandleScanError(errorMessage);
            StateHasChanged();
        }
    }

    private async Task StopScanner()
    {
        try
        {
            if (_qrCodeScannerJsInterop != null && isActive)
            {
                await _qrCodeScannerJsInterop.StopRecording();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error stopping scanner: {ex.Message}";
            await HandleScanError(errorMessage);
        }
        finally
        {
            isActive = false;
            errorMessage = "";
            StateHasChanged();
        }
    }

    private async void OnQrCodeScan(string code)
    {
        if (!string.IsNullOrEmpty(code) && code != lastScannedCode)
        {
            lastScannedCode = code;
            
            // Pause scanning to prevent multiple detections
            await PauseScanning();
            
            // Invoke the callback
            if (OnScanResult.HasDelegate)
            {
                await InvokeAsync(async () => await OnScanResult.InvokeAsync(code));
            }
        }
    }

    private async Task PauseScanning()
    {
        if (_qrCodeScannerJsInterop != null && isActive)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
                isActive = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to pause scanner: {ex.Message}";
                await HandleScanError(errorMessage);
            }
        }
    }

    public async Task ResumeScanning()
    {
        if (_qrCodeScannerJsInterop != null && !isActive)
        {
            try
            {
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
                isActive = true;
                errorMessage = "";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to resume scanner: {ex.Message}";
                await HandleScanError(errorMessage);
            }
        }
    }

    private async Task HandleScanError(string error)
    {
        if (OnError.HasDelegate)
        {
            await OnError.InvokeAsync(error);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_qrCodeScannerJsInterop != null && isActive)
        {
            try
            {
                await _qrCodeScannerJsInterop.StopRecording();
            }
            catch
            {
                // Ignore disposal errors
            }
        }
    }
}