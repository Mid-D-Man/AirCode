@inject IJSRuntime JSRuntime

<div class="qr-scanner-container">
    @if (isActive)
    {
        <div class="video-container">
            <video id="@videoElementId" autoplay playsinline muted style="width: 100%; height: auto;"></video>
            <canvas id="@canvasElementId" style="display: none;"></canvas>
        </div>
    }
    else
    {
        <div class="scanner-placeholder">
            <div class="scanner-icon">
                <i class="oi oi-target"></i>
            </div>
            <p>Click to start scanning</p>
            <button class="start-scanner-btn" @onclick="StartScanner">
                <i class="oi oi-play-circle"></i> Start Scanner
            </button>
        </div>
    }

    @if (isActive)
    {
        <div class="scanner-controls">
            <button class="control-btn" @onclick="StopScanner">
                <i class="oi oi-media-stop"></i> Stop
            </button>
            <button class="control-btn" @onclick="SwitchCamera">
                <i class="oi oi-loop-circular"></i> Switch Camera
            </button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="scanner-error">
            <i class="oi oi-warning"></i>
            <span>@errorMessage</span>
        </div>
    }
</div>

@code {
    //dosent work delete latter
    [Parameter] public EventCallback<string> OnScanResult { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }
    [Parameter] public int ScanDelay { get; set; } = 300;
    [Parameter] public string PreferredCamera { get; set; } = "environment";
    [Parameter] public bool AutoStart { get; set; } = true;

    private IJSObjectReference? cameraModule;
    private DotNetObjectReference<BasicQRCodeScanner>? dotNetRef;
    private bool isActive = false;
    private string errorMessage = "";
    private string lastScannedCode = "";
    private readonly string videoElementId = $"video_{Guid.NewGuid():N}";
    private readonly string canvasElementId = $"canvas_{Guid.NewGuid():N}";

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        
        if (AutoStart)
        {
            // Delay auto-start to ensure DOM is ready
            await Task.Delay(100);
            await StartScanner();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Load jsQR library if not already loaded
                await JSRuntime.InvokeVoidAsync("eval", @"
                    if (!window.jsQR) {
                        const script = document.createElement('script');
                        script.src = 'https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js';
                        document.head.appendChild(script);
                    }
                ");
                
                // Load our camera utility
                cameraModule = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", @"
                    (function() {
                        if (window.CameraUtil) {
                            return { 
                                instance: new window.CameraUtil(),
                                available: true 
                            };
                        }
                        return { available: false };
                    })()
                ");
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to initialize camera module: {ex.Message}";
                await HandleScanError(errorMessage);
                StateHasChanged();
            }
        }
    }

    private async Task StartScanner()
    {
        try
        {
            errorMessage = "";
            isActive = true;
            StateHasChanged();
            
            // Wait for DOM update
            await Task.Delay(50);
            
            await JSRuntime.InvokeVoidAsync("eval", $@"
                (async function() {{
                    try {{
                        const cameraUtil = new window.CameraUtil();
                        window.currentCameraUtil = cameraUtil;
                        
                        await cameraUtil.initialize(
                            '{videoElementId}',
                            '{canvasElementId}',
                            function(qrData) {{
                                DotNet.invokeMethodAsync('AirCode', 'OnQrCodeDetected', '{dotNetRef?.Value}', qrData);
                            }},
                            {{
                                scanDelay: {ScanDelay},
                                preferredCamera: '{PreferredCamera}'
                            }}
                        );
                        
                        cameraUtil.startScanning();
                    }} catch (error) {{
                        console.error('Scanner start error:', error);
                        DotNet.invokeMethodAsync('AirCode', 'OnScanError', '{dotNetRef?.Value}', error.message);
                    }}
                }})();
            ");
        }
        catch (Exception ex)
        {
            errorMessage = $"Scanner initialization failed: {ex.Message}";
            isActive = false;
            await HandleScanError(errorMessage);
            StateHasChanged();
        }
    }

    private async Task StopScanner()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.currentCameraUtil) {
                    window.currentCameraUtil.cleanup();
                    window.currentCameraUtil = null;
                }
            ");
        }
        catch (Exception ex)
        {
            errorMessage = $"Scanner cleanup error: {ex.Message}";
            await HandleScanError(errorMessage);
        }
        finally
        {
            isActive = false;
            errorMessage = "";
            StateHasChanged();
        }
    }

    private async Task SwitchCamera()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.currentCameraUtil) {
                    window.currentCameraUtil.switchCamera();
                }
            ");
        }
        catch (Exception ex)
        {
            errorMessage = $"Camera switch failed: {ex.Message}";
            await HandleScanError(errorMessage);
        }
    }

    [JSInvokable]
    public async Task OnQrCodeDetected(string qrData)
    {
        if (!string.IsNullOrEmpty(qrData) && qrData != lastScannedCode)
        {
            lastScannedCode = qrData;
            
            // Pause scanning to prevent duplicates
            await PauseScanning();
            
            // Invoke callback
            if (OnScanResult.HasDelegate)
            {
                await OnScanResult.InvokeAsync(qrData);
            }
        }
    }

    [JSInvokable]
    public async Task OnScanError(string error)
    {
        await HandleScanError(error);
    }

    private async Task PauseScanning()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.currentCameraUtil) {
                    window.currentCameraUtil.stopScanning();
                }
            ");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Pause scanning failed: {ex.Message}";
            await HandleScanError(errorMessage);
        }
    }

    public async Task ResumeScanning()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.currentCameraUtil) {
                    window.currentCameraUtil.startScanning();
                }
            ");
            errorMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Resume scanning failed: {ex.Message}";
            await HandleScanError(errorMessage);
        }
    }

    private async Task HandleScanError(string error)
    {
        if (OnError.HasDelegate)
        {
            await OnError.InvokeAsync(error);
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.currentCameraUtil) {
                    window.currentCameraUtil.cleanup();
                    window.currentCameraUtil = null;
                }
            ");
        }
        catch
        {
            // Ignore disposal errors
        }
        
        dotNetRef?.Dispose();
    }
}