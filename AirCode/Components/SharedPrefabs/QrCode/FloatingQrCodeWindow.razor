@using AirCode.Components.SharedPrefabs.QrCode
@using AirCode.Domain.Entities
@using AirCode.Models.QRCode 
@using AirCode.Utilities.DataStructures
@using AirCode.Utilities.HelperScripts
@inject IJSRuntime JS

@if (IsVisible && SessionData != null)
{
    <div class="floating-qr-overlay" @onclick="HandleOverlayClick">
        <div @ref="windowElement" class="floating-qr-window @(isFullscreen ? "fullscreen" : "")" @onclick:stopPropagation="true" style="@WindowStyle">
            <div class="floating-qr-header" @ref="headerElement">
                <div class="drag-handle">
                    <span>QR Code - @SessionData.CourseName</span>
                </div>
                <div class="header-actions">
                    <button class="fullscreen-button" @onclick="ToggleFullscreen" title="@(isFullscreen ? "Exit Fullscreen" : "Fullscreen")">
                        @if (isFullscreen)
                        {
                            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"/>
                            </svg>
                        }
                        else
                        {
                            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>
                            </svg>
                        }
                    </button>
                    <button class="close-button" @onclick="CloseWindow">Ã—</button>
                </div>
            </div>
            <div class="floating-qr-content">
                <div class="floating-countdown">
                    Expires in: @FormatTimeRemaining()
                </div>
                <QRCodeCompo 
                    SessionId="@SessionData.SessionId"
                    CourseCode="@SessionData.CourseCode" 
                    StartTime="@SessionData.StartTime"
                    Duration="@SessionData.Duration" 
                    Theme="@ConvertStringToTheme(SessionData.Theme)" 
                    Options="@GenerateQRCodeOptions()" />
            </div>
        </div>
    </div>
}

@code {
    //im having second thoughts about this
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public SessionData SessionData { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    
    private ElementReference windowElement;
    private ElementReference headerElement;
    private string WindowStyle = "top: 50px; left: 50px;";
    private System.Threading.Timer countdownTimer;
    private bool isFullscreen = false;
    private string previousWindowStyle = "";
    private string componentId;
    private IJSObjectReference jsModule;
    private DotNetObjectReference<FloatingQrCodeWindow> dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsVisible)
        {
            try
            {
                // Direct function import - no module wrapper
                componentId = await JS.InvokeAsync<string>("registerComponent", 
                    DotNetObjectReference.Create(this), windowElement);
            }
            catch (Exception ex)
            {
                await MID_HelperFunctions.DebugMessageAsync($"Drag init failed: {ex.Message}", DebugClass.Exception);
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (IsVisible && SessionData != null)
        {
            StartCountdownTimer();
        }
        else
        {
            StopCountdownTimer();
        }
    }

    private async Task InitializeDragFunctionality()
    {
        if (jsModule != null && windowElement.Context != null)
        {
            try
            {
                // Register component with the JavaScript drag system
                componentId = await jsModule.InvokeAsync<string>("registerComponent", 
                    dotNetRef, windowElement);
                
                await MID_HelperFunctions.DebugMessageAsync($"FloatingQR drag initialized with ID: {componentId}");
            }
            catch (Exception ex)
            {
                await MID_HelperFunctions.DebugMessageAsync($"Error registering drag functionality: {ex.Message}",DebugClass.Exception);
            }
        }
    }

    private void StartCountdownTimer()
    {
        StopCountdownTimer();
        countdownTimer = new System.Threading.Timer(
            _ => InvokeAsync(() => {
                if (SessionData != null && DateTime.UtcNow >= SessionData.EndTime)
                {
                    CloseWindow();
                }
                StateHasChanged();
            }),
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(1)
        );
    }

    private void StopCountdownTimer()
    {
        countdownTimer?.Dispose();
        countdownTimer = null;
    }

    private async Task CloseWindow()
    {
        StopCountdownTimer();
        await OnClose.InvokeAsync();
    }

    private async Task HandleOverlayClick()
    {
        if (!isFullscreen)
        {
            await CloseWindow();
        }
    }

    private async Task ToggleFullscreen()
    {
        isFullscreen = !isFullscreen;
        WindowStyle = isFullscreen 
            ? "top: 2.5vh; left: 2.5vw; width: 95vw; height: 95vh;" 
            : previousWindowStyle;

        if (!string.IsNullOrEmpty(componentId))
        {
            await JS.InvokeVoidAsync("setFullscreenState", componentId, isFullscreen);
        }
    
        StateHasChanged();
    }
    
    [JSInvokable]
    public void UpdatePosition(double x, double y)
    {
        if (!isFullscreen)
        {
            WindowStyle = $"top: {y}px; left: {x}px;";
            StateHasChanged();
        }
    }

    private string FormatTimeRemaining()
    {
        if (SessionData == null) return "--:--:--";
        
        TimeSpan remaining = SessionData.EndTime - DateTime.UtcNow;
        if (remaining.TotalSeconds <= 0)
        {
            return "00:00:00";
        }
        
        return $"{remaining.Hours:00}:{remaining.Minutes:00}:{remaining.Seconds:00}";
    }

    private QRCodeTheme ConvertStringToTheme(string theme)
    {
        return theme switch
        {
            "Gradient" => QRCodeTheme.Gradient,
            "Branded" => QRCodeTheme.Branded,
            "GradientWithLogo" => QRCodeTheme.GradientWithLogo,
            _ => QRCodeTheme.Standard
        };
    }

    private QRCodeBaseOptions GenerateQRCodeOptions()
    {
        if (SessionData == null) return new QRCodeBaseOptions();

        var size = isFullscreen ? 500 : 300;

        QRCodeBaseOptions options = new QRCodeBaseOptions
        {
            Content = SessionData.QrCodePayload,
            Size = size,
            DarkColor = "#000000",
            LightColor = "#FFFFFF",
            ErrorLevel = ErrorCorrectionLevel.M,
            Margin = 4
        };
        
        return SessionData.Theme switch
        {
            "Gradient" => new QRCodeGradientOptions
            {
                Content = SessionData.QrCodePayload,
                Size = size,
                DarkColor = "#000000",
                LightColor = "#FFFFFF",
                ErrorLevel = ErrorCorrectionLevel.M,
                Margin = 4,
                GradientColor1 = "#3498db",
                GradientColor2 = "#9b59b6",
                Direction = GradientDirection.Diagonal
            },
            "Branded" => new QRCodeBrandedOptions
            {
                Content = SessionData.QrCodePayload,
                Size = size,
                DarkColor = "#000000",
                LightColor = "#FFFFFF",
                ErrorLevel = ErrorCorrectionLevel.H,
                Margin = 4,
                LogoUrl = "/icon-192.png",
                LogoSizeRatio = 0.2f,
                AddLogoBorder = true,
                LogoBorderColor = "#FFFFFF",
                LogoBorderWidth = 2,
                LogoBorderRadius = 5
            },
            "GradientWithLogo" => new QRCodeGradientBrandedOptions
            {
                Content = SessionData.QrCodePayload,
                Size = size,
                DarkColor = "#000000",
                LightColor = "#FFFFFF",
                ErrorLevel = ErrorCorrectionLevel.H,
                Margin = 4,
                GradientColor1 = "#3498db",
                GradientColor2 = "#9b59b6",
                Direction = GradientDirection.Radial,
                LogoUrl = "/icon-192.png",
                LogoSizeRatio = 0.2f,
                AddLogoBorder = true,
                LogoBorderColor = "#FFFFFF",
                LogoBorderWidth = 2,
                LogoBorderRadius = 5
            },
            _ => options
        };
    }

    public async ValueTask DisposeAsync()
    {
        StopCountdownTimer();
    
        if (!string.IsNullOrEmpty(componentId))
        {
            await JS.InvokeVoidAsync("unregisterComponent", componentId);
        }
    
        dotNetRef?.Dispose();
    }
}