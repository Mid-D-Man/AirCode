@using AirCode.Services.VisualElements
@inject ISvgIconService SvgIconService
@implements IDisposable

@if (string.IsNullOrEmpty(_svgContent))
{
    <i class="@_fallbackIconClass" style="@StyleString"></i>
}
else
{
    <div class="svg-icon @CssClass" style="@StyleString" @attributes="AdditionalAttributes">
        @((MarkupString)_svgContent)
    </div>
}

@code {
    //awsome svg icon gotten from services
    [Parameter]
    public string IconName { get; set; } = "";

    [Parameter]
    public string Width { get; set; } = "16px";

    [Parameter]
    public string Height { get; set; } = "16px";

    [Parameter]
    public string CssClass { get; set; } = "";

    [Parameter]
    public string Fill { get; set; } = "currentColor";

    [Parameter]
    public string FallbackIcon { get; set; } = "fas fa-circle";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    private string _svgContent = string.Empty;
    private string _fallbackIconClass = "fas fa-circle";
    private bool _initialized = false;
    private bool _loadAttempted = false;

    private string StyleString => $"width: {Width}; height: {Height}; display: inline-flex; align-items: center; justify-content: center;";

    protected override async Task OnInitializedAsync()
    {
        SetFallbackIcon();
        await LoadSvgContentAsync();
        _initialized = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_initialized)
        {
            SetFallbackIcon();
            if (!string.IsNullOrEmpty(IconName) && !_loadAttempted)
            {
                await LoadSvgContentAsync();
            }
        }
    }

    private void SetFallbackIcon()
    {
        if (!string.IsNullOrEmpty(FallbackIcon))
        {
            _fallbackIconClass = FallbackIcon;
        }
        else
        {
            // Icon-specific fallbacks
            _fallbackIconClass = IconName switch
            {
                "stats" => "fas fa-chart-bar",
                "scan_qrcode" or "scan" => "fas fa-qrcode",
                "settings" => "fas fa-cog",
                _ => "fas fa-circle"
            };
        }
    }

    private async Task LoadSvgContentAsync()
    {
        if (string.IsNullOrEmpty(IconName) || _loadAttempted)
        {
            return;
        }

        _loadAttempted = true;

        try
        {
            // Add timeout and retry logic
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            var content = await SvgIconService.GetSvgContentAsync(IconName);

            if (!string.IsNullOrEmpty(content))
            {
                // Process fill color replacement
                if (!string.IsNullOrEmpty(Fill) && Fill != "currentColor")
                {
                    content = content.Replace("fill=\"currentColor\"", $"fill=\"{Fill}\"");
                    content = content.Replace("fill='currentColor'", $"fill='{Fill}'");
                }

                // Ensure SVG has proper dimensions
                if (!content.Contains("width=") && !content.Contains("height="))
                {
                    content = content.Replace("<svg", $"<svg width=\"{Width}\" height=\"{Height}\"");
                }

                _svgContent = content;
                await MID_HelperFunctions.DebugMessageAsync($"SVG loaded successfully for icon: {IconName}", DebugClass.Info);
            }
            else
            {
                await MID_HelperFunctions.DebugMessageAsync($"SVG content empty for icon: {IconName}, using fallback", DebugClass.Warning);
                _svgContent = string.Empty;
            }
        }
        catch (Exception ex)
        {
            await MID_HelperFunctions.DebugMessageAsync($"Error loading SVG icon '{IconName}': {ex.Message}", DebugClass.Exception);
            _svgContent = string.Empty;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        // Clean up if needed
    }
}
