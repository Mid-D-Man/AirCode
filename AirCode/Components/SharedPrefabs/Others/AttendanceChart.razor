@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="attendance-chart-container">
    <div class="chart-header">
        <h3>@Title</h3>
        <div class="chart-controls">
            <select @onchange="HandlePeriodChange" class="period-selector">
                <option value="7">Last 7 Days</option>
                <option value="30" selected>Last 30 Days</option>
                <option value="90">Last 3 Months</option>
            </select>
        </div>
    </div>
    
    <div class="chart-wrapper">
        <canvas id="@ChartId" width="400" height="200"></canvas>
    </div>
    
    @if (ShowLegend)
    {
        <div class="chart-legend">
            <div class="legend-item">
                <div class="legend-color present"></div>
                <span>Present</span>
            </div>
            <div class="legend-item">
                <div class="legend-color absent"></div>
                <span>Absent</span>
            </div>
        </div>
    }
</div>

@code {
    //this needs to be completely repaced with something better
    [Parameter] public string Title { get; set; } = "Attendance Trends";
    [Parameter] public List<AttendanceChartData> Data { get; set; } = new();
    [Parameter] public bool ShowLegend { get; set; } = true;
    [Parameter] public string ChartType { get; set; } = "line"; // line, bar, doughnut
    [Parameter] public EventCallback<int> OnPeriodChanged { get; set; }
    
    private string ChartId => $"chart-{Guid.NewGuid().ToString("N")[..8]}";
    private int selectedPeriod = 30;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeChart();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Data?.Any() == true)
        {
            await UpdateChart();
        }
    }

    private async Task InitializeChart()
    {
        var chartData = PrepareChartData();
        await JSRuntime.InvokeVoidAsync("initializeAttendanceChart", ChartId, chartData, ChartType);
    }

    private async Task UpdateChart()
    {
        var chartData = PrepareChartData();
        await JSRuntime.InvokeVoidAsync("updateAttendanceChart", ChartId, chartData);
    }

    private async Task HandlePeriodChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int period))
        {
            selectedPeriod = period;
            await OnPeriodChanged.InvokeAsync(period);
        }
    }

    private object PrepareChartData()
    {
        var filteredData = Data?.Where(d => d.Date >= DateTime.Now.AddDays(-selectedPeriod))
                              .OrderBy(d => d.Date)
                              .ToList() ?? new List<AttendanceChartData>();

        return new
        {
            labels = filteredData.Select(d => d.Date.ToString("MMM dd")).ToArray(),
            datasets = new[]
            {
                new
                {
                    label = "Attendance Rate",
                    data = filteredData.Select(d => d.AttendanceRate).ToArray(),
                    borderColor = "rgb(52, 152, 219)",
                    backgroundColor = "rgba(52, 152, 219, 0.1)",
                    tension = 0.4,
                    fill = true
                }
            }
        };
    }
}


@code {
    public class AttendanceChartData
    {
        public DateTime Date { get; set; }
        public double AttendanceRate { get; set; }
        public int PresentCount { get; set; }
        public int TotalCount { get; set; }
    }
}