@namespace AirCode.Components.SharedPrefabs.Others
@using AirCode.Services.VisualElements
@inject IBackdropService BackdropService
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (IsVisible)
{
    <div id="info-popup-modal-@InstanceId" 
         class="modal-overlay @(IsVisible ? "visible" : "")" 
         @onclick="HandleBackdropClick"
         @ref="modalOverlayRef">
        <div class="info-popup-modal" @onclick:stopPropagation="true">
            <div class="info-popup-header">
                <h4>@GetInfoTitle()</h4>
                <button class="close-btn" @onclick="OnClose">
                    <span>&times;</span>
                </button>
            </div>
            <div class="info-popup-content">
                <p>@GetInfoContent()</p>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public InfoType CurrentInfoType { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    // Portal management (bokan ninjutsu)
    private ElementReference modalOverlayRef;
    private string InstanceId = Guid.NewGuid().ToString("N")[..8];
    private string ModalSelector => $"#info-popup-modal-{InstanceId}";
    private bool _isInPortal = false;
    private bool _wasVisible = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !_wasVisible)
        {
            await ShowModalAsync();
        }
        else if (!IsVisible && _wasVisible)
        {
            await HideModalAsync();
        }
        
        _wasVisible = IsVisible;
    }

    private async Task ShowModalAsync()
    {
        try
        {
            await BackdropService.ShowAsync();
            // Give the DOM time to render
            await Task.Delay(50);
            await BackdropService.MoveElementToPortalAsync(ModalSelector);
            _isInPortal = true;
        }
        catch (Exception ex)
        {
         await MID_HelperFunctions.DebugMessageAsync($"Error showing modal: {ex.Message}",DebugClass.Exception);
        }
    }

    private async Task HideModalAsync()
    {
        try
        {
            if (_isInPortal)
            {
                await BackdropService.ReturnElementFromPortalAsync(ModalSelector);
                _isInPortal = false;
            }
            await BackdropService.HideAsync();
        }
        catch (Exception ex)
        {
            await MID_HelperFunctions.DebugMessageAsync($"Error hiding modal: {ex.Message}",DebugClass.Exception);
        }
    }

    private async Task HandleBackdropClick()
    {
        await HideModalAsync();
        await OnClose.InvokeAsync();
    }

    private string GetInfoTitle()
    {
        return CurrentInfoType switch
        {
            InfoType.OfflineSync => "Allow Offline Sync",
            InfoType.TemporalKeyRefresh => "Temporal Key Refresh",
            InfoType.RefreshInterval => "Refresh Interval",
            InfoType.SecurityFeatures => "Security Features",
            InfoType.DeviceGuidCheck => "Device GUID Security",
            InfoType.OfflineStorage => "Offline Storage Duration",
            InfoType.SyncInterval => "Auto-Sync Interval",
            _ => "Information"
        };
    }

    private string GetInfoContent()
    {
        return CurrentInfoType switch
        {
            InfoType.OfflineSync => "When enabled, students can scan QR codes even when offline. Their attendance will be synced when they reconnect to the internet. This ensures attendance is captured even in poor network conditions.",
            
            InfoType.TemporalKeyRefresh => "Temporal Key Refresh adds an extra layer of security by periodically changing the QR code's internal key. This prevents old QR codes from being reused and helps prevent attendance fraud. The QR code appearance remains the same, but the internal security key changes at regular intervals.",
            
            InfoType.RefreshInterval => "This setting determines how often the temporal key is refreshed. Shorter intervals (2-5 minutes) provide better security but may cause more network traffic. Longer intervals (10-30 minutes) are more efficient but slightly less secure. 5 minutes is recommended for most scenarios.",
            
            InfoType.SecurityFeatures => "Security features provide additional validation methods:\n\n• Default: Basic security with standard QR code validation\n• Device GUID Check: Validates that the same device isn't used to scan multiple times, helping prevent attendance fraud through device sharing",
            
            InfoType.DeviceGuidCheck => "Device GUID security validates each scanning device to prevent multiple scans from the same device. This helps prevent attendance fraud by ensuring students cannot share devices to mark attendance for others.",
            
            InfoType.OfflineStorage => "Determines how long attendance records are stored locally on the device before being automatically purged. Records are kept until successfully synced to the server, but expired records may be removed to prevent excessive storage usage.",
            
            InfoType.SyncInterval => "Sets how frequently the system attempts to sync offline attendance records to the server when a network connection is available. More frequent syncing reduces data loss risk but may impact battery life and network usage.",
            
            _ => "No information available."
        };
    }

    public async void Dispose()
    {
        // Ensure we return from portal on disposal
        if (_isInPortal)
        {
            try
            {
                await BackdropService.ReturnElementFromPortalAsync(ModalSelector);
            }
            catch (Exception ex)
            {
                await MID_HelperFunctions.DebugMessageAsync($"Error during disposal: {ex.Message}",DebugClass.Exception);
            }
        }
    }

    public enum InfoType
    {
        OfflineSync,
        TemporalKeyRefresh,
        RefreshInterval,
        SecurityFeatures,
        DeviceGuidCheck,
        OfflineStorage,
        SyncInterval
    }
}
