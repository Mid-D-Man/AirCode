@* PWAComponent.razor - Place in Components folder *@
@* Enhanced PWAComponent.razor with offline route management *@
@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="pwa-status-container">
    @if (!IsOnline)
    {
        <div class="offline-banner">
            <span class="offline-icon">üîå</span>
            <span>Offline Mode - Limited functionality available</span>
        </div>
    }
    
    @if (IsInstalled)
    {
        <div class="pwa-status installed">
            <span class="pwa-icon">üì±</span>
            <span>App Mode Active</span>
        </div>
    }
    else if (IsInstallable)
    {
        <div class="pwa-status installable">
            <span class="pwa-icon">‚¨áÔ∏è</span>
            <span>App can be installed</span>
        </div>
    }
    
    @if (UpdateAvailable)
    {
        <div class="pwa-update-banner">
            <span>üîÑ Update available</span>
            <button class="btn btn-sm btn-primary" @onclick="ApplyUpdate">Update Now</button>
        </div>
    }
    
    @if (!IsOnline && !IsCurrentRouteOfflineAccessible)
    {
        <div class="offline-restriction-banner">
            <span>‚ö†Ô∏è This page requires internet connection</span>
            <button class="btn btn-sm btn-secondary" @onclick="NavigateToOfflineHome">Go to Offline Home</button>
        </div>
    }
</div>

@if (ShowControls)
{
    <div class="pwa-controls">
        <button class="btn btn-outline-primary btn-sm" @onclick="CheckForUpdates">
            Check for Updates
        </button>
        
        <button class="btn btn-outline-secondary btn-sm" @onclick="CheckOfflineStatus">
            Check Offline Status
        </button>
        
        @if (IsInstalled)
        {
            <button class="btn btn-outline-secondary btn-sm" @onclick="GetAppInfo">
                App Info
            </button>
        }
    </div>
}

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert alert-info alert-dismissible fade show mt-2" role="alert">
        @StatusMessage
        <button type="button" class="btn-close" @onclick="ClearStatus"></button>
    </div>
}



@code {
    [Parameter] public bool ShowControls { get; set; } = true;
    [Parameter] public EventCallback<PWAStatus> OnStatusChanged { get; set; }
    [Parameter] public EventCallback<bool> OnOfflineStatusChanged { get; set; }
    
    private IJSObjectReference? pwaManager;
    private DotNetObjectReference<PWAComponent>? dotNetRef;
    private IJSObjectReference? networkMonitor;
    
    private bool IsInstalled { get; set; }
    private bool IsInstallable { get; set; }
    private bool UpdateAvailable { get; set; }
    private bool IsOnline { get; set; } = true;
    private bool IsCurrentRouteOfflineAccessible { get; set; } = true;
    private string StatusMessage { get; set; } = string.Empty;
    
    // Define offline-accessible routes
    private readonly string[] OfflineRoutes = {
        "/",
        "/OfflineAttendanceEvent",
        "/Admin/OfflineAttendanceEvent",
        "/Client/OfflineScan",
        "/OfflineScanPage"
    };
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializePWA();
            await InitializeNetworkMonitoring();
            CheckCurrentRouteOfflineAccessibility();
        }
    }
    
    private async Task InitializePWA()
    {
        try
        {
            dotNetRef = DotNetObjectReference.Create(this);
            pwaManager = await JSRuntime.InvokeAsync<IJSObjectReference>("getPWAManager");
            
            await UpdatePWAStatus();
            await JSRuntime.InvokeVoidAsync("setupPWAStatusMonitoring", dotNetRef);
            
            StatusMessage = "PWA initialized successfully";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatusMessage = $"PWA initialization failed: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task InitializeNetworkMonitoring()
    {
        try
        {
            networkMonitor = await JSRuntime.InvokeAsync<IJSObjectReference>("setupNetworkMonitoring", dotNetRef);
            
            // Get initial network status
            var networkStatus = await JSRuntime.InvokeAsync<NetworkStatus>("pwaUtils.getNetworkStatus");
            IsOnline = networkStatus.Online;
            
            await OnOfflineStatusChanged.InvokeAsync(IsOnline);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Network monitoring failed: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private void CheckCurrentRouteOfflineAccessibility()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        var normalizedPath = "/" + currentPath.TrimStart('/');
        
        IsCurrentRouteOfflineAccessible = OfflineRoutes.Any(route => 
            route == "/" ? normalizedPath == "/" || normalizedPath == "" : 
            normalizedPath.StartsWith(route, StringComparison.OrdinalIgnoreCase));
        
        StateHasChanged();
    }
    
    private async Task UpdatePWAStatus()
    {
        if (pwaManager != null)
        {
            try
            {
                var status = await pwaManager.InvokeAsync<PWAStatus>("getInstallationStatus");
                IsInstalled = status.IsInstalled;
                IsInstallable = status.IsInstallable;
                UpdateAvailable = status.UpdateAvailable;
                
                await OnStatusChanged.InvokeAsync(status);
            }
            catch (Exception ex)
            {
                StatusMessage = $"Failed to get PWA status: {ex.Message}";
            }
        }
    }
    
    private async Task CheckOfflineStatus()
    {
        try
        {
            var networkStatus = await JSRuntime.InvokeAsync<NetworkStatus>("pwaUtils.getNetworkStatus");
            IsOnline = networkStatus.Online;
            
            CheckCurrentRouteOfflineAccessibility();
            
            StatusMessage = $"Network: {(IsOnline ? "Online" : "Offline")}, " +
                           $"Current route offline accessible: {IsCurrentRouteOfflineAccessible}";
            
            await OnOfflineStatusChanged.InvokeAsync(IsOnline);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Failed to check offline status: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task CheckForUpdates()
    {
        if (pwaManager != null)
        {
            try
            {
                StatusMessage = "Checking for updates...";
                StateHasChanged();
                
                await pwaManager.InvokeVoidAsync("checkForUpdates");
                await Task.Delay(2000);
                await UpdatePWAStatus();
                
                StatusMessage = UpdateAvailable ? "Update available!" : "No updates available";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                StatusMessage = $"Update check failed: {ex.Message}";
                StateHasChanged();
            }
        }
    }
    
    private async Task ApplyUpdate()
    {
        if (pwaManager != null)
        {
            try
            {
                StatusMessage = "Applying update...";
                StateHasChanged();
                
                await pwaManager.InvokeVoidAsync("applyUpdate");
                StatusMessage = "Update applied. Page will reload shortly.";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                StatusMessage = $"Update failed: {ex.Message}";
                StateHasChanged();
            }
        }
    }
    
    private async Task GetAppInfo()
    {
        if (pwaManager != null)
        {
            try
            {
                var status = await pwaManager.InvokeAsync<PWAStatus>("getInstallationStatus");
                StatusMessage = $"App Status - Installed: {status.IsInstalled}, SW Active: {status.HasServiceWorker}";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                StatusMessage = $"Failed to get app info: {ex.Message}";
                StateHasChanged();
            }
        }
    }
    
    private void NavigateToOfflineHome()
    {
        Navigation.NavigateTo("/");
    }
    
    [JSInvokable]
    public async Task OnPWAStatusChanged(PWAStatus status)
    {
        IsInstalled = status.IsInstalled;
        IsInstallable = status.IsInstallable;
        UpdateAvailable = status.UpdateAvailable;
        
        await OnStatusChanged.InvokeAsync(status);
        StateHasChanged();
    }
    
    [JSInvokable]
    public async Task OnUpdateAvailable()
    {
        UpdateAvailable = true;
        StatusMessage = "New version available!";
        StateHasChanged();
    }
    
    [JSInvokable]
    public async Task OnAppInstalled()
    {
        IsInstalled = true;
        StatusMessage = "App installed successfully!";
        StateHasChanged();
    }
    
    [JSInvokable]
    public async Task OnNetworkStatusChanged(NetworkStatus status)
    {
        IsOnline = status.Online;
        CheckCurrentRouteOfflineAccessibility();
        
        await OnOfflineStatusChanged.InvokeAsync(IsOnline);
        StateHasChanged();
    }
    
    private void ClearStatus()
    {
        StatusMessage = string.Empty;
        StateHasChanged();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (pwaManager != null)
        {
            await pwaManager.DisposeAsync();
        }
        
        if (networkMonitor != null)
        {
            await networkMonitor.DisposeAsync();
        }
        
        if (dotNetRef != null)
        {
            dotNetRef.Dispose();
        }
    }
    
    public class PWAStatus
    {
        public bool IsInstallable { get; set; }
        public bool IsInstalled { get; set; }
        public bool HasServiceWorker { get; set; }
        public bool UpdateAvailable { get; set; }
    }
    
    public class NetworkStatus
    {
        public bool Online { get; set; }
        public ConnectionInfo? Connection { get; set; }
    }
    
    public class ConnectionInfo
    {
        public string? EffectiveType { get; set; }
        public double Downlink { get; set; }
        public int Rtt { get; set; }
    }
}
