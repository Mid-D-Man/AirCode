@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Rendering
@using AirCode.Services.Permissions
@using AirCode.Components.SharedPrefabs.Others
@using AirCode.Components.SharedPrefabs.Spinner
@inherits ComponentBase
@implements IComponent
@inject IPermissionService PermissionService
@inject NavigationManager NavigationManager

@if (IsLoading)
{
    <LoadingSpinner Title="Authenticating..." Subtitle="Verifying your credentials and permissions." />
}
else if (Authorized)
{
    <RouteView RouteData="@RouteData" DefaultLayout="@DefaultLayout" />
}
else if (IsRedirecting)
{
    <LoadingSpinner Title="Redirecting..." Subtitle="Taking you to the login page." />
}
else
{
    <div class="unauthorized-access">
        <h3>Access Denied</h3>
        <p>You don't have permission to access this page.</p>
        <button class="btn btn-primary" @onclick="() => NavigationManager.NavigateTo('/'.ToString())">
            Return Home
        </button>
    </div>
}

@code {
    [Parameter] public RouteData RouteData { get; set; } = default!;
    [Parameter] public Type? DefaultLayout { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool Authorized { get; set; }
    private bool IsRedirecting { get; set; }
    private bool IsLoading { get; set; } = true;

    protected new async Task OnInitializedAsync()
    {
        Console.WriteLine($"[AuthorizeRouteView] URI: {NavigationManager.Uri}");
        Console.WriteLine($"[AuthorizeRouteView] Page Type: {RouteData?.PageType?.Name}");
        
        var currentPath = new Uri(NavigationManager.Uri).AbsolutePath;
        Console.WriteLine($"[AuthorizeRouteView] Current Path: {currentPath}");
        
        // Allow access to index page without authentication
        if (currentPath == "/" || currentPath == "/AirCode/" || currentPath.EndsWith("/index") || 
            RouteData?.PageType?.Name == "Index")
        {
            Console.WriteLine("[AuthorizeRouteView] Index page detected - allowing access");
            Authorized = true;
            IsLoading = false;
            StateHasChanged();
            return;
        }

        Console.WriteLine("[AuthorizeRouteView] Not index page - checking authentication");

        if (AuthenticationState == null) 
        {
            Console.WriteLine("[AuthorizeRouteView] AuthenticationState is null");
            Authorized = false;
            IsLoading = false;
            return;
        }

        var authState = await AuthenticationState;
        var user = authState.User;
        Console.WriteLine($"[AuthorizeRouteView] User authenticated: {user?.Identity?.IsAuthenticated}");

        // Check authentication first
        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Console.WriteLine("[AuthorizeRouteView] User not authenticated - redirecting to login");
            IsRedirecting = true;
            IsLoading = false;
            StateHasChanged();
            
            var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/authentication/login?returnUrl={returnUrl}");
            return;
        }

        // Check authorization
        Console.WriteLine("[AuthorizeRouteView] Checking authorization");
        Authorized = await CheckAuthorizationAsync(user);
        Console.WriteLine($"[AuthorizeRouteView] Authorization result: {Authorized}");
        IsLoading = false;
        StateHasChanged();
    }

    private async Task<bool> CheckAuthorizationAsync(ClaimsPrincipal user)
    {
        var authorizeAttribute = RouteData.PageType
            .GetCustomAttributes(typeof(AuthorizeAttribute), true)
            .Cast<AuthorizeAttribute>()
            .FirstOrDefault();

        if (authorizeAttribute == null) return true;

        // Check roles
        if (!string.IsNullOrEmpty(authorizeAttribute.Roles))
        {
            var roles = authorizeAttribute.Roles.Split(',')
                .Select(r => r.Trim())
                .ToArray();

            return roles.Any(role => user.IsInRole(role));
        }

        // Check policies
        if (!string.IsNullOrEmpty(authorizeAttribute.Policy))
        {
            return await CheckPolicyAsync(user, authorizeAttribute.Policy);
        }

        return user.Identity.IsAuthenticated;
    }

    private async Task<bool> CheckPolicyAsync(ClaimsPrincipal user, string policy)
    {
        var userId = user.FindFirst("sub")?.Value ?? user.FindFirst("id")?.Value;
        if (string.IsNullOrEmpty(userId)) return false;

        return policy switch
        {
            "SuperiorAdmin" => user.IsInRole("superioradmin"),
            "LecturerAdmin" => user.IsInRole("lectureradmin"),
            "CourseAdmin" => user.IsInRole("courseadmin"),
            "AnyAdmin" => user.IsInRole("superioradmin") || user.IsInRole("lectureradmin") || user.IsInRole("courseadmin"),
            "Student" => user.IsInRole("student"),
            _ => true
        };
    }
}