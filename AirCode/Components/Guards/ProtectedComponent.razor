@using Microsoft.AspNetCore.Components.Authorization
@using AirCode.Services.Permissions
@inject NavigationManager NavigationManager
@inject IPermissionService PermissionService

<AuthorizeView Roles="@RequiredRoles" Policy="@RequiredPolicy">
    <Authorized>
        @if (HasPermission)
        {
            @ChildContent
        }
        else
        {
            <div class="permission-denied">
                <p>You don't have permission to perform this action.</p>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        @{
            var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/authentication/login?returnUrl={returnUrl}");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    //used to add rbac to inidi components 
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public string? RequiredRoles { get; set; }
    [Parameter] public string? RequiredPolicy { get; set; }
    [Parameter] public string? RequiredPermission { get; set; }
    [Parameter] public string? CourseId { get; set; }
    
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    private bool HasPermission { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(RequiredPermission) && AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            var userId = authState.User.FindFirst("sub")?.Value ?? authState.User.FindFirst("id")?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                HasPermission = await CheckPermissionAsync(userId);
            }
        }
    }

    private async Task<bool> CheckPermissionAsync(string userId)
    {
        return RequiredPermission switch
        {
            "CanEditAttendance" => await PermissionService.CanEditAttendanceAsync(userId, CourseId ?? ""),
            "CanStartAttendanceEvent" => await PermissionService.CanStartAttendanceEventAsync(userId, CourseId ?? ""),
            "CanViewCourseAttendance" => await PermissionService.CanViewCourseAttendanceAsync(userId, CourseId ?? ""),
            "CanEditCourseInfo" => await PermissionService.CanEditCourseInfoAsync(userId, CourseId ?? ""),
            "CanGenerateAdminId" => await PermissionService.CanGenerateAdminIdAsync(userId),
            _ => true
        };
    }
}