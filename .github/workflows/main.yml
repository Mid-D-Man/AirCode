name: Deploy Blazor WASM to GitHub Pages

on:
  push:
    branches: [ master ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Update Project Structure
        run: |
          # Create project structure documentation
          echo "Generating project structure..."
          
          # Function to generate tree structure for specific directories
          generate_structure() {
            local base_dir="$1"
            local output_file="$2"
            
            # Main project folders to include
            main_folders=(
              "Components"
              "Domain" 
              "Layout"
              "Models"
              "Pages"
              "Services"
              "Shared"
              "TestData"
              "Utilities"
            )
            
            # Project root files
            echo "" > "$output_file"
            for item in *.csproj *.sln *.razor *.json; do
              if [ -f "$item" ]; then
                echo "$item" >> "$output_file"
              fi
            done
            
            # Add main directories
            for folder in "${main_folders[@]}"; do
              if [ -d "$folder" ]; then
                echo "" >> "$output_file"
                echo "./$folder:" >> "$output_file"
                find "$folder" -type f -name "*.cs" -o -name "*.razor" -o -name "*.css" -o -name "*.json" | \
                  sed 's|^|.|' | sort >> "$output_file"
                
                # Add subdirectory structure
                find "$folder" -type d | while read -r dir; do
                  if [ "$dir" != "$folder" ]; then
                    echo "" >> "$output_file"
                    echo "./$dir:" >> "$output_file"
                    find "$dir" -maxdepth 1 -type f -name "*.cs" -o -name "*.razor" -o -name "*.css" -o -name "*.json" | \
                      sed 's|.*/||' | sort >> "$output_file"
                  fi
                done
              fi
            done
            
            # Add wwwroot with filtered content
            if [ -d "wwwroot" ]; then
              echo "" >> "$output_file"
              echo "./wwwroot:" >> "$output_file"
              
              # Root level files in wwwroot
              find wwwroot -maxdepth 1 -type f | sed 's|wwwroot/||' | sort >> "$output_file"
              
              # Specific subdirectories: css, js, wasm
              for subdir in "css" "js" "wasm"; do
                if [ -d "wwwroot/$subdir" ]; then
                  echo "" >> "$output_file"
                  echo "./wwwroot/$subdir:" >> "$output_file"
                  find "wwwroot/$subdir" -type f | sed 's|wwwroot/||' | sort >> "$output_file"
                  
                  # Add subdirectory structure for these folders
                  find "wwwroot/$subdir" -type d | while read -r dir; do
                    if [ "$dir" != "wwwroot/$subdir" ]; then
                      echo "" >> "$output_file"
                      echo "./$dir:" >> "$output_file"
                      find "$dir" -maxdepth 1 -type f | sed 's|.*/||' | sort >> "$output_file"
                    fi
                  done
                fi
              done
            fi
          }
          
          # Generate the structure
          generate_structure "." "AirCode/Others/ProjectStructure.txt"
          
          echo "Project structure updated successfully"

      - name: Commit Updated Project Structure
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if git diff --quiet AirCode/Others/ProjectStructure.txt; then
            echo "No changes to project structure"
          else
            git add AirCode/Others/ProjectStructure.txt
            git commit -m "Auto-update project structure [skip ci]"
            git push
          fi

      - name: Restore and Build
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release --no-build --output ./dist

      - name: Prepare Pages
        run: |
          mkdir -p ./pages
          cp -r ./dist/wwwroot/* ./pages/
          touch ./pages/.nojekyll
          
          # Copy SVG files if they exist in a different location
          if [ -d "./AirCode/svgs" ]; then
            mkdir -p ./pages/svgs
            cp -r ./AirCode/svgs/* ./pages/svgs/
          fi
          
          
          # Create 404.html with SPA routing script
          cat > ./pages/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Single Page Apps for GitHub Pages</title>
              <script type="text/javascript">
                var pathSegmentsToKeep = 1;
                var l = window.location;
                l.replace(
                  l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
                  l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + '/?/' +
                  l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
                  (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
                  l.hash
                );
              </script>
            </head>
            <body>
            </body>
          </html>
          EOF
          
          # Update base href in index.html
          sed -i 's|<base href="/" />|<base href="/${{ github.event.repository.name }}/" />|g' ./pages/index.html
          
          # Add SPA routing script to index.html after the base tag
          sed -i '/<base href="[^"]*" \/>/a\    \n    <!-- SPA routing fix for GitHub Pages -->\n    <script type="text/javascript">\n        (function(l) {\n            if (l.search[1] === "/" ) {\n                var decoded = l.search.slice(1).split("&").map(function(s) { \n                return s.replace(/~and~/g, "&")\n                }).join("?");\n                window.history.replaceState(null, null,\n                    l.pathname.slice(0, -1) + decoded + l.hash\n                );\n            }\n        }(window.location))\n    </script>' ./pages/index.html
          
          # Fix service worker references
          if [ -f "./pages/service-worker.published.js" ]; then
            cp ./pages/service-worker.published.js ./pages/service-worker.js
            sed -i 's|"/|"/${{ github.event.repository.name }}/|g' ./pages/service-worker.js
          fi

      - name: Upload Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./pages

  deploy:
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
