name: Deploy Blazor WASM PWA to GitHub Pages

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Update Project Structure
        run: |
          echo "Generating comprehensive project structure..."
          
          # Verify project directory structure
          echo "Repository root contents:"
          ls -la
          
          # Navigate to project directory and validate
          if [ -d "AirCode" ]; then
            cd AirCode
            echo "AirCode directory contents:"
            ls -la
          else
            echo "Warning: AirCode directory not found, using repository root"
          fi
          
          # Enhanced structure generation function
          generate_comprehensive_structure() {
            local base_path="$1"
            local output_file="$2"
          
            # Initialize output file with metadata
            {
              echo "Project Structure Documentation"
              echo "Generated: $(date -u)"
              echo "Repository: ${{ github.repository }}"
              echo "Commit: ${{ github.sha }}"
              echo "=================================="
              echo
            } > "$output_file"
          
            # Capture all project-relevant files
            echo "Source Files:" >> "$output_file"
            echo "============" >> "$output_file"
            find "$base_path" -type f \( \
              -name "*.cs" -o \
              -name "*.razor" -o \
              -name "*.csproj" -o \
              -name "*.sln" -o \
              -name "*.json" -o \
              -name "*.css" -o \
              -name "*.scss" -o \
              -name "*.js" -o \
              -name "*.ts" -o \
              -name "*.html" -o \
              -name "*.md" \
            \) -not -path "*/bin/*" \
              -not -path "*/obj/*" \
              -not -path "*/.git/*" \
              -not -path "*/node_modules/*" | \
            sed "s|^$base_path/||" | sort >> "$output_file"
          
            echo >> "$output_file"
            echo "Directory Structure:" >> "$output_file"
            echo "==================" >> "$output_file"
          
            # Generate hierarchical directory tree
            find "$base_path" -type d \
              -not -path "*/bin" \
              -not -path "*/bin/*" \
              -not -path "*/obj" \
              -not -path "*/obj/*" \
              -not -path "*/.git" \
              -not -path "*/.git/*" \
              -not-path "*/node_modules" \
              -not -path "*/node_modules/*" | \
            sed "s|^$base_path||" | \
            sed 's|^/||' | \
            sort | \
            sed 's|[^/]*/|  |g' | \
            sed 's|^|./|' >> "$output_file"
          
            echo >> "$output_file"
            echo "File Count Summary:" >> "$output_file"
            echo "==================" >> "$output_file"
          
            # Generate file type statistics
            for ext in cs razor csproj sln json css js html; do
              count=$(find "$base_path" -name "*.$ext" -not -path "*/bin/*" -not -path "*/obj/*" | wc -l)
              if [ "$count" -gt 0 ]; then
                printf "%-10s: %d files\n" ".$ext" "$count" >> "$output_file"
              fi
            done
          }
          
          # Determine correct base path and output location
          if [ -d "AirCode" ]; then
            # Ensure output directory exists
            mkdir -p "AirCode/Others"
            generate_comprehensive_structure "AirCode" "AirCode/Others/ProjectStructure.txt"
          else
            # Fallback to repository root
            mkdir -p "Others"
            generate_comprehensive_structure "." "Others/ProjectStructure.txt"
          fi
          
          echo "Project structure documentation completed successfully"

      - name: Commit Updated Project Structure
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Determine structure file location
          STRUCTURE_FILE=""
          if [ -f "AirCode/Others/ProjectStructure.txt" ]; then
            STRUCTURE_FILE="AirCode/Others/ProjectStructure.txt"
          elif [ -f "Others/ProjectStructure.txt" ]; then
            STRUCTURE_FILE="Others/ProjectStructure.txt"
          fi
          
          if [ -n "$STRUCTURE_FILE" ]; then
            # Verify changes exist before committing
            if ! git diff --quiet "$STRUCTURE_FILE" 2>/dev/null; then
              git add "$STRUCTURE_FILE"
              git commit -m "Auto-update project structure documentation [skip ci]"
              git push
              echo "Project structure committed successfully"
            else
              echo "No changes detected in project structure"
            fi
          else
            echo "Warning: Project structure file not found"
          fi

      - name: Restore and Build
        working-directory: ./AirCode
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Publish
        working-directory: ./AirCode
        run: dotnet publish --configuration Release --no-build --output ../dist

      - name: Prepare for GitHub Pages with PWA Support
        run: |
          mkdir -p ./pages
          
          if [ -d "./dist/wwwroot" ]; then
            cp -r ./dist/wwwroot/* ./pages/
          else
            echo "ERROR: wwwroot not found"
            exit 1
          fi
          
          # Critical: Add .nojekyll to prevent Jekyll processing
          touch ./pages/.nojekyll
          
          # Create 404.html for SPA routing
          cp ./pages/index.html ./pages/404.html
          
          # Update base href for GitHub Pages subpath in both files
          sed -i 's|<base href="/" />|<base href="/AirCode/" />|g' ./pages/index.html
          sed -i 's|<base href="/" />|<base href="/AirCode/" />|g' ./pages/404.html
          
          # Update manifest.json scope for GitHub Pages subpath
          if [ -f "./pages/manifest.json" ]; then
            sed -i 's|"start_url": "/AirCode/"|"start_url": "/AirCode/"|g' ./pages/manifest.json
            sed -i 's|"scope": "/AirCode/"|"scope": "/AirCode/"|g' ./pages/manifest.json
          fi
          
          # Fix MIME type issues - Add _headers file
          cat > ./pages/_headers << 'EOF'
          /*.wasm
            Content-Type: application/wasm
          /*.js
            Content-Type: application/javascript
          /*.webmanifest
            Content-Type: application/manifest+json
          EOF
          
          # Create .htaccess for Apache servers
          cat > ./pages/.htaccess << 'EOF'
          AddType application/wasm .wasm
          AddType application/javascript .js
          AddType application/manifest+json .webmanifest
          
          # SPA routing fallback
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          
          # PWA caching headers
          <IfModule mod_expires.c>
            ExpiresActive on
            ExpiresByType application/wasm "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 month"
            ExpiresByType text/css "access plus 1 month"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType application/manifest+json "access plus 1 week"
          </IfModule>
          EOF
          
          # Verify critical PWA files
          echo "=== Verifying PWA deployment ==="
          
          # Check service worker
          if [ -f "./pages/service-worker.js" ]; then
            echo "✅ Service worker found"
          else
            echo "❌ Service worker missing"
          fi
          
          # Check manifest
          if [ -f "./pages/manifest.webmanifest" ] || [ -f "./pages/manifest.json" ]; then
            echo "✅ Manifest found"
          else
            echo "❌ Manifest missing"
          fi
          
          # Check WASM files
          find ./pages -name "*.wasm" -type f -exec echo "Found WASM: {}" \;
          
          # Check service worker assets
          if [ -f "./pages/service-worker-assets.js" ]; then
            echo "✅ Service worker assets manifest found"
          else
            echo "❌ Service worker assets manifest missing"
          fi
          
          # Verify icons
          if [ -f "./pages/icon-192.png" ] && [ -f "./pages/icon-512.png" ]; then
            echo "✅ PWA icons found"
          else
            echo "❌ PWA icons missing"
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./pages

  deploy:
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
