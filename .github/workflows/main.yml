name: Deploy Blazor WASM to GitHub Pages

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Update Project Structure
        run: |
          echo "Generating comprehensive project structure..."
          
          # Verify project directory structure
          echo "Repository root contents:"
          ls -la
          
          # Navigate to project directory and validate
          if [ -d "AirCode" ]; then
            cd AirCode
            echo "AirCode directory contents:"
            ls -la
          else
            echo "Warning: AirCode directory not found, using repository root"
          fi
          
          # Enhanced structure generation function
          generate_comprehensive_structure() {
            local base_path="$1"
            local output_file="$2"
          
            # Initialize output file with metadata
            {
              echo "Project Structure Documentation"
              echo "Generated: $(date -u)"
              echo "Repository: ${{ github.repository }}"
              echo "Commit: ${{ github.sha }}"
              echo "=================================="
              echo
            } > "$output_file"
          
            # Capture all project-relevant files
            echo "Source Files:" >> "$output_file"
            echo "============" >> "$output_file"
            find "$base_path" -type f \( \
              -name "*.cs" -o \
              -name "*.razor" -o \
              -name "*.csproj" -o \
              -name "*.sln" -o \
              -name "*.json" -o \
              -name "*.css" -o \
              -name "*.scss" -o \
              -name "*.js" -o \
              -name "*.ts" -o \
              -name "*.html" -o \
              -name "*.md" \
            \) -not -path "*/bin/*" \
              -not -path "*/obj/*" \
              -not -path "*/.git/*" \
              -not -path "*/node_modules/*" | \
            sed "s|^$base_path/||" | sort >> "$output_file"
          
            echo >> "$output_file"
            echo "Directory Structure:" >> "$output_file"
            echo "==================" >> "$output_file"
          
            # Generate hierarchical directory tree
            find "$base_path" -type d \
              -not -path "*/bin" \
              -not -path "*/bin/*" \
              -not -path "*/obj" \
              -not -path "*/obj/*" \
              -not -path "*/.git" \
              -not -path "*/.git/*" \
              -not -path "*/node_modules" \
              -not -path "*/node_modules/*" | \
            sed "s|^$base_path||" | \
            sed 's|^/||' | \
            sort | \
            sed 's|[^/]*/|  |g' | \
            sed 's|^|./|' >> "$output_file"
          
            echo >> "$output_file"
            echo "File Count Summary:" >> "$output_file"
            echo "==================" >> "$output_file"
          
            # Generate file type statistics
            for ext in cs razor csproj sln json css js html; do
              count=$(find "$base_path" -name "*.$ext" -not -path "*/bin/*" -not -path "*/obj/*" | wc -l)
              if [ "$count" -gt 0 ]; then
                printf "%-10s: %d files\n" ".$ext" "$count" >> "$output_file"
              fi
            done
          }
          
          # Determine correct base path and output location
          if [ -d "AirCode" ]; then
            # Ensure output directory exists
            mkdir -p "AirCode/Others"
            generate_comprehensive_structure "AirCode" "AirCode/Others/ProjectStructure.txt"
          else
            # Fallback to repository root
            mkdir -p "Others"
            generate_comprehensive_structure "." "Others/ProjectStructure.txt"
          fi
          
          echo "Project structure documentation completed successfully"

      - name: Commit Updated Project Structure
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Determine structure file location
          STRUCTURE_FILE=""
          if [ -f "AirCode/Others/ProjectStructure.txt" ]; then
            STRUCTURE_FILE="AirCode/Others/ProjectStructure.txt"
          elif [ -f "Others/ProjectStructure.txt" ]; then
            STRUCTURE_FILE="Others/ProjectStructure.txt"
          fi
          
          if [ -n "$STRUCTURE_FILE" ]; then
            # Verify changes exist before committing
            if ! git diff --quiet "$STRUCTURE_FILE" 2>/dev/null; then
              git add "$STRUCTURE_FILE"
              git commit -m "Auto-update project structure documentation [skip ci]"
              git push
              echo "Project structure committed successfully"
            else
              echo "No changes detected in project structure"
            fi
          else
            echo "Warning: Project structure file not found"
          fi

      - name: Restore and Build
        working-directory: ./AirCode
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Publish
        working-directory: ./AirCode
        run: dotnet publish --configuration Release --no-build --output ../dist

      - name: Prepare Pages
        run: |
          mkdir -p ./pages
          cp -r ./dist/wwwroot/* ./pages/
          touch ./pages/.nojekyll
          
          # Copy additional assets if they exist
          if [ -d "./AirCode/svgs" ]; then
            mkdir -p ./pages/svgs
            cp -r ./AirCode/svgs/* ./pages/svgs/
          fi
          
          # Create 404.html for SPA routing support
          cat > ./pages/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8">
              <title>Single Page Apps for GitHub Pages</title>
              <script type="text/javascript">
                // Single Page Apps for GitHub Pages
                // https://github.com/rafgraph/spa-github-pages
                var pathSegmentsToKeep = 1;
                var l = window.location;
                l.replace(
                  l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
                  l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + '/?/' +
                  l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
                  (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
                  l.hash
                );
              </script>
            </head>
            <body>
            </body>
          </html>
          EOF
          
          # Configure base href for GitHub Pages deployment
          sed -i 's|<base href="/" />|<base href="/${{ github.event.repository.name }}/" />|g' ./pages/index.html
          
          # Inject SPA routing script into index.html
          sed -i '/<base href="[^"]*" \/>/a\    \n    <!-- SPA routing support for GitHub Pages -->\n    <script type="text/javascript">\n        (function(l) {\n            if (l.search[1] === "/" ) {\n                var decoded = l.search.slice(1).split("&").map(function(s) { \n                return s.replace(/~and~/g, "&")\n                }).join("?");\n                window.history.replaceState(null, null,\n                    l.pathname.slice(0, -1) + decoded + l.hash\n                );\n            }\n        }(window.location))\n    </script>' ./pages/index.html
          
          # Configure service worker for GitHub Pages
          if [ -f "./pages/service-worker.published.js" ]; then
            cp ./pages/service-worker.published.js ./pages/service-worker.js
            sed -i 's|"/|"/${{ github.event.repository.name }}/|g' ./pages/service-worker.js
          fi
          
          echo "GitHub Pages deployment preparation completed"

      - name: Upload Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./pages

  deploy:
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4